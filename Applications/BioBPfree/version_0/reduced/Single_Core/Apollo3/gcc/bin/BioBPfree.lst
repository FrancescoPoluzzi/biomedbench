
bin/BioBPfree.axf:     file format elf32-littlearm


Disassembly of section .text:

0000c000 <g_am_pfnVectors>:
    c000:	00 10 00 10 c9 d2 00 00 bd d2 00 00 19 cb 00 00     ................
    c010:	c1 d2 00 00 c1 d2 00 00 c1 d2 00 00 00 00 00 00     ................
	...
    c02c:	f1 d0 00 00 c5 d2 00 00 00 00 00 00 61 d1 00 00     ............a...
    c03c:	c5 d1 00 00 c5 d2 00 00 c5 d2 00 00 c5 d2 00 00     ................
    c04c:	c5 d2 00 00 c5 d2 00 00 c5 d2 00 00 c5 d2 00 00     ................
    c05c:	c5 d2 00 00 c5 d2 00 00 c5 d2 00 00 c5 d2 00 00     ................
    c06c:	c5 d2 00 00 c5 d2 00 00 71 ca 00 00 c5 d2 00 00     ........q.......
    c07c:	c5 d2 00 00 c5 d2 00 00 c5 d2 00 00 c5 d2 00 00     ................
    c08c:	c5 d2 00 00 c5 d2 00 00 c5 d2 00 00 c5 d2 00 00     ................
    c09c:	71 d2 00 00 91 d2 00 00 c5 d2 00 00 c5 d2 00 00     q...............
    c0ac:	c5 d2 00 00 c5 d2 00 00 c5 d2 00 00 c5 d2 00 00     ................
    c0bc:	c5 d2 00 00                                         ....

0000c0c0 <__Patchable>:
	...

0000c100 <memset>:
    c100:	b4f0      	push	{r4, r5, r6, r7}
    c102:	0786      	lsls	r6, r0, #30
    c104:	d046      	beq.n	c194 <memset+0x94>
    c106:	1e54      	subs	r4, r2, #1
    c108:	2a00      	cmp	r2, #0
    c10a:	d03c      	beq.n	c186 <memset+0x86>
    c10c:	b2ca      	uxtb	r2, r1
    c10e:	4603      	mov	r3, r0
    c110:	e002      	b.n	c118 <memset+0x18>
    c112:	f114 34ff 	adds.w	r4, r4, #4294967295	; 0xffffffff
    c116:	d336      	bcc.n	c186 <memset+0x86>
    c118:	f803 2b01 	strb.w	r2, [r3], #1
    c11c:	079d      	lsls	r5, r3, #30
    c11e:	d1f8      	bne.n	c112 <memset+0x12>
    c120:	2c03      	cmp	r4, #3
    c122:	d929      	bls.n	c178 <memset+0x78>
    c124:	b2cd      	uxtb	r5, r1
    c126:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
    c12a:	2c0f      	cmp	r4, #15
    c12c:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
    c130:	d933      	bls.n	c19a <memset+0x9a>
    c132:	f1a4 0610 	sub.w	r6, r4, #16
    c136:	0936      	lsrs	r6, r6, #4
    c138:	f103 0720 	add.w	r7, r3, #32
    c13c:	eb07 1706 	add.w	r7, r7, r6, lsl #4
    c140:	f103 0210 	add.w	r2, r3, #16
    c144:	e942 5504 	strd	r5, r5, [r2, #-16]
    c148:	e942 5502 	strd	r5, r5, [r2, #-8]
    c14c:	3210      	adds	r2, #16
    c14e:	42ba      	cmp	r2, r7
    c150:	d1f8      	bne.n	c144 <memset+0x44>
    c152:	1c72      	adds	r2, r6, #1
    c154:	f014 0f0c 	tst.w	r4, #12
    c158:	eb03 1202 	add.w	r2, r3, r2, lsl #4
    c15c:	f004 060f 	and.w	r6, r4, #15
    c160:	d013      	beq.n	c18a <memset+0x8a>
    c162:	1f33      	subs	r3, r6, #4
    c164:	f023 0303 	bic.w	r3, r3, #3
    c168:	3304      	adds	r3, #4
    c16a:	4413      	add	r3, r2
    c16c:	f842 5b04 	str.w	r5, [r2], #4
    c170:	4293      	cmp	r3, r2
    c172:	d1fb      	bne.n	c16c <memset+0x6c>
    c174:	f006 0403 	and.w	r4, r6, #3
    c178:	b12c      	cbz	r4, c186 <memset+0x86>
    c17a:	b2c9      	uxtb	r1, r1
    c17c:	441c      	add	r4, r3
    c17e:	f803 1b01 	strb.w	r1, [r3], #1
    c182:	429c      	cmp	r4, r3
    c184:	d1fb      	bne.n	c17e <memset+0x7e>
    c186:	bcf0      	pop	{r4, r5, r6, r7}
    c188:	4770      	bx	lr
    c18a:	4634      	mov	r4, r6
    c18c:	4613      	mov	r3, r2
    c18e:	2c00      	cmp	r4, #0
    c190:	d1f3      	bne.n	c17a <memset+0x7a>
    c192:	e7f8      	b.n	c186 <memset+0x86>
    c194:	4614      	mov	r4, r2
    c196:	4603      	mov	r3, r0
    c198:	e7c2      	b.n	c120 <memset+0x20>
    c19a:	461a      	mov	r2, r3
    c19c:	4626      	mov	r6, r4
    c19e:	e7e0      	b.n	c162 <memset+0x62>

0000c1a0 <__aeabi_drsub>:
    c1a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
    c1a4:	e002      	b.n	c1ac <__adddf3>
    c1a6:	bf00      	nop

0000c1a8 <__aeabi_dsub>:
    c1a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0000c1ac <__adddf3>:
    c1ac:	b530      	push	{r4, r5, lr}
    c1ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
    c1b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
    c1b6:	ea94 0f05 	teq	r4, r5
    c1ba:	bf08      	it	eq
    c1bc:	ea90 0f02 	teqeq	r0, r2
    c1c0:	bf1f      	itttt	ne
    c1c2:	ea54 0c00 	orrsne.w	ip, r4, r0
    c1c6:	ea55 0c02 	orrsne.w	ip, r5, r2
    c1ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
    c1ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
    c1d2:	f000 80e2 	beq.w	c39a <__adddf3+0x1ee>
    c1d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
    c1da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
    c1de:	bfb8      	it	lt
    c1e0:	426d      	neglt	r5, r5
    c1e2:	dd0c      	ble.n	c1fe <__adddf3+0x52>
    c1e4:	442c      	add	r4, r5
    c1e6:	ea80 0202 	eor.w	r2, r0, r2
    c1ea:	ea81 0303 	eor.w	r3, r1, r3
    c1ee:	ea82 0000 	eor.w	r0, r2, r0
    c1f2:	ea83 0101 	eor.w	r1, r3, r1
    c1f6:	ea80 0202 	eor.w	r2, r0, r2
    c1fa:	ea81 0303 	eor.w	r3, r1, r3
    c1fe:	2d36      	cmp	r5, #54	; 0x36
    c200:	bf88      	it	hi
    c202:	bd30      	pophi	{r4, r5, pc}
    c204:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
    c208:	ea4f 3101 	mov.w	r1, r1, lsl #12
    c20c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
    c210:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
    c214:	d002      	beq.n	c21c <__adddf3+0x70>
    c216:	4240      	negs	r0, r0
    c218:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    c21c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
    c220:	ea4f 3303 	mov.w	r3, r3, lsl #12
    c224:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
    c228:	d002      	beq.n	c230 <__adddf3+0x84>
    c22a:	4252      	negs	r2, r2
    c22c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    c230:	ea94 0f05 	teq	r4, r5
    c234:	f000 80a7 	beq.w	c386 <__adddf3+0x1da>
    c238:	f1a4 0401 	sub.w	r4, r4, #1
    c23c:	f1d5 0e20 	rsbs	lr, r5, #32
    c240:	db0d      	blt.n	c25e <__adddf3+0xb2>
    c242:	fa02 fc0e 	lsl.w	ip, r2, lr
    c246:	fa22 f205 	lsr.w	r2, r2, r5
    c24a:	1880      	adds	r0, r0, r2
    c24c:	f141 0100 	adc.w	r1, r1, #0
    c250:	fa03 f20e 	lsl.w	r2, r3, lr
    c254:	1880      	adds	r0, r0, r2
    c256:	fa43 f305 	asr.w	r3, r3, r5
    c25a:	4159      	adcs	r1, r3
    c25c:	e00e      	b.n	c27c <__adddf3+0xd0>
    c25e:	f1a5 0520 	sub.w	r5, r5, #32
    c262:	f10e 0e20 	add.w	lr, lr, #32
    c266:	2a01      	cmp	r2, #1
    c268:	fa03 fc0e 	lsl.w	ip, r3, lr
    c26c:	bf28      	it	cs
    c26e:	f04c 0c02 	orrcs.w	ip, ip, #2
    c272:	fa43 f305 	asr.w	r3, r3, r5
    c276:	18c0      	adds	r0, r0, r3
    c278:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
    c27c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    c280:	d507      	bpl.n	c292 <__adddf3+0xe6>
    c282:	f04f 0e00 	mov.w	lr, #0
    c286:	f1dc 0c00 	rsbs	ip, ip, #0
    c28a:	eb7e 0000 	sbcs.w	r0, lr, r0
    c28e:	eb6e 0101 	sbc.w	r1, lr, r1
    c292:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
    c296:	d31b      	bcc.n	c2d0 <__adddf3+0x124>
    c298:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
    c29c:	d30c      	bcc.n	c2b8 <__adddf3+0x10c>
    c29e:	0849      	lsrs	r1, r1, #1
    c2a0:	ea5f 0030 	movs.w	r0, r0, rrx
    c2a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
    c2a8:	f104 0401 	add.w	r4, r4, #1
    c2ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
    c2b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
    c2b4:	f080 809a 	bcs.w	c3ec <__adddf3+0x240>
    c2b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
    c2bc:	bf08      	it	eq
    c2be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
    c2c2:	f150 0000 	adcs.w	r0, r0, #0
    c2c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    c2ca:	ea41 0105 	orr.w	r1, r1, r5
    c2ce:	bd30      	pop	{r4, r5, pc}
    c2d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
    c2d4:	4140      	adcs	r0, r0
    c2d6:	eb41 0101 	adc.w	r1, r1, r1
    c2da:	3c01      	subs	r4, #1
    c2dc:	bf28      	it	cs
    c2de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
    c2e2:	d2e9      	bcs.n	c2b8 <__adddf3+0x10c>
    c2e4:	f091 0f00 	teq	r1, #0
    c2e8:	bf04      	itt	eq
    c2ea:	4601      	moveq	r1, r0
    c2ec:	2000      	moveq	r0, #0
    c2ee:	fab1 f381 	clz	r3, r1
    c2f2:	bf08      	it	eq
    c2f4:	3320      	addeq	r3, #32
    c2f6:	f1a3 030b 	sub.w	r3, r3, #11
    c2fa:	f1b3 0220 	subs.w	r2, r3, #32
    c2fe:	da0c      	bge.n	c31a <__adddf3+0x16e>
    c300:	320c      	adds	r2, #12
    c302:	dd08      	ble.n	c316 <__adddf3+0x16a>
    c304:	f102 0c14 	add.w	ip, r2, #20
    c308:	f1c2 020c 	rsb	r2, r2, #12
    c30c:	fa01 f00c 	lsl.w	r0, r1, ip
    c310:	fa21 f102 	lsr.w	r1, r1, r2
    c314:	e00c      	b.n	c330 <__adddf3+0x184>
    c316:	f102 0214 	add.w	r2, r2, #20
    c31a:	bfd8      	it	le
    c31c:	f1c2 0c20 	rsble	ip, r2, #32
    c320:	fa01 f102 	lsl.w	r1, r1, r2
    c324:	fa20 fc0c 	lsr.w	ip, r0, ip
    c328:	bfdc      	itt	le
    c32a:	ea41 010c 	orrle.w	r1, r1, ip
    c32e:	4090      	lslle	r0, r2
    c330:	1ae4      	subs	r4, r4, r3
    c332:	bfa2      	ittt	ge
    c334:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
    c338:	4329      	orrge	r1, r5
    c33a:	bd30      	popge	{r4, r5, pc}
    c33c:	ea6f 0404 	mvn.w	r4, r4
    c340:	3c1f      	subs	r4, #31
    c342:	da1c      	bge.n	c37e <__adddf3+0x1d2>
    c344:	340c      	adds	r4, #12
    c346:	dc0e      	bgt.n	c366 <__adddf3+0x1ba>
    c348:	f104 0414 	add.w	r4, r4, #20
    c34c:	f1c4 0220 	rsb	r2, r4, #32
    c350:	fa20 f004 	lsr.w	r0, r0, r4
    c354:	fa01 f302 	lsl.w	r3, r1, r2
    c358:	ea40 0003 	orr.w	r0, r0, r3
    c35c:	fa21 f304 	lsr.w	r3, r1, r4
    c360:	ea45 0103 	orr.w	r1, r5, r3
    c364:	bd30      	pop	{r4, r5, pc}
    c366:	f1c4 040c 	rsb	r4, r4, #12
    c36a:	f1c4 0220 	rsb	r2, r4, #32
    c36e:	fa20 f002 	lsr.w	r0, r0, r2
    c372:	fa01 f304 	lsl.w	r3, r1, r4
    c376:	ea40 0003 	orr.w	r0, r0, r3
    c37a:	4629      	mov	r1, r5
    c37c:	bd30      	pop	{r4, r5, pc}
    c37e:	fa21 f004 	lsr.w	r0, r1, r4
    c382:	4629      	mov	r1, r5
    c384:	bd30      	pop	{r4, r5, pc}
    c386:	f094 0f00 	teq	r4, #0
    c38a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
    c38e:	bf06      	itte	eq
    c390:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
    c394:	3401      	addeq	r4, #1
    c396:	3d01      	subne	r5, #1
    c398:	e74e      	b.n	c238 <__adddf3+0x8c>
    c39a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
    c39e:	bf18      	it	ne
    c3a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
    c3a4:	d029      	beq.n	c3fa <__adddf3+0x24e>
    c3a6:	ea94 0f05 	teq	r4, r5
    c3aa:	bf08      	it	eq
    c3ac:	ea90 0f02 	teqeq	r0, r2
    c3b0:	d005      	beq.n	c3be <__adddf3+0x212>
    c3b2:	ea54 0c00 	orrs.w	ip, r4, r0
    c3b6:	bf04      	itt	eq
    c3b8:	4619      	moveq	r1, r3
    c3ba:	4610      	moveq	r0, r2
    c3bc:	bd30      	pop	{r4, r5, pc}
    c3be:	ea91 0f03 	teq	r1, r3
    c3c2:	bf1e      	ittt	ne
    c3c4:	2100      	movne	r1, #0
    c3c6:	2000      	movne	r0, #0
    c3c8:	bd30      	popne	{r4, r5, pc}
    c3ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
    c3ce:	d105      	bne.n	c3dc <__adddf3+0x230>
    c3d0:	0040      	lsls	r0, r0, #1
    c3d2:	4149      	adcs	r1, r1
    c3d4:	bf28      	it	cs
    c3d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
    c3da:	bd30      	pop	{r4, r5, pc}
    c3dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
    c3e0:	bf3c      	itt	cc
    c3e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
    c3e6:	bd30      	popcc	{r4, r5, pc}
    c3e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    c3ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
    c3f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    c3f4:	f04f 0000 	mov.w	r0, #0
    c3f8:	bd30      	pop	{r4, r5, pc}
    c3fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
    c3fe:	bf1a      	itte	ne
    c400:	4619      	movne	r1, r3
    c402:	4610      	movne	r0, r2
    c404:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
    c408:	bf1c      	itt	ne
    c40a:	460b      	movne	r3, r1
    c40c:	4602      	movne	r2, r0
    c40e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
    c412:	bf06      	itte	eq
    c414:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
    c418:	ea91 0f03 	teqeq	r1, r3
    c41c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
    c420:	bd30      	pop	{r4, r5, pc}
    c422:	bf00      	nop

0000c424 <__aeabi_ui2d>:
    c424:	f090 0f00 	teq	r0, #0
    c428:	bf04      	itt	eq
    c42a:	2100      	moveq	r1, #0
    c42c:	4770      	bxeq	lr
    c42e:	b530      	push	{r4, r5, lr}
    c430:	f44f 6480 	mov.w	r4, #1024	; 0x400
    c434:	f104 0432 	add.w	r4, r4, #50	; 0x32
    c438:	f04f 0500 	mov.w	r5, #0
    c43c:	f04f 0100 	mov.w	r1, #0
    c440:	e750      	b.n	c2e4 <__adddf3+0x138>
    c442:	bf00      	nop

0000c444 <__aeabi_i2d>:
    c444:	f090 0f00 	teq	r0, #0
    c448:	bf04      	itt	eq
    c44a:	2100      	moveq	r1, #0
    c44c:	4770      	bxeq	lr
    c44e:	b530      	push	{r4, r5, lr}
    c450:	f44f 6480 	mov.w	r4, #1024	; 0x400
    c454:	f104 0432 	add.w	r4, r4, #50	; 0x32
    c458:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
    c45c:	bf48      	it	mi
    c45e:	4240      	negmi	r0, r0
    c460:	f04f 0100 	mov.w	r1, #0
    c464:	e73e      	b.n	c2e4 <__adddf3+0x138>
    c466:	bf00      	nop

0000c468 <__aeabi_f2d>:
    c468:	0042      	lsls	r2, r0, #1
    c46a:	ea4f 01e2 	mov.w	r1, r2, asr #3
    c46e:	ea4f 0131 	mov.w	r1, r1, rrx
    c472:	ea4f 7002 	mov.w	r0, r2, lsl #28
    c476:	bf1f      	itttt	ne
    c478:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
    c47c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
    c480:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
    c484:	4770      	bxne	lr
    c486:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
    c48a:	bf08      	it	eq
    c48c:	4770      	bxeq	lr
    c48e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
    c492:	bf04      	itt	eq
    c494:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
    c498:	4770      	bxeq	lr
    c49a:	b530      	push	{r4, r5, lr}
    c49c:	f44f 7460 	mov.w	r4, #896	; 0x380
    c4a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    c4a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
    c4a8:	e71c      	b.n	c2e4 <__adddf3+0x138>
    c4aa:	bf00      	nop

0000c4ac <__aeabi_ul2d>:
    c4ac:	ea50 0201 	orrs.w	r2, r0, r1
    c4b0:	bf08      	it	eq
    c4b2:	4770      	bxeq	lr
    c4b4:	b530      	push	{r4, r5, lr}
    c4b6:	f04f 0500 	mov.w	r5, #0
    c4ba:	e00a      	b.n	c4d2 <__aeabi_l2d+0x16>

0000c4bc <__aeabi_l2d>:
    c4bc:	ea50 0201 	orrs.w	r2, r0, r1
    c4c0:	bf08      	it	eq
    c4c2:	4770      	bxeq	lr
    c4c4:	b530      	push	{r4, r5, lr}
    c4c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
    c4ca:	d502      	bpl.n	c4d2 <__aeabi_l2d+0x16>
    c4cc:	4240      	negs	r0, r0
    c4ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    c4d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
    c4d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
    c4da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
    c4de:	f43f aed8 	beq.w	c292 <__adddf3+0xe6>
    c4e2:	f04f 0203 	mov.w	r2, #3
    c4e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
    c4ea:	bf18      	it	ne
    c4ec:	3203      	addne	r2, #3
    c4ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
    c4f2:	bf18      	it	ne
    c4f4:	3203      	addne	r2, #3
    c4f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
    c4fa:	f1c2 0320 	rsb	r3, r2, #32
    c4fe:	fa00 fc03 	lsl.w	ip, r0, r3
    c502:	fa20 f002 	lsr.w	r0, r0, r2
    c506:	fa01 fe03 	lsl.w	lr, r1, r3
    c50a:	ea40 000e 	orr.w	r0, r0, lr
    c50e:	fa21 f102 	lsr.w	r1, r1, r2
    c512:	4414      	add	r4, r2
    c514:	e6bd      	b.n	c292 <__adddf3+0xe6>
    c516:	bf00      	nop

0000c518 <__aeabi_dmul>:
    c518:	b570      	push	{r4, r5, r6, lr}
    c51a:	f04f 0cff 	mov.w	ip, #255	; 0xff
    c51e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
    c522:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
    c526:	bf1d      	ittte	ne
    c528:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
    c52c:	ea94 0f0c 	teqne	r4, ip
    c530:	ea95 0f0c 	teqne	r5, ip
    c534:	f000 f8de 	bleq	c6f4 <__aeabi_dmul+0x1dc>
    c538:	442c      	add	r4, r5
    c53a:	ea81 0603 	eor.w	r6, r1, r3
    c53e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
    c542:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
    c546:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
    c54a:	bf18      	it	ne
    c54c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
    c550:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    c554:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
    c558:	d038      	beq.n	c5cc <__aeabi_dmul+0xb4>
    c55a:	fba0 ce02 	umull	ip, lr, r0, r2
    c55e:	f04f 0500 	mov.w	r5, #0
    c562:	fbe1 e502 	umlal	lr, r5, r1, r2
    c566:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
    c56a:	fbe0 e503 	umlal	lr, r5, r0, r3
    c56e:	f04f 0600 	mov.w	r6, #0
    c572:	fbe1 5603 	umlal	r5, r6, r1, r3
    c576:	f09c 0f00 	teq	ip, #0
    c57a:	bf18      	it	ne
    c57c:	f04e 0e01 	orrne.w	lr, lr, #1
    c580:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
    c584:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
    c588:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
    c58c:	d204      	bcs.n	c598 <__aeabi_dmul+0x80>
    c58e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
    c592:	416d      	adcs	r5, r5
    c594:	eb46 0606 	adc.w	r6, r6, r6
    c598:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
    c59c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
    c5a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
    c5a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
    c5a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
    c5ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
    c5b0:	bf88      	it	hi
    c5b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
    c5b6:	d81e      	bhi.n	c5f6 <__aeabi_dmul+0xde>
    c5b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
    c5bc:	bf08      	it	eq
    c5be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
    c5c2:	f150 0000 	adcs.w	r0, r0, #0
    c5c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    c5ca:	bd70      	pop	{r4, r5, r6, pc}
    c5cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
    c5d0:	ea46 0101 	orr.w	r1, r6, r1
    c5d4:	ea40 0002 	orr.w	r0, r0, r2
    c5d8:	ea81 0103 	eor.w	r1, r1, r3
    c5dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
    c5e0:	bfc2      	ittt	gt
    c5e2:	ebd4 050c 	rsbsgt	r5, r4, ip
    c5e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
    c5ea:	bd70      	popgt	{r4, r5, r6, pc}
    c5ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    c5f0:	f04f 0e00 	mov.w	lr, #0
    c5f4:	3c01      	subs	r4, #1
    c5f6:	f300 80ab 	bgt.w	c750 <__aeabi_dmul+0x238>
    c5fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
    c5fe:	bfde      	ittt	le
    c600:	2000      	movle	r0, #0
    c602:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
    c606:	bd70      	pople	{r4, r5, r6, pc}
    c608:	f1c4 0400 	rsb	r4, r4, #0
    c60c:	3c20      	subs	r4, #32
    c60e:	da35      	bge.n	c67c <__aeabi_dmul+0x164>
    c610:	340c      	adds	r4, #12
    c612:	dc1b      	bgt.n	c64c <__aeabi_dmul+0x134>
    c614:	f104 0414 	add.w	r4, r4, #20
    c618:	f1c4 0520 	rsb	r5, r4, #32
    c61c:	fa00 f305 	lsl.w	r3, r0, r5
    c620:	fa20 f004 	lsr.w	r0, r0, r4
    c624:	fa01 f205 	lsl.w	r2, r1, r5
    c628:	ea40 0002 	orr.w	r0, r0, r2
    c62c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
    c630:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
    c634:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
    c638:	fa21 f604 	lsr.w	r6, r1, r4
    c63c:	eb42 0106 	adc.w	r1, r2, r6
    c640:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    c644:	bf08      	it	eq
    c646:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    c64a:	bd70      	pop	{r4, r5, r6, pc}
    c64c:	f1c4 040c 	rsb	r4, r4, #12
    c650:	f1c4 0520 	rsb	r5, r4, #32
    c654:	fa00 f304 	lsl.w	r3, r0, r4
    c658:	fa20 f005 	lsr.w	r0, r0, r5
    c65c:	fa01 f204 	lsl.w	r2, r1, r4
    c660:	ea40 0002 	orr.w	r0, r0, r2
    c664:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    c668:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
    c66c:	f141 0100 	adc.w	r1, r1, #0
    c670:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    c674:	bf08      	it	eq
    c676:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    c67a:	bd70      	pop	{r4, r5, r6, pc}
    c67c:	f1c4 0520 	rsb	r5, r4, #32
    c680:	fa00 f205 	lsl.w	r2, r0, r5
    c684:	ea4e 0e02 	orr.w	lr, lr, r2
    c688:	fa20 f304 	lsr.w	r3, r0, r4
    c68c:	fa01 f205 	lsl.w	r2, r1, r5
    c690:	ea43 0302 	orr.w	r3, r3, r2
    c694:	fa21 f004 	lsr.w	r0, r1, r4
    c698:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    c69c:	fa21 f204 	lsr.w	r2, r1, r4
    c6a0:	ea20 0002 	bic.w	r0, r0, r2
    c6a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
    c6a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    c6ac:	bf08      	it	eq
    c6ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    c6b2:	bd70      	pop	{r4, r5, r6, pc}
    c6b4:	f094 0f00 	teq	r4, #0
    c6b8:	d10f      	bne.n	c6da <__aeabi_dmul+0x1c2>
    c6ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
    c6be:	0040      	lsls	r0, r0, #1
    c6c0:	eb41 0101 	adc.w	r1, r1, r1
    c6c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    c6c8:	bf08      	it	eq
    c6ca:	3c01      	subeq	r4, #1
    c6cc:	d0f7      	beq.n	c6be <__aeabi_dmul+0x1a6>
    c6ce:	ea41 0106 	orr.w	r1, r1, r6
    c6d2:	f095 0f00 	teq	r5, #0
    c6d6:	bf18      	it	ne
    c6d8:	4770      	bxne	lr
    c6da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
    c6de:	0052      	lsls	r2, r2, #1
    c6e0:	eb43 0303 	adc.w	r3, r3, r3
    c6e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
    c6e8:	bf08      	it	eq
    c6ea:	3d01      	subeq	r5, #1
    c6ec:	d0f7      	beq.n	c6de <__aeabi_dmul+0x1c6>
    c6ee:	ea43 0306 	orr.w	r3, r3, r6
    c6f2:	4770      	bx	lr
    c6f4:	ea94 0f0c 	teq	r4, ip
    c6f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
    c6fc:	bf18      	it	ne
    c6fe:	ea95 0f0c 	teqne	r5, ip
    c702:	d00c      	beq.n	c71e <__aeabi_dmul+0x206>
    c704:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    c708:	bf18      	it	ne
    c70a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    c70e:	d1d1      	bne.n	c6b4 <__aeabi_dmul+0x19c>
    c710:	ea81 0103 	eor.w	r1, r1, r3
    c714:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    c718:	f04f 0000 	mov.w	r0, #0
    c71c:	bd70      	pop	{r4, r5, r6, pc}
    c71e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    c722:	bf06      	itte	eq
    c724:	4610      	moveq	r0, r2
    c726:	4619      	moveq	r1, r3
    c728:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    c72c:	d019      	beq.n	c762 <__aeabi_dmul+0x24a>
    c72e:	ea94 0f0c 	teq	r4, ip
    c732:	d102      	bne.n	c73a <__aeabi_dmul+0x222>
    c734:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
    c738:	d113      	bne.n	c762 <__aeabi_dmul+0x24a>
    c73a:	ea95 0f0c 	teq	r5, ip
    c73e:	d105      	bne.n	c74c <__aeabi_dmul+0x234>
    c740:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
    c744:	bf1c      	itt	ne
    c746:	4610      	movne	r0, r2
    c748:	4619      	movne	r1, r3
    c74a:	d10a      	bne.n	c762 <__aeabi_dmul+0x24a>
    c74c:	ea81 0103 	eor.w	r1, r1, r3
    c750:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    c754:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
    c758:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    c75c:	f04f 0000 	mov.w	r0, #0
    c760:	bd70      	pop	{r4, r5, r6, pc}
    c762:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
    c766:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
    c76a:	bd70      	pop	{r4, r5, r6, pc}

0000c76c <__aeabi_ddiv>:
    c76c:	b570      	push	{r4, r5, r6, lr}
    c76e:	f04f 0cff 	mov.w	ip, #255	; 0xff
    c772:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
    c776:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
    c77a:	bf1d      	ittte	ne
    c77c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
    c780:	ea94 0f0c 	teqne	r4, ip
    c784:	ea95 0f0c 	teqne	r5, ip
    c788:	f000 f8a7 	bleq	c8da <__aeabi_ddiv+0x16e>
    c78c:	eba4 0405 	sub.w	r4, r4, r5
    c790:	ea81 0e03 	eor.w	lr, r1, r3
    c794:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
    c798:	ea4f 3101 	mov.w	r1, r1, lsl #12
    c79c:	f000 8088 	beq.w	c8b0 <__aeabi_ddiv+0x144>
    c7a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
    c7a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
    c7a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
    c7ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
    c7b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
    c7b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
    c7b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
    c7bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
    c7c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
    c7c4:	429d      	cmp	r5, r3
    c7c6:	bf08      	it	eq
    c7c8:	4296      	cmpeq	r6, r2
    c7ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
    c7ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
    c7d2:	d202      	bcs.n	c7da <__aeabi_ddiv+0x6e>
    c7d4:	085b      	lsrs	r3, r3, #1
    c7d6:	ea4f 0232 	mov.w	r2, r2, rrx
    c7da:	1ab6      	subs	r6, r6, r2
    c7dc:	eb65 0503 	sbc.w	r5, r5, r3
    c7e0:	085b      	lsrs	r3, r3, #1
    c7e2:	ea4f 0232 	mov.w	r2, r2, rrx
    c7e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
    c7ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
    c7ee:	ebb6 0e02 	subs.w	lr, r6, r2
    c7f2:	eb75 0e03 	sbcs.w	lr, r5, r3
    c7f6:	bf22      	ittt	cs
    c7f8:	1ab6      	subcs	r6, r6, r2
    c7fa:	4675      	movcs	r5, lr
    c7fc:	ea40 000c 	orrcs.w	r0, r0, ip
    c800:	085b      	lsrs	r3, r3, #1
    c802:	ea4f 0232 	mov.w	r2, r2, rrx
    c806:	ebb6 0e02 	subs.w	lr, r6, r2
    c80a:	eb75 0e03 	sbcs.w	lr, r5, r3
    c80e:	bf22      	ittt	cs
    c810:	1ab6      	subcs	r6, r6, r2
    c812:	4675      	movcs	r5, lr
    c814:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
    c818:	085b      	lsrs	r3, r3, #1
    c81a:	ea4f 0232 	mov.w	r2, r2, rrx
    c81e:	ebb6 0e02 	subs.w	lr, r6, r2
    c822:	eb75 0e03 	sbcs.w	lr, r5, r3
    c826:	bf22      	ittt	cs
    c828:	1ab6      	subcs	r6, r6, r2
    c82a:	4675      	movcs	r5, lr
    c82c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
    c830:	085b      	lsrs	r3, r3, #1
    c832:	ea4f 0232 	mov.w	r2, r2, rrx
    c836:	ebb6 0e02 	subs.w	lr, r6, r2
    c83a:	eb75 0e03 	sbcs.w	lr, r5, r3
    c83e:	bf22      	ittt	cs
    c840:	1ab6      	subcs	r6, r6, r2
    c842:	4675      	movcs	r5, lr
    c844:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
    c848:	ea55 0e06 	orrs.w	lr, r5, r6
    c84c:	d018      	beq.n	c880 <__aeabi_ddiv+0x114>
    c84e:	ea4f 1505 	mov.w	r5, r5, lsl #4
    c852:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
    c856:	ea4f 1606 	mov.w	r6, r6, lsl #4
    c85a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
    c85e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
    c862:	ea4f 02c2 	mov.w	r2, r2, lsl #3
    c866:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
    c86a:	d1c0      	bne.n	c7ee <__aeabi_ddiv+0x82>
    c86c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    c870:	d10b      	bne.n	c88a <__aeabi_ddiv+0x11e>
    c872:	ea41 0100 	orr.w	r1, r1, r0
    c876:	f04f 0000 	mov.w	r0, #0
    c87a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
    c87e:	e7b6      	b.n	c7ee <__aeabi_ddiv+0x82>
    c880:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    c884:	bf04      	itt	eq
    c886:	4301      	orreq	r1, r0
    c888:	2000      	moveq	r0, #0
    c88a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
    c88e:	bf88      	it	hi
    c890:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
    c894:	f63f aeaf 	bhi.w	c5f6 <__aeabi_dmul+0xde>
    c898:	ebb5 0c03 	subs.w	ip, r5, r3
    c89c:	bf04      	itt	eq
    c89e:	ebb6 0c02 	subseq.w	ip, r6, r2
    c8a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
    c8a6:	f150 0000 	adcs.w	r0, r0, #0
    c8aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    c8ae:	bd70      	pop	{r4, r5, r6, pc}
    c8b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
    c8b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
    c8b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
    c8bc:	bfc2      	ittt	gt
    c8be:	ebd4 050c 	rsbsgt	r5, r4, ip
    c8c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
    c8c6:	bd70      	popgt	{r4, r5, r6, pc}
    c8c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    c8cc:	f04f 0e00 	mov.w	lr, #0
    c8d0:	3c01      	subs	r4, #1
    c8d2:	e690      	b.n	c5f6 <__aeabi_dmul+0xde>
    c8d4:	ea45 0e06 	orr.w	lr, r5, r6
    c8d8:	e68d      	b.n	c5f6 <__aeabi_dmul+0xde>
    c8da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
    c8de:	ea94 0f0c 	teq	r4, ip
    c8e2:	bf08      	it	eq
    c8e4:	ea95 0f0c 	teqeq	r5, ip
    c8e8:	f43f af3b 	beq.w	c762 <__aeabi_dmul+0x24a>
    c8ec:	ea94 0f0c 	teq	r4, ip
    c8f0:	d10a      	bne.n	c908 <__aeabi_ddiv+0x19c>
    c8f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
    c8f6:	f47f af34 	bne.w	c762 <__aeabi_dmul+0x24a>
    c8fa:	ea95 0f0c 	teq	r5, ip
    c8fe:	f47f af25 	bne.w	c74c <__aeabi_dmul+0x234>
    c902:	4610      	mov	r0, r2
    c904:	4619      	mov	r1, r3
    c906:	e72c      	b.n	c762 <__aeabi_dmul+0x24a>
    c908:	ea95 0f0c 	teq	r5, ip
    c90c:	d106      	bne.n	c91c <__aeabi_ddiv+0x1b0>
    c90e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
    c912:	f43f aefd 	beq.w	c710 <__aeabi_dmul+0x1f8>
    c916:	4610      	mov	r0, r2
    c918:	4619      	mov	r1, r3
    c91a:	e722      	b.n	c762 <__aeabi_dmul+0x24a>
    c91c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    c920:	bf18      	it	ne
    c922:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    c926:	f47f aec5 	bne.w	c6b4 <__aeabi_dmul+0x19c>
    c92a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
    c92e:	f47f af0d 	bne.w	c74c <__aeabi_dmul+0x234>
    c932:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
    c936:	f47f aeeb 	bne.w	c710 <__aeabi_dmul+0x1f8>
    c93a:	e712      	b.n	c762 <__aeabi_dmul+0x24a>

0000c93c <__aeabi_d2f>:
    c93c:	ea4f 0241 	mov.w	r2, r1, lsl #1
    c940:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
    c944:	bf24      	itt	cs
    c946:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
    c94a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
    c94e:	d90d      	bls.n	c96c <__aeabi_d2f+0x30>
    c950:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
    c954:	ea4f 02c0 	mov.w	r2, r0, lsl #3
    c958:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
    c95c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    c960:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
    c964:	bf08      	it	eq
    c966:	f020 0001 	biceq.w	r0, r0, #1
    c96a:	4770      	bx	lr
    c96c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
    c970:	d121      	bne.n	c9b6 <__aeabi_d2f+0x7a>
    c972:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
    c976:	bfbc      	itt	lt
    c978:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
    c97c:	4770      	bxlt	lr
    c97e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    c982:	ea4f 5252 	mov.w	r2, r2, lsr #21
    c986:	f1c2 0218 	rsb	r2, r2, #24
    c98a:	f1c2 0c20 	rsb	ip, r2, #32
    c98e:	fa10 f30c 	lsls.w	r3, r0, ip
    c992:	fa20 f002 	lsr.w	r0, r0, r2
    c996:	bf18      	it	ne
    c998:	f040 0001 	orrne.w	r0, r0, #1
    c99c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
    c9a0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
    c9a4:	fa03 fc0c 	lsl.w	ip, r3, ip
    c9a8:	ea40 000c 	orr.w	r0, r0, ip
    c9ac:	fa23 f302 	lsr.w	r3, r3, r2
    c9b0:	ea4f 0343 	mov.w	r3, r3, lsl #1
    c9b4:	e7cc      	b.n	c950 <__aeabi_d2f+0x14>
    c9b6:	ea7f 5362 	mvns.w	r3, r2, asr #21
    c9ba:	d107      	bne.n	c9cc <__aeabi_d2f+0x90>
    c9bc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
    c9c0:	bf1e      	ittt	ne
    c9c2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
    c9c6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
    c9ca:	4770      	bxne	lr
    c9cc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
    c9d0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
    c9d4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    c9d8:	4770      	bx	lr
    c9da:	bf00      	nop

0000c9dc <set_low_power>:
    }
    return 0;
}


int set_low_power() {
    c9dc:	b508      	push	{r3, lr}
    // Configure the board for low power operation.
    am_bsp_low_power_init();
    c9de:	f001 fd8d 	bl	e4fc <am_bsp_low_power_init>
	uint32_t msg;
    while( ( msg = am_hal_pwrctrl_low_power_init() ) != AM_HAL_STATUS_SUCCESS )
    c9e2:	f002 fafb 	bl	efdc <am_hal_pwrctrl_low_power_init>
    c9e6:	2800      	cmp	r0, #0
    c9e8:	d1fb      	bne.n	c9e2 <set_low_power+0x6>
    
    
#if defined(AM_PART_APOLLO3) || defined(AM_PART_APOLLO3P)

    // For optimal Deep Sleep current, configure cache to be powered-down in deepsleep:
    am_hal_pwrctrl_memory_deepsleep_powerdown(AM_HAL_PWRCTRL_MEM_CACHE);
    c9ea:	2010      	movs	r0, #16
    c9ec:	f002 facc 	bl	ef88 <am_hal_pwrctrl_memory_deepsleep_powerdown>

    // Power down uneeded SRAM, whole FLASH, only 96K SRAM retained
    while( ( msg = am_hal_pwrctrl_memory_deepsleep_powerdown(AM_HAL_PWRCTRL_MEM_FLASH_1M) ) != AM_HAL_STATUS_SUCCESS )
    c9f0:	200f      	movs	r0, #15
    c9f2:	f002 fac9 	bl	ef88 <am_hal_pwrctrl_memory_deepsleep_powerdown>
    c9f6:	2800      	cmp	r0, #0
    c9f8:	d1fa      	bne.n	c9f0 <set_low_power+0x14>
#ifdef PRINTING
        am_util_stdio_printf("Failed to set am_hal_pwrctrl_memory_deepsleep_powerdown for FLASH 1M: %d\n", msg)
#endif
    ;

    while( ( msg = am_hal_pwrctrl_memory_deepsleep_retain(AM_HAL_PWRCTRL_MEM_SRAM_MAX) ) != AM_HAL_STATUS_SUCCESS )
    c9fa:	200d      	movs	r0, #13
    c9fc:	f002 fad8 	bl	efb0 <am_hal_pwrctrl_memory_deepsleep_retain>
    ca00:	2800      	cmp	r0, #0
    ca02:	d1fa      	bne.n	c9fa <set_low_power+0x1e>
#ifdef PRINTING
        am_util_stdio_printf("Failed to set am_hal_pwrctrl_memory_deepsleep_retain for SRAM 96K: %d\n", msg)
#endif
    ;
#endif // AM_PART_APOLLO3
}
    ca04:	bd08      	pop	{r3, pc}
    ca06:	bf00      	nop

0000ca08 <set_buttons_and_leds>:


void set_buttons_and_leds() {
    ca08:	b5f0      	push	{r4, r5, r6, r7, lr}
#if defined(AM_BSP_NUM_BUTTONS)  &&  defined(AM_BSP_NUM_LEDS)
    // Configure the button pin.
    am_hal_gpio_pinconfig(AM_BSP_GPIO_BUTTON0, g_deepsleep_button0);
    ca0a:	4b16      	ldr	r3, [pc, #88]	; (ca64 <set_buttons_and_leds+0x5c>)
    // Configure the LEDs.
    am_devices_led_array_init(am_bsp_psLEDs, AM_BSP_NUM_LEDS);
    // Turn the LEDs off, but initialize LED1 on so user will see something.
    for (int ix = 0; ix < AM_BSP_NUM_LEDS; ix++)
    {
        am_devices_led_off(am_bsp_psLEDs, ix);
    ca0c:	4d16      	ldr	r5, [pc, #88]	; (ca68 <set_buttons_and_leds+0x60>)
    am_hal_gpio_pinconfig(AM_BSP_GPIO_BUTTON0, g_deepsleep_button0);
    ca0e:	6819      	ldr	r1, [r3, #0]
void set_buttons_and_leds() {
    ca10:	b083      	sub	sp, #12
    am_hal_gpio_pinconfig(AM_BSP_GPIO_BUTTON0, g_deepsleep_button0);
    ca12:	2010      	movs	r0, #16
    ca14:	f002 f826 	bl	ea64 <am_hal_gpio_pinconfig>
    am_hal_gpio_pinconfig( GPIO_OUTPUT_PIN, g_AM_HAL_GPIO_OUTPUT);
    ca18:	4b14      	ldr	r3, [pc, #80]	; (ca6c <set_buttons_and_leds+0x64>)
    am_hal_gpio_interrupt_clear(AM_HAL_GPIO_MASKBIT(pGpioIntMask, AM_BSP_GPIO_BUTTON0));
    ca1a:	f44f 3680 	mov.w	r6, #65536	; 0x10000
    ca1e:	2700      	movs	r7, #0
    am_hal_gpio_pinconfig( GPIO_OUTPUT_PIN, g_AM_HAL_GPIO_OUTPUT);
    ca20:	6819      	ldr	r1, [r3, #0]
    ca22:	202d      	movs	r0, #45	; 0x2d
    ca24:	f002 f81e 	bl	ea64 <am_hal_gpio_pinconfig>
    AM_HAL_GPIO_MASKCREATE(GpioIntMask);
    ca28:	2200      	movs	r2, #0
    ca2a:	2300      	movs	r3, #0
    am_hal_gpio_interrupt_clear(AM_HAL_GPIO_MASKBIT(pGpioIntMask, AM_BSP_GPIO_BUTTON0));
    ca2c:	4639      	mov	r1, r7
    ca2e:	4630      	mov	r0, r6
    AM_HAL_GPIO_MASKCREATE(GpioIntMask);
    ca30:	e9cd 2300 	strd	r2, r3, [sp]
    am_hal_gpio_interrupt_clear(AM_HAL_GPIO_MASKBIT(pGpioIntMask, AM_BSP_GPIO_BUTTON0));
    ca34:	e9cd 6700 	strd	r6, r7, [sp]
    ca38:	f002 f9ae 	bl	ed98 <am_hal_gpio_interrupt_clear>
    am_hal_gpio_interrupt_enable(AM_HAL_GPIO_MASKBIT(pGpioIntMask, AM_BSP_GPIO_BUTTON0));
    ca3c:	4639      	mov	r1, r7
    ca3e:	4630      	mov	r0, r6
    ca40:	e9cd 6700 	strd	r6, r7, [sp]
    ca44:	f002 f988 	bl	ed58 <am_hal_gpio_interrupt_enable>
    am_devices_led_array_init(am_bsp_psLEDs, AM_BSP_NUM_LEDS);
    ca48:	2105      	movs	r1, #5
    ca4a:	4628      	mov	r0, r5
    ca4c:	f000 f8d8 	bl	cc00 <am_devices_led_array_init>
    for (int ix = 0; ix < AM_BSP_NUM_LEDS; ix++)
    ca50:	2400      	movs	r4, #0
        am_devices_led_off(am_bsp_psLEDs, ix);
    ca52:	4621      	mov	r1, r4
    ca54:	4628      	mov	r0, r5
    for (int ix = 0; ix < AM_BSP_NUM_LEDS; ix++)
    ca56:	3401      	adds	r4, #1
        am_devices_led_off(am_bsp_psLEDs, ix);
    ca58:	f000 f8fc 	bl	cc54 <am_devices_led_off>
    for (int ix = 0; ix < AM_BSP_NUM_LEDS; ix++)
    ca5c:	2c05      	cmp	r4, #5
    ca5e:	d1f8      	bne.n	ca52 <set_buttons_and_leds+0x4a>
    }
    //am_devices_led_on(am_bsp_psLEDs, 1);

#endif // defined(AM_BSP_NUM_BUTTONS)  &&  defined(AM_BSP_NUM_LEDS)
}
    ca60:	b003      	add	sp, #12
    ca62:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ca64:	0000f358 	.word	0x0000f358
    ca68:	10007518 	.word	0x10007518
    ca6c:	00017364 	.word	0x00017364

0000ca70 <am_gpio_isr>:

// GPIO ISR
void am_gpio_isr(void)
{
    ca70:	b530      	push	{r4, r5, lr}
    //am_devices_led_off(am_bsp_psLEDs, 1);

    // Clear the GPIO Interrupt (write to clear).
    AM_HAL_GPIO_MASKCREATE(GpioIntMask);
    am_hal_gpio_interrupt_clear(AM_HAL_GPIO_MASKBIT(pGpioIntMask, AM_BSP_GPIO_BUTTON0));
    ca72:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    ca76:	2300      	movs	r3, #0
{
    ca78:	b083      	sub	sp, #12
    am_hal_gpio_interrupt_clear(AM_HAL_GPIO_MASKBIT(pGpioIntMask, AM_BSP_GPIO_BUTTON0));
    ca7a:	4619      	mov	r1, r3
    ca7c:	4610      	mov	r0, r2
    AM_HAL_GPIO_MASKCREATE(GpioIntMask);
    ca7e:	2400      	movs	r4, #0
    ca80:	2500      	movs	r5, #0
    ca82:	e9cd 4500 	strd	r4, r5, [sp]
    am_hal_gpio_interrupt_clear(AM_HAL_GPIO_MASKBIT(pGpioIntMask, AM_BSP_GPIO_BUTTON0));
    ca86:	e9cd 2300 	strd	r2, r3, [sp]
    ca8a:	f002 f985 	bl	ed98 <am_hal_gpio_interrupt_clear>
#endif
    
    // set_TurboSpot_Mode();

    // Enable GPIO
    am_hal_gpio_state_write( GPIO_OUTPUT_PIN, AM_HAL_GPIO_OUTPUT_SET);
    ca8e:	2101      	movs	r1, #1
    ca90:	202d      	movs	r0, #45	; 0x2d
    ca92:	f002 f91d 	bl	ecd0 <am_hal_gpio_state_write>
		
    // Run Application
    if ( launch() )
    ca96:	f000 fc4b 	bl	d330 <launch>
    ca9a:	b908      	cbnz	r0, caa0 <am_gpio_isr+0x30>
    am_hal_gpio_state_write( GPIO_OUTPUT_PIN, AM_HAL_GPIO_OUTPUT_CLEAR);
#ifdef PRINTING
    am_util_stdio_printf("Finished the whole cycle of a Biomedical Application\n");
#endif
    //am_devices_led_on(am_bsp_psLEDs, 1);
}
    ca9c:	b003      	add	sp, #12
    ca9e:	bd30      	pop	{r4, r5, pc}
    am_hal_gpio_state_write( GPIO_OUTPUT_PIN, AM_HAL_GPIO_OUTPUT_CLEAR);
    caa0:	2100      	movs	r1, #0
    caa2:	202d      	movs	r0, #45	; 0x2d
}
    caa4:	b003      	add	sp, #12
    caa6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    am_hal_gpio_state_write( GPIO_OUTPUT_PIN, AM_HAL_GPIO_OUTPUT_CLEAR);
    caaa:	f002 b911 	b.w	ecd0 <am_hal_gpio_state_write>
    caae:	bf00      	nop

0000cab0 <main>:
//*****************************************************************************
int
main(void)
{
    // Set the clock frequency.
    am_hal_clkgen_control(AM_HAL_CLKGEN_CONTROL_SYSCLK_MAX, 0);
    cab0:	2100      	movs	r1, #0
{
    cab2:	b508      	push	{r3, lr}
    am_hal_clkgen_control(AM_HAL_CLKGEN_CONTROL_SYSCLK_MAX, 0);
    cab4:	4608      	mov	r0, r1
    cab6:	f001 fee9 	bl	e88c <am_hal_clkgen_control>

    // Set the default cache configuration
    am_hal_cachectrl_config(&am_hal_cachectrl_defaults);
    caba:	4815      	ldr	r0, [pc, #84]	; (cb10 <main+0x60>)
    cabc:	f001 fd3e 	bl	e53c <am_hal_cachectrl_config>
    am_hal_cachectrl_enable();
    cac0:	f001 fd60 	bl	e584 <am_hal_cachectrl_enable>
    // Print the banner.
    am_util_stdio_terminal_clear();
    am_util_stdio_printf("Deepsleep Wake and SPI master receive Example\n");
#endif
    
    set_low_power();
    cac4:	f7ff ff8a 	bl	c9dc <set_low_power>
    
    set_buttons_and_leds();
    cac8:	f7ff ff9e 	bl	ca08 <set_buttons_and_leds>
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    cacc:	4b11      	ldr	r3, [pc, #68]	; (cb14 <main+0x64>)
    cace:	f44f 5200 	mov.w	r2, #8192	; 0x2000
    cad2:	601a      	str	r2, [r3, #0]

    // Enable GPIO interrupts to the NVIC.
    NVIC_EnableIRQ(GPIO_IRQn);

    // Enable interrupts to the core.
    am_hal_interrupt_master_enable();
    cad4:	f002 f97a 	bl	edcc <am_hal_interrupt_master_enable>

	while (1)
    {
        // Go to Deep Sleep.
        am_hal_sysctrl_sleep(AM_HAL_SYSCTRL_SLEEP_DEEP);
    cad8:	2001      	movs	r0, #1
    cada:	f002 fbcf 	bl	f27c <am_hal_sysctrl_sleep>
    am_bsp_low_power_init();
    cade:	f001 fd0d 	bl	e4fc <am_bsp_low_power_init>
    while( ( msg = am_hal_pwrctrl_low_power_init() ) != AM_HAL_STATUS_SUCCESS )
    cae2:	f002 fa7b 	bl	efdc <am_hal_pwrctrl_low_power_init>
    cae6:	2800      	cmp	r0, #0
    cae8:	d1fb      	bne.n	cae2 <main+0x32>
    am_hal_pwrctrl_memory_deepsleep_powerdown(AM_HAL_PWRCTRL_MEM_CACHE);
    caea:	2010      	movs	r0, #16
    caec:	f002 fa4c 	bl	ef88 <am_hal_pwrctrl_memory_deepsleep_powerdown>
    while( ( msg = am_hal_pwrctrl_memory_deepsleep_powerdown(AM_HAL_PWRCTRL_MEM_FLASH_1M) ) != AM_HAL_STATUS_SUCCESS )
    caf0:	200f      	movs	r0, #15
    caf2:	f002 fa49 	bl	ef88 <am_hal_pwrctrl_memory_deepsleep_powerdown>
    caf6:	2800      	cmp	r0, #0
    caf8:	d1fa      	bne.n	caf0 <main+0x40>
    while( ( msg = am_hal_pwrctrl_memory_deepsleep_retain(AM_HAL_PWRCTRL_MEM_SRAM_MAX) ) != AM_HAL_STATUS_SUCCESS )
    cafa:	200d      	movs	r0, #13
    cafc:	f002 fa58 	bl	efb0 <am_hal_pwrctrl_memory_deepsleep_retain>
    cb00:	2800      	cmp	r0, #0
    cb02:	d0e9      	beq.n	cad8 <main+0x28>
    cb04:	200d      	movs	r0, #13
    cb06:	f002 fa53 	bl	efb0 <am_hal_pwrctrl_memory_deepsleep_retain>
    cb0a:	2800      	cmp	r0, #0
    cb0c:	d1f5      	bne.n	cafa <main+0x4a>
    cb0e:	e7e3      	b.n	cad8 <main+0x28>
    cb10:	0001735c 	.word	0x0001735c
    cb14:	e000e100 	.word	0xe000e100

0000cb18 <HardFault_Handler>:
HardFault_Handler(void)
#else // AM_CMSIS_REGS
am_fault_isr(void)
#endif // AM_CMSIS_REGS
{
    __asm("    push    {r0,lr}");       // Always pushes to MSP stack
    cb18:	b501      	push	{r0, lr}
    __asm("    tst     lr, #4");        // Check if we should use MSP or PSP
    cb1a:	f01e 0f04 	tst.w	lr, #4
    __asm("    itet    eq");            // Instrs executed when: eq,ne,eq
    cb1e:	bf0a      	itet	eq
    __asm("    mrseq   r0, msp");       //    bit2=0 indicating MSP stack
    cb20:	f3ef 8008 	mrseq	r0, MSP
    __asm("    mrsne   r0, psp");       // e: bit2=1 indicating PSP stack
    cb24:	f3ef 8009 	mrsne	r0, PSP
    __asm("    addseq  r0, r0, #8");    // t: bit2=0, adjust for pushes to MSP stack
    cb28:	f110 0008 	addseq.w	r0, r0, #8
    __asm("    bl      am_util_faultisr_collect_data");
    cb2c:	f000 f806 	bl	cb3c <am_util_faultisr_collect_data>
    __asm("    pop     {r0,pc}");       // Restore from MSP stack
    cb30:	bd01      	pop	{r0, pc}
    cb32:	bf00      	nop

0000cb34 <getStackedReg>:
}

uint32_t __attribute__((naked))
getStackedReg(uint32_t regnum, uint32_t u32SP)
{
    __asm("    lsls    r0, r0, #2");
    cb34:	0080      	lsls	r0, r0, #2
    __asm("    adds    r0, r1");
    cb36:	1840      	adds	r0, r0, r1
    __asm("    ldr     r0, [r0]");
    cb38:	6800      	ldr	r0, [r0, #0]
    __asm("    bx      lr");
    cb3a:	4770      	bx	lr

0000cb3c <am_util_faultisr_collect_data>:
// HardFault_Handler() was called.
//
//*****************************************************************************
void
am_util_faultisr_collect_data(uint32_t u32IsrSP)
{
    cb3c:	b510      	push	{r4, lr}
    volatile am_fault_t sFaultData;
#if (defined(AM_PART_APOLLO4))
    am_hal_fault_status_t  sHalFaultData = {0};
#else
    am_hal_mcuctrl_fault_t sHalFaultData = {0};
    cb3e:	2300      	movs	r3, #0
{
    cb40:	b092      	sub	sp, #72	; 0x48
    am_hal_mcuctrl_fault_t sHalFaultData = {0};
    cb42:	e9cd 3300 	strd	r3, r3, [sp]
    cb46:	e9cd 3302 	strd	r3, r3, [sp, #8]
    cb4a:	e9cd 3304 	strd	r3, r3, [sp, #16]
    // a breakpoint at the end of the routine.  If the printing is not used,
    // we'll get a compiler warning; so to avoid that warning, we'll use it
    // in a dummy assignment here.
    //
    sFaultData.u32CFSR = u32Mask;       // Avoid compiler warning
    sFaultData.u32CFSR = AM_REGVAL(AM_REG_SYSCTRL_CFSR_O);
    cb4e:	4a2b      	ldr	r2, [pc, #172]	; (cbfc <am_util_faultisr_collect_data+0xc0>)
    sFaultData.u32CFSR = u32Mask;       // Avoid compiler warning
    cb50:	9310      	str	r3, [sp, #64]	; 0x40
    sFaultData.u32CFSR = AM_REGVAL(AM_REG_SYSCTRL_CFSR_O);
    cb52:	6813      	ldr	r3, [r2, #0]
    cb54:	9310      	str	r3, [sp, #64]	; 0x40
    sFaultData.u8MMSR  = (sFaultData.u32CFSR >> 0)  & 0xff;
    cb56:	9b10      	ldr	r3, [sp, #64]	; 0x40
    cb58:	b2db      	uxtb	r3, r3
    cb5a:	f88d 3044 	strb.w	r3, [sp, #68]	; 0x44
    sFaultData.u8BFSR  = (sFaultData.u32CFSR >> 8)  & 0xff;
    cb5e:	9b10      	ldr	r3, [sp, #64]	; 0x40
    cb60:	f3c3 2307 	ubfx	r3, r3, #8, #8
    cb64:	f88d 3045 	strb.w	r3, [sp, #69]	; 0x45
    sFaultData.u16UFSR = (sFaultData.u32CFSR >> 16) & 0xffff;
    cb68:	9b10      	ldr	r3, [sp, #64]	; 0x40
    cb6a:	0c1b      	lsrs	r3, r3, #16
    cb6c:	f8ad 3046 	strh.w	r3, [sp, #70]	; 0x46

    //
    // The address of the location that caused the fault.  e.g. if accessing an
    // invalid data location caused the fault, that address will appear here.
    //
    sFaultData.u32BFAR = AM_REGVAL(AM_REG_SYSCTRL_BFAR_O);
    cb70:	6913      	ldr	r3, [r2, #16]
    cb72:	930f      	str	r3, [sp, #60]	; 0x3c

    //
    // The address of the instruction that caused the fault is the stacked PC
    // if BFSR bit1 is set.
    //
    sFaultData.u32FaultAddr = (sFaultData.u8BFSR & 0x02) ? getStackedReg(6, u32IsrSP) : 0xffffffff;
    cb74:	f89d 3045 	ldrb.w	r3, [sp, #69]	; 0x45
    cb78:	079b      	lsls	r3, r3, #30
{
    cb7a:	4604      	mov	r4, r0
    sFaultData.u32FaultAddr = (sFaultData.u8BFSR & 0x02) ? getStackedReg(6, u32IsrSP) : 0xffffffff;
    cb7c:	d437      	bmi.n	cbee <am_util_faultisr_collect_data+0xb2>
    cb7e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff

    //
    // Get the stacked registers.
    // Note - the address of the instruction that caused the fault is u32PC.
    //
    sFaultData.u32R0  = getStackedReg(0, u32IsrSP);
    cb82:	4621      	mov	r1, r4
    cb84:	2000      	movs	r0, #0
    sFaultData.u32FaultAddr = (sFaultData.u8BFSR & 0x02) ? getStackedReg(6, u32IsrSP) : 0xffffffff;
    cb86:	930e      	str	r3, [sp, #56]	; 0x38
    sFaultData.u32R0  = getStackedReg(0, u32IsrSP);
    cb88:	f7ff ffd4 	bl	cb34 <getStackedReg>
    sFaultData.u32R1  = getStackedReg(1, u32IsrSP);
    cb8c:	4621      	mov	r1, r4
    sFaultData.u32R0  = getStackedReg(0, u32IsrSP);
    cb8e:	4603      	mov	r3, r0
    sFaultData.u32R1  = getStackedReg(1, u32IsrSP);
    cb90:	2001      	movs	r0, #1
    sFaultData.u32R0  = getStackedReg(0, u32IsrSP);
    cb92:	9306      	str	r3, [sp, #24]
    sFaultData.u32R1  = getStackedReg(1, u32IsrSP);
    cb94:	f7ff ffce 	bl	cb34 <getStackedReg>
    sFaultData.u32R2  = getStackedReg(2, u32IsrSP);
    cb98:	4621      	mov	r1, r4
    sFaultData.u32R1  = getStackedReg(1, u32IsrSP);
    cb9a:	4603      	mov	r3, r0
    sFaultData.u32R2  = getStackedReg(2, u32IsrSP);
    cb9c:	2002      	movs	r0, #2
    sFaultData.u32R1  = getStackedReg(1, u32IsrSP);
    cb9e:	9307      	str	r3, [sp, #28]
    sFaultData.u32R2  = getStackedReg(2, u32IsrSP);
    cba0:	f7ff ffc8 	bl	cb34 <getStackedReg>
    sFaultData.u32R3  = getStackedReg(3, u32IsrSP);
    cba4:	4621      	mov	r1, r4
    sFaultData.u32R2  = getStackedReg(2, u32IsrSP);
    cba6:	4603      	mov	r3, r0
    sFaultData.u32R3  = getStackedReg(3, u32IsrSP);
    cba8:	2003      	movs	r0, #3
    sFaultData.u32R2  = getStackedReg(2, u32IsrSP);
    cbaa:	9308      	str	r3, [sp, #32]
    sFaultData.u32R3  = getStackedReg(3, u32IsrSP);
    cbac:	f7ff ffc2 	bl	cb34 <getStackedReg>
    sFaultData.u32R12 = getStackedReg(4, u32IsrSP);
    cbb0:	4621      	mov	r1, r4
    sFaultData.u32R3  = getStackedReg(3, u32IsrSP);
    cbb2:	4603      	mov	r3, r0
    sFaultData.u32R12 = getStackedReg(4, u32IsrSP);
    cbb4:	2004      	movs	r0, #4
    sFaultData.u32R3  = getStackedReg(3, u32IsrSP);
    cbb6:	9309      	str	r3, [sp, #36]	; 0x24
    sFaultData.u32R12 = getStackedReg(4, u32IsrSP);
    cbb8:	f7ff ffbc 	bl	cb34 <getStackedReg>
    sFaultData.u32LR  = getStackedReg(5, u32IsrSP);
    cbbc:	4621      	mov	r1, r4
    sFaultData.u32R12 = getStackedReg(4, u32IsrSP);
    cbbe:	4603      	mov	r3, r0
    sFaultData.u32LR  = getStackedReg(5, u32IsrSP);
    cbc0:	2005      	movs	r0, #5
    sFaultData.u32R12 = getStackedReg(4, u32IsrSP);
    cbc2:	930a      	str	r3, [sp, #40]	; 0x28
    sFaultData.u32LR  = getStackedReg(5, u32IsrSP);
    cbc4:	f7ff ffb6 	bl	cb34 <getStackedReg>
    sFaultData.u32PC  = getStackedReg(6, u32IsrSP);
    cbc8:	4621      	mov	r1, r4
    sFaultData.u32LR  = getStackedReg(5, u32IsrSP);
    cbca:	4603      	mov	r3, r0
    sFaultData.u32PC  = getStackedReg(6, u32IsrSP);
    cbcc:	2006      	movs	r0, #6
    sFaultData.u32LR  = getStackedReg(5, u32IsrSP);
    cbce:	930b      	str	r3, [sp, #44]	; 0x2c
    sFaultData.u32PC  = getStackedReg(6, u32IsrSP);
    cbd0:	f7ff ffb0 	bl	cb34 <getStackedReg>
    sFaultData.u32PSR = getStackedReg(7, u32IsrSP);
    cbd4:	4621      	mov	r1, r4
    sFaultData.u32PC  = getStackedReg(6, u32IsrSP);
    cbd6:	4603      	mov	r3, r0
    sFaultData.u32PSR = getStackedReg(7, u32IsrSP);
    cbd8:	2007      	movs	r0, #7
    sFaultData.u32PC  = getStackedReg(6, u32IsrSP);
    cbda:	930c      	str	r3, [sp, #48]	; 0x30
    sFaultData.u32PSR = getStackedReg(7, u32IsrSP);
    cbdc:	f7ff ffaa 	bl	cb34 <getStackedReg>
    //
#if (defined(AM_PART_APOLLO4))
    am_hal_fault_status_get(&sHalFaultData);
#else
#if AM_APOLLO3_MCUCTRL
    am_hal_mcuctrl_info_get(AM_HAL_MCUCTRL_INFO_FAULT_STATUS, &sHalFaultData);
    cbe0:	4669      	mov	r1, sp
    sFaultData.u32PSR = getStackedReg(7, u32IsrSP);
    cbe2:	4603      	mov	r3, r0
    am_hal_mcuctrl_info_get(AM_HAL_MCUCTRL_INFO_FAULT_STATUS, &sHalFaultData);
    cbe4:	2002      	movs	r0, #2
    sFaultData.u32PSR = getStackedReg(7, u32IsrSP);
    cbe6:	930d      	str	r3, [sp, #52]	; 0x34
    am_hal_mcuctrl_info_get(AM_HAL_MCUCTRL_INFO_FAULT_STATUS, &sHalFaultData);
    cbe8:	f002 f8fc 	bl	ede4 <am_hal_mcuctrl_info_get>
    //
    // Spin in an infinite loop.
    // We need to spin here inside the function so that we have access to
    // local data, i.e. sFaultData.
    //
    while (1)
    cbec:	e7fe      	b.n	cbec <am_util_faultisr_collect_data+0xb0>
    sFaultData.u32FaultAddr = (sFaultData.u8BFSR & 0x02) ? getStackedReg(6, u32IsrSP) : 0xffffffff;
    cbee:	4601      	mov	r1, r0
    cbf0:	2006      	movs	r0, #6
    cbf2:	f7ff ff9f 	bl	cb34 <getStackedReg>
    cbf6:	4603      	mov	r3, r0
    cbf8:	e7c3      	b.n	cb82 <am_util_faultisr_collect_data+0x46>
    cbfa:	bf00      	nop
    cbfc:	e000ed28 	.word	0xe000ed28

0000cc00 <am_devices_led_array_init>:
void
am_devices_led_array_init(am_devices_led_t *psLEDs, uint32_t ui32NumLEDs)
{
    uint32_t i;

    if ( (psLEDs == NULL)                       ||
    cc00:	b318      	cbz	r0, cc4a <am_devices_led_array_init+0x4a>
{
    cc02:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    }

    //
    // Loop through the list of LEDs, configuring each one individually.
    //
    for ( i = 0; i < ui32NumLEDs; i++ )
    cc04:	1e4b      	subs	r3, r1, #1
    cc06:	2b1e      	cmp	r3, #30
    cc08:	d81e      	bhi.n	cc48 <am_devices_led_array_init+0x48>
    cc0a:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
        am_hal_gpio_pinconfig(psLED->ui32GPIONumber, g_AM_HAL_GPIO_TRISTATE);
    cc0e:	4f0f      	ldr	r7, [pc, #60]	; (cc4c <am_devices_led_array_init+0x4c>)
        am_hal_gpio_pinconfig(psLED->ui32GPIONumber, g_AM_HAL_GPIO_OUTPUT);
    cc10:	4e0f      	ldr	r6, [pc, #60]	; (cc50 <am_devices_led_array_init+0x50>)
    cc12:	1d0d      	adds	r5, r1, #4
    cc14:	1d04      	adds	r4, r0, #4
         (psLED->ui32GPIONumber >= AM_HAL_GPIO_MAX_PADS) )
    cc16:	f854 0c04 	ldr.w	r0, [r4, #-4]
    if ( (psLED == NULL)    ||
    cc1a:	2831      	cmp	r0, #49	; 0x31
    cc1c:	d811      	bhi.n	cc42 <am_devices_led_array_init+0x42>
    if ( AM_DEVICES_LED_POL_DIRECT_DRIVE_M & psLED->ui32Polarity )
    cc1e:	6823      	ldr	r3, [r4, #0]
    cc20:	079b      	lsls	r3, r3, #30
        am_hal_gpio_pinconfig(psLED->ui32GPIONumber, g_AM_HAL_GPIO_OUTPUT);
    cc22:	bf4c      	ite	mi
    cc24:	6831      	ldrmi	r1, [r6, #0]
        am_hal_gpio_pinconfig(psLED->ui32GPIONumber, g_AM_HAL_GPIO_TRISTATE);
    cc26:	6839      	ldrpl	r1, [r7, #0]
    cc28:	f001 ff1c 	bl	ea64 <am_hal_gpio_pinconfig>
        am_hal_gpio_state_write(psLED->ui32GPIONumber, AM_HAL_GPIO_OUTPUT_TRISTATE_DISABLE);
    cc2c:	2103      	movs	r1, #3
    cc2e:	f854 0c04 	ldr.w	r0, [r4, #-4]
    cc32:	f002 f84d 	bl	ecd0 <am_hal_gpio_state_write>
        am_hal_gpio_state_write(psLED->ui32GPIONumber,
    cc36:	e954 0101 	ldrd	r0, r1, [r4, #-4]
    cc3a:	f001 0101 	and.w	r1, r1, #1
    cc3e:	f002 f847 	bl	ecd0 <am_hal_gpio_state_write>
    for ( i = 0; i < ui32NumLEDs; i++ )
    cc42:	3408      	adds	r4, #8
    cc44:	42ac      	cmp	r4, r5
    cc46:	d1e6      	bne.n	cc16 <am_devices_led_array_init+0x16>
    {
        am_devices_led_init(psLEDs + i);
    }
}
    cc48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    cc4a:	4770      	bx	lr
    cc4c:	00017368 	.word	0x00017368
    cc50:	00017364 	.word	0x00017364

0000cc54 <am_devices_led_off>:
//
//*****************************************************************************
void
am_devices_led_off(am_devices_led_t *psLEDs, uint32_t ui32LEDNum)
{
    if ( (psLEDs == NULL)                       ||
    cc54:	b180      	cbz	r0, cc78 <am_devices_led_off+0x24>
    cc56:	291e      	cmp	r1, #30
    cc58:	d80e      	bhi.n	cc78 <am_devices_led_off+0x24>
         (ui32LEDNum >= MAX_LEDS)               ||
         (psLEDs[ui32LEDNum].ui32GPIONumber >= AM_HAL_GPIO_MAX_PADS) )
    cc5a:	f850 3031 	ldr.w	r3, [r0, r1, lsl #3]
         (ui32LEDNum >= MAX_LEDS)               ||
    cc5e:	2b31      	cmp	r3, #49	; 0x31
         (psLEDs[ui32LEDNum].ui32GPIONumber >= AM_HAL_GPIO_MAX_PADS) )
    cc60:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
         (ui32LEDNum >= MAX_LEDS)               ||
    cc64:	d808      	bhi.n	cc78 <am_devices_led_off+0x24>
#else
#if (1 == AM_APOLLO3_GPIO)
    //
    // Handle Direct Drive Versus 3-State (with pull-up or no buffer).
    //
    if ( AM_DEVICES_LED_POL_DIRECT_DRIVE_M & psLEDs[ui32LEDNum].ui32Polarity )
    cc66:	6849      	ldr	r1, [r1, #4]
    cc68:	078a      	lsls	r2, r1, #30
    cc6a:	d506      	bpl.n	cc7a <am_devices_led_off+0x26>
    {
        //
        // Set the output to the correct state for the LED.
        //
        am_hal_gpio_state_write(psLEDs[ui32LEDNum].ui32GPIONumber,
    cc6c:	43c9      	mvns	r1, r1
    cc6e:	f001 0101 	and.w	r1, r1, #1
    cc72:	4618      	mov	r0, r3
    cc74:	f002 b82c 	b.w	ecd0 <am_hal_gpio_state_write>
        //
        am_hal_gpio_out_enable_bit_clear(psLEDs[ui32LEDNum].ui32GPIONumber);
    }
#endif // AM_APOLLO3_GPIO
#endif
}
    cc78:	4770      	bx	lr
        am_hal_gpio_state_write(psLEDs[ui32LEDNum].ui32GPIONumber,
    cc7a:	4618      	mov	r0, r3
    cc7c:	2103      	movs	r1, #3
    cc7e:	f002 b827 	b.w	ecd0 <am_hal_gpio_state_write>
    cc82:	bf00      	nop

0000cc84 <pvPortMalloc>:
	pxIterator->pxNextFreeBlock = pxBlockToInsert;									\
}
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
    cc84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    cc86:	4605      	mov	r5, r0
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
static BaseType_t xHeapHasBeenInitialised = pdFALSE;
void *pvReturn = NULL;

	vTaskSuspendAll();
    cc88:	f000 f89e 	bl	cdc8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( xHeapHasBeenInitialised == pdFALSE )
    cc8c:	4925      	ldr	r1, [pc, #148]	; (cd24 <pvPortMalloc+0xa0>)
    cc8e:	680b      	ldr	r3, [r1, #0]
    cc90:	b96b      	cbnz	r3, ccae <pvPortMalloc+0x2a>
{
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;

	/* Ensure the heap starts on a correctly aligned boundary. */
	pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
    cc92:	4a25      	ldr	r2, [pc, #148]	; (cd28 <pvPortMalloc+0xa4>)
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
	xStart.xBlockSize = ( size_t ) 0;

	/* xEnd is used to mark the end of the list of free blocks. */
	xEnd.xBlockSize = configADJUSTED_HEAP_SIZE;
    cc94:	4825      	ldr	r0, [pc, #148]	; (cd2c <pvPortMalloc+0xa8>)
    cc96:	4c26      	ldr	r4, [pc, #152]	; (cd30 <pvPortMalloc+0xac>)
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
    cc98:	4e26      	ldr	r6, [pc, #152]	; (cd34 <pvPortMalloc+0xb0>)
	pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
    cc9a:	f022 0207 	bic.w	r2, r2, #7

	/* To start with there is a single free block that is sized to take up the
	entire heap space. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
	pxFirstFreeBlock->xBlockSize = configADJUSTED_HEAP_SIZE;
	pxFirstFreeBlock->pxNextFreeBlock = &xEnd;
    cc9e:	e9c2 0400 	strd	r0, r4, [r2]
	xEnd.pxNextFreeBlock = NULL;
    cca2:	e9c0 3400 	strd	r3, r4, [r0]
	xStart.xBlockSize = ( size_t ) 0;
    cca6:	6073      	str	r3, [r6, #4]
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
    cca8:	6032      	str	r2, [r6, #0]
			xHeapHasBeenInitialised = pdTRUE;
    ccaa:	2601      	movs	r6, #1
    ccac:	600e      	str	r6, [r1, #0]
		if( xWantedSize > 0 )
    ccae:	2d00      	cmp	r5, #0
    ccb0:	d02f      	beq.n	cd12 <pvPortMalloc+0x8e>
			if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0 )
    ccb2:	076b      	lsls	r3, r5, #29
			xWantedSize += heapSTRUCT_SIZE;
    ccb4:	f105 0408 	add.w	r4, r5, #8
				xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
    ccb8:	bf1c      	itt	ne
    ccba:	f024 0407 	bicne.w	r4, r4, #7
    ccbe:	3408      	addne	r4, #8
		if( ( xWantedSize > 0 ) && ( xWantedSize < configADJUSTED_HEAP_SIZE ) )
    ccc0:	4b1d      	ldr	r3, [pc, #116]	; (cd38 <pvPortMalloc+0xb4>)
    ccc2:	1e62      	subs	r2, r4, #1
    ccc4:	429a      	cmp	r2, r3
    ccc6:	d828      	bhi.n	cd1a <pvPortMalloc+0x96>
			pxBlock = xStart.pxNextFreeBlock;
    ccc8:	481a      	ldr	r0, [pc, #104]	; (cd34 <pvPortMalloc+0xb0>)
    ccca:	6803      	ldr	r3, [r0, #0]
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
    cccc:	e003      	b.n	ccd6 <pvPortMalloc+0x52>
    ccce:	681a      	ldr	r2, [r3, #0]
    ccd0:	b122      	cbz	r2, ccdc <pvPortMalloc+0x58>
    ccd2:	4618      	mov	r0, r3
    ccd4:	4613      	mov	r3, r2
    ccd6:	6859      	ldr	r1, [r3, #4]
    ccd8:	42a1      	cmp	r1, r4
    ccda:	d3f8      	bcc.n	ccce <pvPortMalloc+0x4a>
			if( pxBlock != &xEnd )
    ccdc:	4a13      	ldr	r2, [pc, #76]	; (cd2c <pvPortMalloc+0xa8>)
    ccde:	4293      	cmp	r3, r2
    cce0:	d01b      	beq.n	cd1a <pvPortMalloc+0x96>
				pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + heapSTRUCT_SIZE );
    cce2:	461d      	mov	r5, r3
				if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
    cce4:	1b0e      	subs	r6, r1, r4
				pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
    cce6:	f855 2b08 	ldr.w	r2, [r5], #8
    ccea:	6002      	str	r2, [r0, #0]
				if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
    ccec:	2e10      	cmp	r6, #16
    ccee:	d90c      	bls.n	cd0a <pvPortMalloc+0x86>
					pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
    ccf0:	191f      	adds	r7, r3, r4
					prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
    ccf2:	4a10      	ldr	r2, [pc, #64]	; (cd34 <pvPortMalloc+0xb0>)
					pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
    ccf4:	607e      	str	r6, [r7, #4]
					pxBlock->xBlockSize = xWantedSize;
    ccf6:	605c      	str	r4, [r3, #4]
					prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
    ccf8:	6879      	ldr	r1, [r7, #4]
    ccfa:	4610      	mov	r0, r2
    ccfc:	6812      	ldr	r2, [r2, #0]
    ccfe:	6853      	ldr	r3, [r2, #4]
    cd00:	428b      	cmp	r3, r1
    cd02:	d3fa      	bcc.n	ccfa <pvPortMalloc+0x76>
    cd04:	603a      	str	r2, [r7, #0]
    cd06:	4621      	mov	r1, r4
    cd08:	6007      	str	r7, [r0, #0]
				xFreeBytesRemaining -= pxBlock->xBlockSize;
    cd0a:	4a0c      	ldr	r2, [pc, #48]	; (cd3c <pvPortMalloc+0xb8>)
    cd0c:	6813      	ldr	r3, [r2, #0]
    cd0e:	1a59      	subs	r1, r3, r1
    cd10:	6011      	str	r1, [r2, #0]
	( void ) xTaskResumeAll();
    cd12:	f000 f98f 	bl	d034 <xTaskResumeAll>
}
    cd16:	4628      	mov	r0, r5
    cd18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
void *pvReturn = NULL;
    cd1a:	2500      	movs	r5, #0
	( void ) xTaskResumeAll();
    cd1c:	f000 f98a 	bl	d034 <xTaskResumeAll>
}
    cd20:	4628      	mov	r0, r5
    cd22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    cd24:	10052554 	.word	0x10052554
    cd28:	10007554 	.word	0x10007554
    cd2c:	1005254c 	.word	0x1005254c
    cd30:	0004aff8 	.word	0x0004aff8
    cd34:	10052558 	.word	0x10052558
    cd38:	0004aff6 	.word	0x0004aff6
    cd3c:	10001000 	.word	0x10001000

0000cd40 <vPortFree>:
	if( pv != NULL )
    cd40:	b1c0      	cbz	r0, cd74 <vPortFree+0x34>
{
    cd42:	b538      	push	{r3, r4, r5, lr}
    cd44:	4604      	mov	r4, r0
		vTaskSuspendAll();
    cd46:	f000 f83f 	bl	cdc8 <vTaskSuspendAll>
			prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
    cd4a:	f854 1c04 	ldr.w	r1, [r4, #-4]
    cd4e:	4b0a      	ldr	r3, [pc, #40]	; (cd78 <vPortFree+0x38>)
		puc -= heapSTRUCT_SIZE;
    cd50:	f1a4 0508 	sub.w	r5, r4, #8
			prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
    cd54:	4618      	mov	r0, r3
    cd56:	681b      	ldr	r3, [r3, #0]
    cd58:	685a      	ldr	r2, [r3, #4]
    cd5a:	428a      	cmp	r2, r1
    cd5c:	d3fa      	bcc.n	cd54 <vPortFree+0x14>
			xFreeBytesRemaining += pxLink->xBlockSize;
    cd5e:	4a07      	ldr	r2, [pc, #28]	; (cd7c <vPortFree+0x3c>)
			prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
    cd60:	f844 3c08 	str.w	r3, [r4, #-8]
			xFreeBytesRemaining += pxLink->xBlockSize;
    cd64:	6813      	ldr	r3, [r2, #0]
			prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
    cd66:	6005      	str	r5, [r0, #0]
			xFreeBytesRemaining += pxLink->xBlockSize;
    cd68:	4419      	add	r1, r3
}
    cd6a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			xFreeBytesRemaining += pxLink->xBlockSize;
    cd6e:	6011      	str	r1, [r2, #0]
		( void ) xTaskResumeAll();
    cd70:	f000 b960 	b.w	d034 <xTaskResumeAll>
    cd74:	4770      	bx	lr
    cd76:	bf00      	nop
    cd78:	10052558 	.word	0x10052558
    cd7c:	10001000 	.word	0x10001000

0000cd80 <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
    cd80:	6843      	ldr	r3, [r0, #4]
	pxIndex->pxPrevious = pxNewListItem;

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
    cd82:	6802      	ldr	r2, [r0, #0]
{
    cd84:	b410      	push	{r4}
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
    cd86:	689c      	ldr	r4, [r3, #8]
    cd88:	608c      	str	r4, [r1, #8]
	pxIndex->pxPrevious->pxNext = pxNewListItem;
    cd8a:	689c      	ldr	r4, [r3, #8]
	pxNewListItem->pxNext = pxIndex;
    cd8c:	604b      	str	r3, [r1, #4]
	( pxList->uxNumberOfItems )++;
    cd8e:	3201      	adds	r2, #1
	pxIndex->pxPrevious->pxNext = pxNewListItem;
    cd90:	6061      	str	r1, [r4, #4]
	pxIndex->pxPrevious = pxNewListItem;
    cd92:	6099      	str	r1, [r3, #8]
}
    cd94:	f85d 4b04 	ldr.w	r4, [sp], #4
	pxNewListItem->pxContainer = pxList;
    cd98:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
    cd9a:	6002      	str	r2, [r0, #0]
}
    cd9c:	4770      	bx	lr
    cd9e:	bf00      	nop

0000cda0 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
    cda0:	6903      	ldr	r3, [r0, #16]
{
    cda2:	b410      	push	{r4}

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
    cda4:	e9d0 1201 	ldrd	r1, r2, [r0, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
    cda8:	685c      	ldr	r4, [r3, #4]
	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
    cdaa:	608a      	str	r2, [r1, #8]
	if( pxList->pxIndex == pxItemToRemove )
    cdac:	4284      	cmp	r4, r0
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
    cdae:	6051      	str	r1, [r2, #4]
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
    cdb0:	bf08      	it	eq
    cdb2:	605a      	streq	r2, [r3, #4]
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
	( pxList->uxNumberOfItems )--;
    cdb4:	681a      	ldr	r2, [r3, #0]

	return pxList->uxNumberOfItems;
}
    cdb6:	f85d 4b04 	ldr.w	r4, [sp], #4
	pxItemToRemove->pxContainer = NULL;
    cdba:	2100      	movs	r1, #0
	( pxList->uxNumberOfItems )--;
    cdbc:	3a01      	subs	r2, #1
	pxItemToRemove->pxContainer = NULL;
    cdbe:	6101      	str	r1, [r0, #16]
	( pxList->uxNumberOfItems )--;
    cdc0:	601a      	str	r2, [r3, #0]
	return pxList->uxNumberOfItems;
    cdc2:	6818      	ldr	r0, [r3, #0]
}
    cdc4:	4770      	bx	lr
    cdc6:	bf00      	nop

0000cdc8 <vTaskSuspendAll>:
{
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
    cdc8:	4a02      	ldr	r2, [pc, #8]	; (cdd4 <vTaskSuspendAll+0xc>)
    cdca:	6813      	ldr	r3, [r2, #0]
    cdcc:	3301      	adds	r3, #1
    cdce:	6013      	str	r3, [r2, #0]
}
    cdd0:	4770      	bx	lr
    cdd2:	bf00      	nop
    cdd4:	100525c4 	.word	0x100525c4

0000cdd8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
    cdd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    cddc:	4b42      	ldr	r3, [pc, #264]	; (cee8 <xTaskIncrementTick+0x110>)
    cdde:	681b      	ldr	r3, [r3, #0]
{
    cde0:	b083      	sub	sp, #12
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    cde2:	2b00      	cmp	r3, #0
    cde4:	d149      	bne.n	ce7a <xTaskIncrementTick+0xa2>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
    cde6:	4b41      	ldr	r3, [pc, #260]	; (ceec <xTaskIncrementTick+0x114>)
    cde8:	681d      	ldr	r5, [r3, #0]
    cdea:	3501      	adds	r5, #1

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
    cdec:	601d      	str	r5, [r3, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
    cdee:	2d00      	cmp	r5, #0
    cdf0:	d051      	beq.n	ce96 <xTaskIncrementTick+0xbe>
    cdf2:	f8df a114 	ldr.w	sl, [pc, #276]	; cf08 <xTaskIncrementTick+0x130>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
    cdf6:	f8da 3000 	ldr.w	r3, [sl]
    cdfa:	42ab      	cmp	r3, r5
    cdfc:	d863      	bhi.n	cec6 <xTaskIncrementTick+0xee>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
    cdfe:	4e3c      	ldr	r6, [pc, #240]	; (cef0 <xTaskIncrementTick+0x118>)
    ce00:	6833      	ldr	r3, [r6, #0]
    ce02:	681c      	ldr	r4, [r3, #0]
    ce04:	2c00      	cmp	r4, #0
    ce06:	d060      	beq.n	ceca <xTaskIncrementTick+0xf2>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
    ce08:	4f3a      	ldr	r7, [pc, #232]	; (cef4 <xTaskIncrementTick+0x11c>)
    ce0a:	f8df 9100 	ldr.w	r9, [pc, #256]	; cf0c <xTaskIncrementTick+0x134>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    ce0e:	f8df 8100 	ldr.w	r8, [pc, #256]	; cf10 <xTaskIncrementTick+0x138>
BaseType_t xSwitchRequired = pdFALSE;
    ce12:	2400      	movs	r4, #0
    ce14:	e023      	b.n	ce5e <xTaskIncrementTick+0x86>
    ce16:	9101      	str	r1, [sp, #4]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
    ce18:	f7ff ffc2 	bl	cda0 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
    ce1c:	f8db 3028 	ldr.w	r3, [fp, #40]	; 0x28
    ce20:	9901      	ldr	r1, [sp, #4]
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
    ce22:	f10b 0018 	add.w	r0, fp, #24
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
    ce26:	b113      	cbz	r3, ce2e <xTaskIncrementTick+0x56>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
    ce28:	f7ff ffba 	bl	cda0 <uxListRemove>
    ce2c:	9901      	ldr	r1, [sp, #4]
					prvAddTaskToReadyList( pxTCB );
    ce2e:	f8db 302c 	ldr.w	r3, [fp, #44]	; 0x2c
    ce32:	683a      	ldr	r2, [r7, #0]
    ce34:	eb03 0083 	add.w	r0, r3, r3, lsl #2
    ce38:	4293      	cmp	r3, r2
    ce3a:	eb09 0080 	add.w	r0, r9, r0, lsl #2
    ce3e:	bf88      	it	hi
    ce40:	603b      	strhi	r3, [r7, #0]
    ce42:	f7ff ff9d 	bl	cd80 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    ce46:	f8d8 2000 	ldr.w	r2, [r8]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
    ce4a:	6833      	ldr	r3, [r6, #0]
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    ce4c:	f8db 102c 	ldr.w	r1, [fp, #44]	; 0x2c
    ce50:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
    ce52:	681b      	ldr	r3, [r3, #0]
						{
							xSwitchRequired = pdTRUE;
    ce54:	4291      	cmp	r1, r2
    ce56:	bf28      	it	cs
    ce58:	2401      	movcs	r4, #1
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
    ce5a:	2b00      	cmp	r3, #0
    ce5c:	d035      	beq.n	ceca <xTaskIncrementTick+0xf2>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    ce5e:	6833      	ldr	r3, [r6, #0]
    ce60:	68db      	ldr	r3, [r3, #12]
    ce62:	f8d3 b00c 	ldr.w	fp, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
    ce66:	f8db 3004 	ldr.w	r3, [fp, #4]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
    ce6a:	f10b 0104 	add.w	r1, fp, #4
					if( xConstTickCount < xItemValue )
    ce6e:	429d      	cmp	r5, r3
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
    ce70:	4608      	mov	r0, r1
					if( xConstTickCount < xItemValue )
    ce72:	d2d0      	bcs.n	ce16 <xTaskIncrementTick+0x3e>
						xNextTaskUnblockTime = xItemValue;
    ce74:	f8ca 3000 	str.w	r3, [sl]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
    ce78:	e004      	b.n	ce84 <xTaskIncrementTick+0xac>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
    ce7a:	4a1f      	ldr	r2, [pc, #124]	; (cef8 <xTaskIncrementTick+0x120>)
    ce7c:	6813      	ldr	r3, [r2, #0]
    ce7e:	3301      	adds	r3, #1
    ce80:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
    ce82:	2400      	movs	r4, #0
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
    ce84:	4b1d      	ldr	r3, [pc, #116]	; (cefc <xTaskIncrementTick+0x124>)
    ce86:	681b      	ldr	r3, [r3, #0]
		{
			xSwitchRequired = pdTRUE;
    ce88:	2b00      	cmp	r3, #0
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
}
    ce8a:	bf0c      	ite	eq
    ce8c:	4620      	moveq	r0, r4
    ce8e:	2001      	movne	r0, #1
    ce90:	b003      	add	sp, #12
    ce92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			taskSWITCH_DELAYED_LISTS();
    ce96:	4b16      	ldr	r3, [pc, #88]	; (cef0 <xTaskIncrementTick+0x118>)
    ce98:	681a      	ldr	r2, [r3, #0]
    ce9a:	6812      	ldr	r2, [r2, #0]
    ce9c:	b992      	cbnz	r2, cec4 <xTaskIncrementTick+0xec>
    ce9e:	4a18      	ldr	r2, [pc, #96]	; (cf00 <xTaskIncrementTick+0x128>)
    cea0:	6818      	ldr	r0, [r3, #0]
    cea2:	4918      	ldr	r1, [pc, #96]	; (cf04 <xTaskIncrementTick+0x12c>)
    cea4:	6814      	ldr	r4, [r2, #0]
    cea6:	601c      	str	r4, [r3, #0]
    cea8:	6010      	str	r0, [r2, #0]
    ceaa:	680a      	ldr	r2, [r1, #0]
    ceac:	3201      	adds	r2, #1
    ceae:	600a      	str	r2, [r1, #0]

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
    ceb0:	681a      	ldr	r2, [r3, #0]
    ceb2:	6812      	ldr	r2, [r2, #0]
    ceb4:	b972      	cbnz	r2, ced4 <xTaskIncrementTick+0xfc>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
    ceb6:	f8df a050 	ldr.w	sl, [pc, #80]	; cf08 <xTaskIncrementTick+0x130>
    ceba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    cebe:	f8ca 3000 	str.w	r3, [sl]
    cec2:	e798      	b.n	cdf6 <xTaskIncrementTick+0x1e>
			taskSWITCH_DELAYED_LISTS();
    cec4:	e7fe      	b.n	cec4 <xTaskIncrementTick+0xec>
BaseType_t xSwitchRequired = pdFALSE;
    cec6:	2400      	movs	r4, #0
    cec8:	e7dc      	b.n	ce84 <xTaskIncrementTick+0xac>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    ceca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    cece:	f8ca 3000 	str.w	r3, [sl]
					break;
    ced2:	e7d7      	b.n	ce84 <xTaskIncrementTick+0xac>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    ced4:	681b      	ldr	r3, [r3, #0]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
    ced6:	f8df a030 	ldr.w	sl, [pc, #48]	; cf08 <xTaskIncrementTick+0x130>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    ceda:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
    cedc:	68db      	ldr	r3, [r3, #12]
    cede:	685b      	ldr	r3, [r3, #4]
    cee0:	f8ca 3000 	str.w	r3, [sl]
	}
}
    cee4:	e787      	b.n	cdf6 <xTaskIncrementTick+0x1e>
    cee6:	bf00      	nop
    cee8:	100525c4 	.word	0x100525c4
    ceec:	100525e8 	.word	0x100525e8
    cef0:	10052564 	.word	0x10052564
    cef4:	100525c8 	.word	0x100525c8
    cef8:	100525c0 	.word	0x100525c0
    cefc:	100525ec 	.word	0x100525ec
    cf00:	10052568 	.word	0x10052568
    cf04:	100525d0 	.word	0x100525d0
    cf08:	100525cc 	.word	0x100525cc
    cf0c:	1005256c 	.word	0x1005256c
    cf10:	10052560 	.word	0x10052560

0000cf14 <xTaskResumeAll.part.0>:
BaseType_t xTaskResumeAll( void )
    cf14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    cf18:	b083      	sub	sp, #12
	taskENTER_CRITICAL();
    cf1a:	f000 f8fb 	bl	d114 <vPortEnterCritical>
		--uxSchedulerSuspended;
    cf1e:	4b3a      	ldr	r3, [pc, #232]	; (d008 <xTaskResumeAll.part.0+0xf4>)
    cf20:	681a      	ldr	r2, [r3, #0]
    cf22:	3a01      	subs	r2, #1
    cf24:	601a      	str	r2, [r3, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    cf26:	681b      	ldr	r3, [r3, #0]
    cf28:	2b00      	cmp	r3, #0
    cf2a:	d154      	bne.n	cfd6 <xTaskResumeAll.part.0+0xc2>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
    cf2c:	4b37      	ldr	r3, [pc, #220]	; (d00c <xTaskResumeAll.part.0+0xf8>)
    cf2e:	681b      	ldr	r3, [r3, #0]
    cf30:	2b00      	cmp	r3, #0
    cf32:	d050      	beq.n	cfd6 <xTaskResumeAll.part.0+0xc2>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
    cf34:	4d36      	ldr	r5, [pc, #216]	; (d010 <xTaskResumeAll.part.0+0xfc>)
    cf36:	682b      	ldr	r3, [r5, #0]
    cf38:	2b00      	cmp	r3, #0
    cf3a:	d061      	beq.n	d000 <xTaskResumeAll.part.0+0xec>
    cf3c:	4e35      	ldr	r6, [pc, #212]	; (d014 <xTaskResumeAll.part.0+0x100>)
    cf3e:	f8df 80ec 	ldr.w	r8, [pc, #236]	; d02c <xTaskResumeAll.part.0+0x118>
    cf42:	4f35      	ldr	r7, [pc, #212]	; (d018 <xTaskResumeAll.part.0+0x104>)
    cf44:	f8df 90e8 	ldr.w	r9, [pc, #232]	; d030 <xTaskResumeAll.part.0+0x11c>
						xYieldPending = pdTRUE;
    cf48:	f04f 0a01 	mov.w	sl, #1
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    cf4c:	68eb      	ldr	r3, [r5, #12]
    cf4e:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
    cf50:	f104 0b04 	add.w	fp, r4, #4
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
    cf54:	f104 0018 	add.w	r0, r4, #24
    cf58:	f7ff ff22 	bl	cda0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
    cf5c:	4658      	mov	r0, fp
    cf5e:	f7ff ff1f 	bl	cda0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
    cf62:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    cf64:	6832      	ldr	r2, [r6, #0]
    cf66:	eb03 0083 	add.w	r0, r3, r3, lsl #2
    cf6a:	4293      	cmp	r3, r2
    cf6c:	4659      	mov	r1, fp
    cf6e:	eb08 0080 	add.w	r0, r8, r0, lsl #2
    cf72:	bf88      	it	hi
    cf74:	6033      	strhi	r3, [r6, #0]
    cf76:	f7ff ff03 	bl	cd80 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    cf7a:	683b      	ldr	r3, [r7, #0]
    cf7c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    cf7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    cf80:	429a      	cmp	r2, r3
    cf82:	d330      	bcc.n	cfe6 <xTaskResumeAll.part.0+0xd2>
						xYieldPending = pdTRUE;
    cf84:	f8c9 a000 	str.w	sl, [r9]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
    cf88:	682b      	ldr	r3, [r5, #0]
    cf8a:	2b00      	cmp	r3, #0
    cf8c:	d1de      	bne.n	cf4c <xTaskResumeAll.part.0+0x38>
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
    cf8e:	4b23      	ldr	r3, [pc, #140]	; (d01c <xTaskResumeAll.part.0+0x108>)
    cf90:	681a      	ldr	r2, [r3, #0]
    cf92:	6812      	ldr	r2, [r2, #0]
    cf94:	2a00      	cmp	r2, #0
    cf96:	d02e      	beq.n	cff6 <xTaskResumeAll.part.0+0xe2>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    cf98:	681a      	ldr	r2, [r3, #0]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
    cf9a:	4b21      	ldr	r3, [pc, #132]	; (d020 <xTaskResumeAll.part.0+0x10c>)
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    cf9c:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
    cf9e:	68d2      	ldr	r2, [r2, #12]
    cfa0:	6852      	ldr	r2, [r2, #4]
    cfa2:	601a      	str	r2, [r3, #0]
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
    cfa4:	4e1f      	ldr	r6, [pc, #124]	; (d024 <xTaskResumeAll.part.0+0x110>)
    cfa6:	6834      	ldr	r4, [r6, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
    cfa8:	b144      	cbz	r4, cfbc <xTaskResumeAll.part.0+0xa8>
								xYieldPending = pdTRUE;
    cfaa:	2501      	movs	r5, #1
							if( xTaskIncrementTick() != pdFALSE )
    cfac:	f7ff ff14 	bl	cdd8 <xTaskIncrementTick>
    cfb0:	b108      	cbz	r0, cfb6 <xTaskResumeAll.part.0+0xa2>
								xYieldPending = pdTRUE;
    cfb2:	f8c9 5000 	str.w	r5, [r9]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
    cfb6:	3c01      	subs	r4, #1
    cfb8:	d1f8      	bne.n	cfac <xTaskResumeAll.part.0+0x98>
						uxPendedTicks = 0;
    cfba:	6034      	str	r4, [r6, #0]
				if( xYieldPending != pdFALSE )
    cfbc:	f8d9 3000 	ldr.w	r3, [r9]
    cfc0:	b14b      	cbz	r3, cfd6 <xTaskResumeAll.part.0+0xc2>
					taskYIELD_IF_USING_PREEMPTION();
    cfc2:	4b19      	ldr	r3, [pc, #100]	; (d028 <xTaskResumeAll.part.0+0x114>)
    cfc4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    cfc8:	601a      	str	r2, [r3, #0]
    cfca:	f3bf 8f4f 	dsb	sy
    cfce:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
    cfd2:	2001      	movs	r0, #1
    cfd4:	e000      	b.n	cfd8 <xTaskResumeAll.part.0+0xc4>
BaseType_t xAlreadyYielded = pdFALSE;
    cfd6:	2000      	movs	r0, #0
    cfd8:	9001      	str	r0, [sp, #4]
	taskEXIT_CRITICAL();
    cfda:	f000 f8b5 	bl	d148 <vPortExitCritical>
}
    cfde:	9801      	ldr	r0, [sp, #4]
    cfe0:	b003      	add	sp, #12
    cfe2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
    cfe6:	682b      	ldr	r3, [r5, #0]
    cfe8:	2b00      	cmp	r3, #0
    cfea:	d1af      	bne.n	cf4c <xTaskResumeAll.part.0+0x38>
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
    cfec:	4b0b      	ldr	r3, [pc, #44]	; (d01c <xTaskResumeAll.part.0+0x108>)
    cfee:	681a      	ldr	r2, [r3, #0]
    cff0:	6812      	ldr	r2, [r2, #0]
    cff2:	2a00      	cmp	r2, #0
    cff4:	d1d0      	bne.n	cf98 <xTaskResumeAll.part.0+0x84>
		xNextTaskUnblockTime = portMAX_DELAY;
    cff6:	4b0a      	ldr	r3, [pc, #40]	; (d020 <xTaskResumeAll.part.0+0x10c>)
    cff8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    cffc:	601a      	str	r2, [r3, #0]
    cffe:	e7d1      	b.n	cfa4 <xTaskResumeAll.part.0+0x90>
    d000:	f8df 902c 	ldr.w	r9, [pc, #44]	; d030 <xTaskResumeAll.part.0+0x11c>
    d004:	e7ce      	b.n	cfa4 <xTaskResumeAll.part.0+0x90>
    d006:	bf00      	nop
    d008:	100525c4 	.word	0x100525c4
    d00c:	100525bc 	.word	0x100525bc
    d010:	100525d4 	.word	0x100525d4
    d014:	100525c8 	.word	0x100525c8
    d018:	10052560 	.word	0x10052560
    d01c:	10052564 	.word	0x10052564
    d020:	100525cc 	.word	0x100525cc
    d024:	100525c0 	.word	0x100525c0
    d028:	e000ed04 	.word	0xe000ed04
    d02c:	1005256c 	.word	0x1005256c
    d030:	100525ec 	.word	0x100525ec

0000d034 <xTaskResumeAll>:
	configASSERT( uxSchedulerSuspended );
    d034:	4b02      	ldr	r3, [pc, #8]	; (d040 <xTaskResumeAll+0xc>)
    d036:	681b      	ldr	r3, [r3, #0]
    d038:	b903      	cbnz	r3, d03c <xTaskResumeAll+0x8>
    d03a:	e7fe      	b.n	d03a <xTaskResumeAll+0x6>
    d03c:	f7ff bf6a 	b.w	cf14 <xTaskResumeAll.part.0>
    d040:	100525c4 	.word	0x100525c4

0000d044 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
    d044:	4b22      	ldr	r3, [pc, #136]	; (d0d0 <vTaskSwitchContext+0x8c>)
    d046:	681b      	ldr	r3, [r3, #0]
    d048:	b11b      	cbz	r3, d052 <vTaskSwitchContext+0xe>
		xYieldPending = pdTRUE;
    d04a:	4b22      	ldr	r3, [pc, #136]	; (d0d4 <vTaskSwitchContext+0x90>)
    d04c:	2201      	movs	r2, #1
    d04e:	601a      	str	r2, [r3, #0]
    d050:	4770      	bx	lr
		xYieldPending = pdFALSE;
    d052:	4a20      	ldr	r2, [pc, #128]	; (d0d4 <vTaskSwitchContext+0x90>)
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    d054:	4920      	ldr	r1, [pc, #128]	; (d0d8 <vTaskSwitchContext+0x94>)
{
    d056:	b410      	push	{r4}
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    d058:	4c20      	ldr	r4, [pc, #128]	; (d0dc <vTaskSwitchContext+0x98>)
		xYieldPending = pdFALSE;
    d05a:	6013      	str	r3, [r2, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    d05c:	6822      	ldr	r2, [r4, #0]
    d05e:	eb02 0082 	add.w	r0, r2, r2, lsl #2
    d062:	0080      	lsls	r0, r0, #2
    d064:	0093      	lsls	r3, r2, #2
    d066:	5808      	ldr	r0, [r1, r0]
    d068:	b9f0      	cbnz	r0, d0a8 <vTaskSwitchContext+0x64>
    d06a:	b1d2      	cbz	r2, d0a2 <vTaskSwitchContext+0x5e>
    d06c:	1e53      	subs	r3, r2, #1
    d06e:	eb03 0083 	add.w	r0, r3, r3, lsl #2
    d072:	0080      	lsls	r0, r0, #2
    d074:	5808      	ldr	r0, [r1, r0]
    d076:	b9a8      	cbnz	r0, d0a4 <vTaskSwitchContext+0x60>
    d078:	b19b      	cbz	r3, d0a2 <vTaskSwitchContext+0x5e>
    d07a:	1e93      	subs	r3, r2, #2
    d07c:	eb03 0083 	add.w	r0, r3, r3, lsl #2
    d080:	0080      	lsls	r0, r0, #2
    d082:	5808      	ldr	r0, [r1, r0]
    d084:	b970      	cbnz	r0, d0a4 <vTaskSwitchContext+0x60>
    d086:	b163      	cbz	r3, d0a2 <vTaskSwitchContext+0x5e>
    d088:	1ed3      	subs	r3, r2, #3
    d08a:	eb03 0083 	add.w	r0, r3, r3, lsl #2
    d08e:	0080      	lsls	r0, r0, #2
    d090:	5808      	ldr	r0, [r1, r0]
    d092:	b938      	cbnz	r0, d0a4 <vTaskSwitchContext+0x60>
    d094:	b12b      	cbz	r3, d0a2 <vTaskSwitchContext+0x5e>
    d096:	1f13      	subs	r3, r2, #4
    d098:	eb03 0283 	add.w	r2, r3, r3, lsl #2
    d09c:	0092      	lsls	r2, r2, #2
    d09e:	588a      	ldr	r2, [r1, r2]
    d0a0:	b902      	cbnz	r2, d0a4 <vTaskSwitchContext+0x60>
    d0a2:	e7fe      	b.n	d0a2 <vTaskSwitchContext+0x5e>
    d0a4:	461a      	mov	r2, r3
    d0a6:	009b      	lsls	r3, r3, #2
    d0a8:	4413      	add	r3, r2
    d0aa:	eb01 0083 	add.w	r0, r1, r3, lsl #2
    d0ae:	4603      	mov	r3, r0
    d0b0:	6841      	ldr	r1, [r0, #4]
    d0b2:	6849      	ldr	r1, [r1, #4]
    d0b4:	6041      	str	r1, [r0, #4]
    d0b6:	3308      	adds	r3, #8
    d0b8:	4299      	cmp	r1, r3
    d0ba:	bf08      	it	eq
    d0bc:	6849      	ldreq	r1, [r1, #4]
    d0be:	4b08      	ldr	r3, [pc, #32]	; (d0e0 <vTaskSwitchContext+0x9c>)
    d0c0:	bf08      	it	eq
    d0c2:	6041      	streq	r1, [r0, #4]
    d0c4:	68c9      	ldr	r1, [r1, #12]
    d0c6:	6019      	str	r1, [r3, #0]
    d0c8:	6022      	str	r2, [r4, #0]
}
    d0ca:	f85d 4b04 	ldr.w	r4, [sp], #4
    d0ce:	4770      	bx	lr
    d0d0:	100525c4 	.word	0x100525c4
    d0d4:	100525ec 	.word	0x100525ec
    d0d8:	1005256c 	.word	0x1005256c
    d0dc:	100525c8 	.word	0x100525c8
    d0e0:	10052560 	.word	0x10052560
	...

0000d0f0 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
    d0f0:	4b07      	ldr	r3, [pc, #28]	; (d110 <pxCurrentTCBConst2>)
    d0f2:	6819      	ldr	r1, [r3, #0]
    d0f4:	6808      	ldr	r0, [r1, #0]
    d0f6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d0fa:	f380 8809 	msr	PSP, r0
    d0fe:	f3bf 8f6f 	isb	sy
    d102:	f04f 0000 	mov.w	r0, #0
    d106:	f380 8811 	msr	BASEPRI, r0
    d10a:	4770      	bx	lr
    d10c:	f3af 8000 	nop.w

0000d110 <pxCurrentTCBConst2>:
    d110:	10052560 	.word	0x10052560

0000d114 <vPortEnterCritical>:

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
    d114:	f04f 0380 	mov.w	r3, #128	; 0x80
    d118:	f383 8811 	msr	BASEPRI, r3
    d11c:	f3bf 8f6f 	isb	sy
    d120:	f3bf 8f4f 	dsb	sy
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
    d124:	4a06      	ldr	r2, [pc, #24]	; (d140 <vPortEnterCritical+0x2c>)
    d126:	6813      	ldr	r3, [r2, #0]
    d128:	3301      	adds	r3, #1
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
    d12a:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
    d12c:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
    d12e:	d000      	beq.n	d132 <vPortEnterCritical+0x1e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
	}
}
    d130:	4770      	bx	lr
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
    d132:	4b04      	ldr	r3, [pc, #16]	; (d144 <vPortEnterCritical+0x30>)
    d134:	681b      	ldr	r3, [r3, #0]
    d136:	f013 0fff 	tst.w	r3, #255	; 0xff
    d13a:	d0f9      	beq.n	d130 <vPortEnterCritical+0x1c>
    d13c:	e7fe      	b.n	d13c <vPortEnterCritical+0x28>
    d13e:	bf00      	nop
    d140:	10001004 	.word	0x10001004
    d144:	e000ed04 	.word	0xe000ed04

0000d148 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
	configASSERT( uxCriticalNesting );
    d148:	4a04      	ldr	r2, [pc, #16]	; (d15c <vPortExitCritical+0x14>)
    d14a:	6813      	ldr	r3, [r2, #0]
    d14c:	b12b      	cbz	r3, d15a <vPortExitCritical+0x12>
	uxCriticalNesting--;
    d14e:	3b01      	subs	r3, #1
    d150:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
    d152:	b90b      	cbnz	r3, d158 <vPortExitCritical+0x10>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
    d154:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
    d158:	4770      	bx	lr
	configASSERT( uxCriticalNesting );
    d15a:	e7fe      	b.n	d15a <vPortExitCritical+0x12>
    d15c:	10001004 	.word	0x10001004

0000d160 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
    d160:	f3ef 8009 	mrs	r0, PSP
    d164:	f3bf 8f6f 	isb	sy
    d168:	4b15      	ldr	r3, [pc, #84]	; (d1c0 <pxCurrentTCBConst>)
    d16a:	681a      	ldr	r2, [r3, #0]
    d16c:	f01e 0f10 	tst.w	lr, #16
    d170:	bf08      	it	eq
    d172:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
    d176:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d17a:	6010      	str	r0, [r2, #0]
    d17c:	e92d 0009 	stmdb	sp!, {r0, r3}
    d180:	f04f 0080 	mov.w	r0, #128	; 0x80
    d184:	f380 8811 	msr	BASEPRI, r0
    d188:	f3bf 8f4f 	dsb	sy
    d18c:	f3bf 8f6f 	isb	sy
    d190:	f7ff ff58 	bl	d044 <vTaskSwitchContext>
    d194:	f04f 0000 	mov.w	r0, #0
    d198:	f380 8811 	msr	BASEPRI, r0
    d19c:	bc09      	pop	{r0, r3}
    d19e:	6819      	ldr	r1, [r3, #0]
    d1a0:	6808      	ldr	r0, [r1, #0]
    d1a2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d1a6:	f01e 0f10 	tst.w	lr, #16
    d1aa:	bf08      	it	eq
    d1ac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
    d1b0:	f380 8809 	msr	PSP, r0
    d1b4:	f3bf 8f6f 	isb	sy
    d1b8:	4770      	bx	lr
    d1ba:	bf00      	nop
    d1bc:	f3af 8000 	nop.w

0000d1c0 <pxCurrentTCBConst>:
    d1c0:	10052560 	.word	0x10052560

0000d1c4 <SysTick_Handler>:
	);
}
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
    d1c4:	b508      	push	{r3, lr}
	__asm volatile
    d1c6:	f04f 0380 	mov.w	r3, #128	; 0x80
    d1ca:	f383 8811 	msr	BASEPRI, r3
    d1ce:	f3bf 8f6f 	isb	sy
    d1d2:	f3bf 8f4f 	dsb	sy
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
    d1d6:	f7ff fdff 	bl	cdd8 <xTaskIncrementTick>
    d1da:	b118      	cbz	r0, d1e4 <SysTick_Handler+0x20>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
    d1dc:	4b03      	ldr	r3, [pc, #12]	; (d1ec <SysTick_Handler+0x28>)
    d1de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    d1e2:	601a      	str	r2, [r3, #0]
	__asm volatile
    d1e4:	2300      	movs	r3, #0
    d1e6:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
    d1ea:	bd08      	pop	{r3, pc}
    d1ec:	e000ed04 	.word	0xe000ed04

0000d1f0 <xPortStimerTickHandler>:
//
//
//*****************************************************************************
void
xPortStimerTickHandler(uint32_t delta)
{
    d1f0:	b570      	push	{r4, r5, r6, lr}

    curSTimer = am_hal_stimer_counter_get();
    //
    // Configure the STIMER->COMPARE_0
    //
    am_hal_stimer_compare_delta_set(0, (ulTimerCountsForOneTick-delta));
    d1f2:	4e1c      	ldr	r6, [pc, #112]	; (d264 <xPortStimerTickHandler+0x74>)
{
    d1f4:	4604      	mov	r4, r0
    curSTimer = am_hal_stimer_counter_get();
    d1f6:	f001 ffc3 	bl	f180 <am_hal_stimer_counter_get>
    am_hal_stimer_compare_delta_set(0, (ulTimerCountsForOneTick-delta));
    d1fa:	6831      	ldr	r1, [r6, #0]
    curSTimer = am_hal_stimer_counter_get();
    d1fc:	4605      	mov	r5, r0
    am_hal_stimer_compare_delta_set(0, (ulTimerCountsForOneTick-delta));
    d1fe:	1b09      	subs	r1, r1, r4
    d200:	2000      	movs	r0, #0
    d202:	f001 ffcd 	bl	f1a0 <am_hal_stimer_compare_delta_set>
#ifdef AM_FREERTOS_STIMER_BACKUP
    am_hal_stimer_compare_delta_set(1, (ulTimerCountsForOneTick-delta+1));
    d206:	6831      	ldr	r1, [r6, #0]
    d208:	3101      	adds	r1, #1
    d20a:	1b09      	subs	r1, r1, r4
    d20c:	2001      	movs	r0, #1
    d20e:	f001 ffc7 	bl	f1a0 <am_hal_stimer_compare_delta_set>
#endif

    timerCounts = curSTimer - g_lastSTimerVal;
    d212:	4915      	ldr	r1, [pc, #84]	; (d268 <xPortStimerTickHandler+0x78>)
    numTicksElapsed = timerCounts/ulTimerCountsForOneTick;
    d214:	6832      	ldr	r2, [r6, #0]
    timerCounts = curSTimer - g_lastSTimerVal;
    d216:	680b      	ldr	r3, [r1, #0]
    d218:	1aeb      	subs	r3, r5, r3
    numTicksElapsed = timerCounts/ulTimerCountsForOneTick;
    d21a:	fbb3 f4f2 	udiv	r4, r3, r2
    remainder = timerCounts % ulTimerCountsForOneTick;
    d21e:	fb02 3014 	mls	r0, r2, r4, r3
    g_lastSTimerVal = curSTimer - remainder;
    d222:	1a2d      	subs	r5, r5, r0
    d224:	600d      	str	r5, [r1, #0]
	__asm volatile
    d226:	f3ef 8111 	mrs	r1, BASEPRI
    d22a:	f04f 0080 	mov.w	r0, #128	; 0x80
    d22e:	f380 8811 	msr	BASEPRI, r0
    d232:	f3bf 8f6f 	isb	sy
    d236:	f3bf 8f4f 	dsb	sy
        //
        // Increment RTOS tick
        // Allowing for need to increment the tick more than one... to avoid accumulation of
        // error in case of interrupt latencies
        //
        while (numTicksElapsed--)
    d23a:	429a      	cmp	r2, r3
    d23c:	d80e      	bhi.n	d25c <xPortStimerTickHandler+0x6c>
    d23e:	3c01      	subs	r4, #1
    BaseType_t ctxtSwitchReqd = pdFALSE;
    d240:	2500      	movs	r5, #0
        {
            ctxtSwitchReqd = (( xTaskIncrementTick() != pdFALSE ) ? pdTRUE : ctxtSwitchReqd);
    d242:	f7ff fdc9 	bl	cdd8 <xTaskIncrementTick>
        while (numTicksElapsed--)
    d246:	3c01      	subs	r4, #1
            ctxtSwitchReqd = (( xTaskIncrementTick() != pdFALSE ) ? pdTRUE : ctxtSwitchReqd);
    d248:	2800      	cmp	r0, #0
    d24a:	bf18      	it	ne
    d24c:	2501      	movne	r5, #1
        while (numTicksElapsed--)
    d24e:	1c63      	adds	r3, r4, #1
    d250:	d1f7      	bne.n	d242 <xPortStimerTickHandler+0x52>
        }
        if ( ctxtSwitchReqd != pdFALSE )
    d252:	b11d      	cbz	r5, d25c <xPortStimerTickHandler+0x6c>
            //
            // A context switch is required.  Context switching is
            // performed in the PendSV interrupt. Pend the PendSV
            // interrupt.
            //
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
    d254:	4b05      	ldr	r3, [pc, #20]	; (d26c <xPortStimerTickHandler+0x7c>)
    d256:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    d25a:	601a      	str	r2, [r3, #0]
	__asm volatile
    d25c:	2300      	movs	r3, #0
    d25e:	f383 8811 	msr	BASEPRI, r3
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR(0);
}
    d262:	bd70      	pop	{r4, r5, r6, pc}
    d264:	100525f8 	.word	0x100525f8
    d268:	100525f4 	.word	0x100525f4
    d26c:	e000ed04 	.word	0xe000ed04

0000d270 <am_stimer_cmpr0_isr>:
// Interrupt handler for the STIMER module Compare 0.
//
//*****************************************************************************
void
am_stimer_cmpr0_isr(void)
{
    d270:	b508      	push	{r3, lr}

    //
    // Check the timer interrupt status.
    //
    uint32_t ui32Status = am_hal_stimer_int_status_get(false);
    d272:	2000      	movs	r0, #0
    d274:	f001 fff6 	bl	f264 <am_hal_stimer_int_status_get>
    if (ui32Status & AM_HAL_STIMER_INT_COMPAREA)
    d278:	07c3      	lsls	r3, r0, #31
    d27a:	d400      	bmi.n	d27e <am_stimer_cmpr0_isr+0xe>
        //
        // Run handlers for the various possible timer events.
        //
        xPortStimerTickHandler(0);
    }
}
    d27c:	bd08      	pop	{r3, pc}
        am_hal_stimer_int_clear(AM_HAL_STIMER_INT_COMPAREA);
    d27e:	2001      	movs	r0, #1
    d280:	f001 ffea 	bl	f258 <am_hal_stimer_int_clear>
}
    d284:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        xPortStimerTickHandler(0);
    d288:	2000      	movs	r0, #0
    d28a:	f7ff bfb1 	b.w	d1f0 <xPortStimerTickHandler>
    d28e:	bf00      	nop

0000d290 <am_stimer_cmpr1_isr>:
// Interrupt handler for the STIMER module Compare 0.
//
//*****************************************************************************
void
am_stimer_cmpr1_isr(void)
{
    d290:	b508      	push	{r3, lr}

    //
    // Check the timer interrupt status.
    //
    uint32_t ui32Status = am_hal_stimer_int_status_get(false);
    d292:	2000      	movs	r0, #0
    d294:	f001 ffe6 	bl	f264 <am_hal_stimer_int_status_get>
    if (ui32Status & AM_HAL_STIMER_INT_COMPAREB)
    d298:	0783      	lsls	r3, r0, #30
    d29a:	d400      	bmi.n	d29e <am_stimer_cmpr1_isr+0xe>
        //
        // Run handlers for the various possible timer events.
        //
        xPortStimerTickHandler(1);
    }
}
    d29c:	bd08      	pop	{r3, pc}
        am_hal_stimer_int_clear(AM_HAL_STIMER_INT_COMPAREB);
    d29e:	2002      	movs	r0, #2
    d2a0:	f001 ffda 	bl	f258 <am_hal_stimer_int_clear>
        gNumCmpB++;
    d2a4:	4a04      	ldr	r2, [pc, #16]	; (d2b8 <am_stimer_cmpr1_isr+0x28>)
    d2a6:	6813      	ldr	r3, [r2, #0]
        xPortStimerTickHandler(1);
    d2a8:	2001      	movs	r0, #1
        gNumCmpB++;
    d2aa:	4403      	add	r3, r0
    d2ac:	6013      	str	r3, [r2, #0]
}
    d2ae:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        xPortStimerTickHandler(1);
    d2b2:	f7ff bf9d 	b.w	d1f0 <xPortStimerTickHandler>
    d2b6:	bf00      	nop
    d2b8:	100525f0 	.word	0x100525f0

0000d2bc <NMI_Handler>:
NMI_Handler(void)
{
    //
    // Go into an infinite loop.
    //
    while(1)
    d2bc:	e7fe      	b.n	d2bc <NMI_Handler>
    d2be:	bf00      	nop

0000d2c0 <BusFault_Handler>:
HardFault_Handler(void)
{
    //
    // Go into an infinite loop.
    //
    while(1)
    d2c0:	e7fe      	b.n	d2c0 <BusFault_Handler>
    d2c2:	bf00      	nop

0000d2c4 <DebugMon_Handler>:
am_default_isr(void)
{
    //
    // Go into an infinite loop.
    //
    while(1)
    d2c4:	e7fe      	b.n	d2c4 <DebugMon_Handler>
    d2c6:	bf00      	nop

0000d2c8 <Reset_Handler>:
    __asm("    ldr    r0, =0xE000ED08\n"
    d2c8:	4811      	ldr	r0, [pc, #68]	; (d310 <zero_loop+0x12>)
    d2ca:	4912      	ldr	r1, [pc, #72]	; (d314 <zero_loop+0x16>)
    d2cc:	6001      	str	r1, [r0, #0]
    __asm("    ldr    sp, [r1]");
    d2ce:	f8d1 d000 	ldr.w	sp, [r1]
    __asm("ldr  r0, =0xE000ED88\n"
    d2d2:	4811      	ldr	r0, [pc, #68]	; (d318 <zero_loop+0x1a>)
    d2d4:	6801      	ldr	r1, [r0, #0]
    d2d6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    d2da:	6001      	str	r1, [r0, #0]
    d2dc:	f3bf 8f4f 	dsb	sy
    d2e0:	f3bf 8f6f 	isb	sy
    __asm("    ldr     r0, =_init_data\n"
    d2e4:	480d      	ldr	r0, [pc, #52]	; (d31c <zero_loop+0x1e>)
    d2e6:	490e      	ldr	r1, [pc, #56]	; (d320 <zero_loop+0x22>)
    d2e8:	4a0e      	ldr	r2, [pc, #56]	; (d324 <zero_loop+0x26>)

0000d2ea <copy_loop>:
    d2ea:	f850 3b04 	ldr.w	r3, [r0], #4
    d2ee:	f841 3b04 	str.w	r3, [r1], #4
    d2f2:	4291      	cmp	r1, r2
    d2f4:	dbf9      	blt.n	d2ea <copy_loop>
    __asm("    ldr     r0, =_sbss\n"
    d2f6:	480c      	ldr	r0, [pc, #48]	; (d328 <zero_loop+0x2a>)
    d2f8:	490c      	ldr	r1, [pc, #48]	; (d32c <zero_loop+0x2e>)
    d2fa:	f04f 0200 	mov.w	r2, #0

0000d2fe <zero_loop>:
    d2fe:	4288      	cmp	r0, r1
    d300:	bfb8      	it	lt
    d302:	f840 2b04 	strlt.w	r2, [r0], #4
    d306:	dbfa      	blt.n	d2fe <zero_loop>
    main();
    d308:	f7ff fbd2 	bl	cab0 <main>
    __asm("    bkpt     ");
    d30c:	be00      	bkpt	0x0000
}
    d30e:	0000      	.short	0x0000
    d310:	e000ed08 	.word	0xe000ed08
    d314:	0000c000 	.word	0x0000c000
    d318:	e000ed88 	.word	0xe000ed88
    d31c:	000177b4 	.word	0x000177b4
    d320:	10001000 	.word	0x10001000
    d324:	1000754c 	.word	0x1000754c
    d328:	1000754c 	.word	0x1000754c
    d32c:	10052620 	.word	0x10052620

0000d330 <launch>:
// Load parameters
#include "parameters.h"
#include "launch.h"

// Conv Block structure: Conv1D -> Batch Normalization -> ReLU -> Max pool
int launch()   {
    d330:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d334:	ed2d 8b02 	vpush	{d8}
    d338:	b0b7      	sub	sp, #220	; 0xdc
    else
        bias_size = conv_output_size;

    // Batch normalization parameters
    batch_norm_params_t bn_params;
    bn_init_pretrained(&bn_params, output_depth, input_len, gamma_, beta_, mean_, var_, 1e-5); 
    d33a:	4ad2      	ldr	r2, [pc, #840]	; (d684 <launch+0x354>)
    d33c:	49d2      	ldr	r1, [pc, #840]	; (d688 <launch+0x358>)
    d33e:	4bd3      	ldr	r3, [pc, #844]	; (d68c <launch+0x35c>)
    my_type *y_relu_seiz2;
    my_type *y_relu_nonseiz1;
    my_type *y_relu_nonseiz2;

    // Initialize Adam parameters
    Adam_optimizer_init(&Adam_filter, beta1, beta2, alpha, epsilon, filter_size);
    d340:	eddf 1ad3 	vldr	s3, [pc, #844]	; d690 <launch+0x360>
    d344:	ed9f 1ad3 	vldr	s2, [pc, #844]	; d694 <launch+0x364>
    d348:	eddf 0ad3 	vldr	s1, [pc, #844]	; d698 <launch+0x368>
    bn_init_pretrained(&bn_params, output_depth, input_len, gamma_, beta_, mean_, var_, 1e-5); 
    d34c:	9202      	str	r2, [sp, #8]
    d34e:	af2c      	add	r7, sp, #176	; 0xb0
    d350:	2240      	movs	r2, #64	; 0x40
    d352:	ed9f 0ad2 	vldr	s0, [pc, #840]	; d69c <launch+0x36c>
    Adam_optimizer_init(&Adam_filter, beta1, beta2, alpha, epsilon, filter_size);
    d356:	edcd 1a18 	vstr	s3, [sp, #96]	; 0x60
    bn_init_pretrained(&bn_params, output_depth, input_len, gamma_, beta_, mean_, var_, 1e-5); 
    d35a:	e9cd 3100 	strd	r3, r1, [sp]
    d35e:	4638      	mov	r0, r7
    d360:	4611      	mov	r1, r2
    d362:	4bcf      	ldr	r3, [pc, #828]	; (d6a0 <launch+0x370>)
    Adam_optimizer_init(&Adam_filter, beta1, beta2, alpha, epsilon, filter_size);
    d364:	ed8d 1a17 	vstr	s2, [sp, #92]	; 0x5c
    d368:	edcd 0a16 	vstr	s1, [sp, #88]	; 0x58
    bn_init_pretrained(&bn_params, output_depth, input_len, gamma_, beta_, mean_, var_, 1e-5); 
    d36c:	f000 fafa 	bl	d964 <bn_init_pretrained>
    my_type *y_seiz1 = (my_type *) pvPortMalloc(output_size  * sizeof(my_type));
    d370:	f44f 5080 	mov.w	r0, #4096	; 0x1000
    d374:	f7ff fc86 	bl	cc84 <pvPortMalloc>
    d378:	4606      	mov	r6, r0
    my_type *y_seiz2 = (my_type *) pvPortMalloc(output_size * sizeof(my_type));
    d37a:	f44f 5080 	mov.w	r0, #4096	; 0x1000
    d37e:	f7ff fc81 	bl	cc84 <pvPortMalloc>
    d382:	4603      	mov	r3, r0
    my_type *y_nonseiz1 = (my_type *) pvPortMalloc(output_size * sizeof(my_type));
    d384:	f44f 5080 	mov.w	r0, #4096	; 0x1000
    my_type *y_seiz2 = (my_type *) pvPortMalloc(output_size * sizeof(my_type));
    d388:	9312      	str	r3, [sp, #72]	; 0x48
    my_type *y_nonseiz1 = (my_type *) pvPortMalloc(output_size * sizeof(my_type));
    d38a:	f7ff fc7b 	bl	cc84 <pvPortMalloc>
    d38e:	4603      	mov	r3, r0
    my_type *y_nonseiz2 = (my_type *) pvPortMalloc(output_size * sizeof(my_type));
    d390:	f44f 5080 	mov.w	r0, #4096	; 0x1000
    my_type *y_nonseiz1 = (my_type *) pvPortMalloc(output_size * sizeof(my_type));
    d394:	9313      	str	r3, [sp, #76]	; 0x4c
    my_type *y_nonseiz2 = (my_type *) pvPortMalloc(output_size * sizeof(my_type));
    d396:	f7ff fc75 	bl	cc84 <pvPortMalloc>
    d39a:	4603      	mov	r3, r0
    my_type *dLdw = (my_type *) pvPortMalloc(filter_size * sizeof(my_type));
    d39c:	f44f 40c0 	mov.w	r0, #24576	; 0x6000
    my_type *y_nonseiz2 = (my_type *) pvPortMalloc(output_size * sizeof(my_type));
    d3a0:	9314      	str	r3, [sp, #80]	; 0x50
    my_type *dLdw = (my_type *) pvPortMalloc(filter_size * sizeof(my_type));
    d3a2:	f7ff fc6f 	bl	cc84 <pvPortMalloc>
    d3a6:	4603      	mov	r3, r0
    my_type *dLdb = (my_type *) pvPortMalloc(bias_size * sizeof(my_type));
    d3a8:	f44f 7080 	mov.w	r0, #256	; 0x100
    my_type *dLdw = (my_type *) pvPortMalloc(filter_size * sizeof(my_type));
    d3ac:	9315      	str	r3, [sp, #84]	; 0x54
    my_type *dLdb = (my_type *) pvPortMalloc(bias_size * sizeof(my_type));
    d3ae:	f7ff fc69 	bl	cc84 <pvPortMalloc>
    Adam_optimizer_init(&Adam_filter, beta1, beta2, alpha, epsilon, filter_size);
    d3b2:	ed9f 8abc 	vldr	s16, [pc, #752]	; d6a4 <launch+0x374>
    d3b6:	eddd 1a18 	vldr	s3, [sp, #96]	; 0x60
    d3ba:	ed9d 1a17 	vldr	s2, [sp, #92]	; 0x5c
    d3be:	eddd 0a16 	vldr	s1, [sp, #88]	; 0x58
    d3c2:	edcd 1a19 	vstr	s3, [sp, #100]	; 0x64
    my_type *dLdb = (my_type *) pvPortMalloc(bias_size * sizeof(my_type));
    d3c6:	4603      	mov	r3, r0
    Adam_optimizer_init(&Adam_filter, beta1, beta2, alpha, epsilon, filter_size);
    d3c8:	eeb0 0a48 	vmov.f32	s0, s16
    d3cc:	a81a      	add	r0, sp, #104	; 0x68
    d3ce:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
    my_type *dLdb = (my_type *) pvPortMalloc(bias_size * sizeof(my_type));
    d3d2:	9316      	str	r3, [sp, #88]	; 0x58
    Adam_optimizer_init(&Adam_filter, beta1, beta2, alpha, epsilon, filter_size);
    d3d4:	ed8d 1a18 	vstr	s2, [sp, #96]	; 0x60
    d3d8:	edcd 0a17 	vstr	s1, [sp, #92]	; 0x5c
    d3dc:	f000 f9c0 	bl	d760 <Adam_optimizer_init>
    Adam_optimizer_init(&Adam_bias, beta1, beta2, alpha, epsilon, bias_size);
    d3e0:	eddd 1a19 	vldr	s3, [sp, #100]	; 0x64
    d3e4:	ed9d 1a18 	vldr	s2, [sp, #96]	; 0x60
    d3e8:	eddd 0a17 	vldr	s1, [sp, #92]	; 0x5c
    d3ec:	eeb0 0a48 	vmov.f32	s0, s16
    d3f0:	2140      	movs	r1, #64	; 0x40
    d3f2:	a823      	add	r0, sp, #140	; 0x8c
    d3f4:	f000 f9b4 	bl	d760 <Adam_optimizer_init>

    int epochs_counter = 0;

    while (1)   {

        y_relu_seiz1 = (my_type *) pvPortMalloc(conv_output_size * sizeof(my_type));
    d3f8:	f44f 4080 	mov.w	r0, #16384	; 0x4000
    d3fc:	f7ff fc42 	bl	cc84 <pvPortMalloc>
    d400:	4683      	mov	fp, r0
        y_relu_seiz2 = (my_type *) pvPortMalloc(conv_output_size * sizeof(my_type));
    d402:	f44f 4080 	mov.w	r0, #16384	; 0x4000
    d406:	f7ff fc3d 	bl	cc84 <pvPortMalloc>
    d40a:	4682      	mov	sl, r0
        y_relu_nonseiz1 = (my_type *) pvPortMalloc(conv_output_size * sizeof(my_type));
    d40c:	f44f 4080 	mov.w	r0, #16384	; 0x4000
    d410:	f7ff fc38 	bl	cc84 <pvPortMalloc>
    d414:	4681      	mov	r9, r0
        y_relu_nonseiz2 = (my_type *) pvPortMalloc(conv_output_size * sizeof(my_type));
    d416:	f44f 4080 	mov.w	r0, #16384	; 0x4000
    d41a:	f7ff fc33 	bl	cc84 <pvPortMalloc>
    d41e:	4680      	mov	r8, r0
        #endif

        // --- FORWARD PROPAGATION ---

        // Seizure 1
        conv1D(x_set[0], filters_, bias_, y_relu_seiz1,
    d420:	48a1      	ldr	r0, [pc, #644]	; (d6a8 <launch+0x378>)
    d422:	4aa2      	ldr	r2, [pc, #648]	; (d6ac <launch+0x37c>)
    d424:	6800      	ldr	r0, [r0, #0]
    d426:	49a2      	ldr	r1, [pc, #648]	; (d6b0 <launch+0x380>)
    d428:	2540      	movs	r5, #64	; 0x40
    my_type *y_seiz1 = (my_type *) pvPortMalloc(output_size  * sizeof(my_type));
    d42a:	ee08 6a90 	vmov	s17, r6
        conv1D(x_set[0], filters_, bias_, y_relu_seiz1,
    d42e:	2603      	movs	r6, #3
    d430:	2401      	movs	r4, #1
    d432:	e9cd 5602 	strd	r5, r6, [sp, #8]
    d436:	2620      	movs	r6, #32
    d438:	465b      	mov	r3, fp
    d43a:	e9cd 4405 	strd	r4, r4, [sp, #20]
    d43e:	9404      	str	r4, [sp, #16]
    d440:	9500      	str	r5, [sp, #0]
    d442:	9601      	str	r6, [sp, #4]
    d444:	f000 fb00 	bl	da48 <conv1D>
                input_len, input_depth, no_filters_, filter_len, stride, padding, bias_sharing);
        bn_inference_forward(&bn_params, y_relu_seiz1, y_relu_seiz1);
    d448:	465a      	mov	r2, fp
    d44a:	4659      	mov	r1, fp
    d44c:	4638      	mov	r0, r7
    d44e:	f000 fa99 	bl	d984 <bn_inference_forward>
        relu(y_relu_seiz1, y_relu_seiz1, conv_output_size);
        max_pool1D(y_relu_seiz1, y_seiz1, pool_size, conv_output_size, output_size);
    d452:	f44f 6680 	mov.w	r6, #1024	; 0x400
        relu(y_relu_seiz1, y_relu_seiz1, conv_output_size);
    d456:	4659      	mov	r1, fp
    d458:	4658      	mov	r0, fp
    d45a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    d45e:	f000 fb6d 	bl	db3c <relu>
        max_pool1D(y_relu_seiz1, y_seiz1, pool_size, conv_output_size, output_size);
    d462:	ee18 1a90 	vmov	r1, s17
    d466:	4658      	mov	r0, fp
    d468:	9600      	str	r6, [sp, #0]
    d46a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    d46e:	2204      	movs	r2, #4

        // Seizure 2
        conv1D(x_set[1], filters_, bias_, y_relu_seiz2,
    d470:	2603      	movs	r6, #3
        max_pool1D(y_relu_seiz1, y_seiz1, pool_size, conv_output_size, output_size);
    d472:	f000 fb77 	bl	db64 <max_pool1D>
        conv1D(x_set[1], filters_, bias_, y_relu_seiz2,
    d476:	e9cd 5602 	strd	r5, r6, [sp, #8]
    d47a:	2620      	movs	r6, #32
    d47c:	e9cd 5600 	strd	r5, r6, [sp]
    d480:	e9cd 4405 	strd	r4, r4, [sp, #20]
    d484:	4888      	ldr	r0, [pc, #544]	; (d6a8 <launch+0x378>)
    d486:	9404      	str	r4, [sp, #16]
    d488:	4653      	mov	r3, sl
    d48a:	4a88      	ldr	r2, [pc, #544]	; (d6ac <launch+0x37c>)
    d48c:	4988      	ldr	r1, [pc, #544]	; (d6b0 <launch+0x380>)
    d48e:	6840      	ldr	r0, [r0, #4]
    d490:	f000 fada 	bl	da48 <conv1D>
                input_len, input_depth, no_filters_, filter_len, stride, padding, bias_sharing);
        bn_inference_forward(&bn_params, y_relu_seiz2, y_relu_seiz2);
    d494:	4652      	mov	r2, sl
    d496:	4651      	mov	r1, sl
    d498:	4638      	mov	r0, r7
    d49a:	f000 fa73 	bl	d984 <bn_inference_forward>
        relu(y_relu_seiz2, y_relu_seiz2, conv_output_size);
        max_pool1D(y_relu_seiz2, y_seiz2, pool_size, conv_output_size, output_size);
    d49e:	f44f 6680 	mov.w	r6, #1024	; 0x400
        relu(y_relu_seiz2, y_relu_seiz2, conv_output_size);
    d4a2:	4651      	mov	r1, sl
    d4a4:	4650      	mov	r0, sl
    d4a6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    d4aa:	f000 fb47 	bl	db3c <relu>
        max_pool1D(y_relu_seiz2, y_seiz2, pool_size, conv_output_size, output_size);
    d4ae:	9912      	ldr	r1, [sp, #72]	; 0x48
    d4b0:	9600      	str	r6, [sp, #0]
    d4b2:	4650      	mov	r0, sl
    d4b4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    d4b8:	2204      	movs	r2, #4

        // Non-seizure 1
        conv1D(x_set[2], filters_, bias_, y_relu_nonseiz1,
    d4ba:	2603      	movs	r6, #3
        max_pool1D(y_relu_seiz2, y_seiz2, pool_size, conv_output_size, output_size);
    d4bc:	f000 fb52 	bl	db64 <max_pool1D>
        conv1D(x_set[2], filters_, bias_, y_relu_nonseiz1,
    d4c0:	e9cd 5602 	strd	r5, r6, [sp, #8]
    d4c4:	2620      	movs	r6, #32
    d4c6:	e9cd 5600 	strd	r5, r6, [sp]
    d4ca:	e9cd 4405 	strd	r4, r4, [sp, #20]
    d4ce:	4876      	ldr	r0, [pc, #472]	; (d6a8 <launch+0x378>)
    d4d0:	9404      	str	r4, [sp, #16]
    d4d2:	464b      	mov	r3, r9
    d4d4:	4a75      	ldr	r2, [pc, #468]	; (d6ac <launch+0x37c>)
    d4d6:	4976      	ldr	r1, [pc, #472]	; (d6b0 <launch+0x380>)
    d4d8:	6880      	ldr	r0, [r0, #8]
    d4da:	f000 fab5 	bl	da48 <conv1D>
                input_len, input_depth, no_filters_, filter_len, stride, padding, bias_sharing);
        bn_inference_forward(&bn_params, y_relu_nonseiz1, y_relu_nonseiz1);
    d4de:	464a      	mov	r2, r9
    d4e0:	4649      	mov	r1, r9
    d4e2:	4638      	mov	r0, r7
    d4e4:	f000 fa4e 	bl	d984 <bn_inference_forward>
        relu(y_relu_nonseiz1, y_relu_nonseiz1, conv_output_size);
        max_pool1D(y_relu_nonseiz1, y_nonseiz1, pool_size, conv_output_size, output_size);
    d4e8:	f44f 6680 	mov.w	r6, #1024	; 0x400
        relu(y_relu_nonseiz1, y_relu_nonseiz1, conv_output_size);
    d4ec:	4649      	mov	r1, r9
    d4ee:	4648      	mov	r0, r9
    d4f0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    d4f4:	f000 fb22 	bl	db3c <relu>
        max_pool1D(y_relu_nonseiz1, y_nonseiz1, pool_size, conv_output_size, output_size);
    d4f8:	9913      	ldr	r1, [sp, #76]	; 0x4c
    d4fa:	9600      	str	r6, [sp, #0]
    d4fc:	4648      	mov	r0, r9
    d4fe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    d502:	2204      	movs	r2, #4

        // Non-seizure 2
        conv1D(x_set[3], filters_, bias_, y_relu_nonseiz2,
    d504:	2603      	movs	r6, #3
        max_pool1D(y_relu_nonseiz1, y_nonseiz1, pool_size, conv_output_size, output_size);
    d506:	f000 fb2d 	bl	db64 <max_pool1D>
        conv1D(x_set[3], filters_, bias_, y_relu_nonseiz2,
    d50a:	e9cd 5602 	strd	r5, r6, [sp, #8]
    d50e:	2620      	movs	r6, #32
    d510:	e9cd 5600 	strd	r5, r6, [sp]
    d514:	e9cd 4405 	strd	r4, r4, [sp, #20]
    d518:	4863      	ldr	r0, [pc, #396]	; (d6a8 <launch+0x378>)
    d51a:	9404      	str	r4, [sp, #16]
    d51c:	4643      	mov	r3, r8
    d51e:	4a63      	ldr	r2, [pc, #396]	; (d6ac <launch+0x37c>)
    d520:	4963      	ldr	r1, [pc, #396]	; (d6b0 <launch+0x380>)
    d522:	68c0      	ldr	r0, [r0, #12]
    d524:	f000 fa90 	bl	da48 <conv1D>
                input_len, input_depth, no_filters_, filter_len, stride, padding, bias_sharing);
        bn_inference_forward(&bn_params, y_relu_nonseiz2, y_relu_nonseiz2);
    d528:	4642      	mov	r2, r8
    d52a:	4641      	mov	r1, r8
    d52c:	4638      	mov	r0, r7
    d52e:	f000 fa29 	bl	d984 <bn_inference_forward>
        relu(y_relu_nonseiz2, y_relu_nonseiz2, conv_output_size);
        max_pool1D(y_relu_nonseiz2, y_nonseiz2, pool_size, conv_output_size, output_size);
    d532:	f44f 6680 	mov.w	r6, #1024	; 0x400
        relu(y_relu_nonseiz2, y_relu_nonseiz2, conv_output_size);
    d536:	4641      	mov	r1, r8
    d538:	4640      	mov	r0, r8
    d53a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    d53e:	f000 fafd 	bl	db3c <relu>
        max_pool1D(y_relu_nonseiz2, y_nonseiz2, pool_size, conv_output_size, output_size);
    d542:	9914      	ldr	r1, [sp, #80]	; 0x50
    d544:	9600      	str	r6, [sp, #0]
    d546:	4640      	mov	r0, r8
    d548:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    d54c:	2204      	movs	r2, #4
    d54e:	f000 fb09 	bl	db64 <max_pool1D>


        // --- CALCULATE DERIVATIVES ---

        // Update distances - important for correct calculation of derivatives and Loss function
        update_loss_QOID_Norm1(y_seiz1, y_seiz2, y_nonseiz1, y_nonseiz2, output_size);
    d552:	9600      	str	r6, [sp, #0]
    d554:	9e12      	ldr	r6, [sp, #72]	; 0x48
    d556:	e9dd 2313 	ldrd	r2, r3, [sp, #76]	; 0x4c
    d55a:	ee18 0a90 	vmov	r0, s17
    d55e:	4631      	mov	r1, r6
    d560:	f000 fcea 	bl	df38 <update_loss_QOID_Norm1>
        #ifdef PRINT_INFO
        my_type Loss = loss_QOID_Norm1();
        am_util_stdio_printf("Loss: %f\n", Loss);
        #endif

        memset(dLdw,'\0', filter_size * sizeof(my_type));
    d564:	9815      	ldr	r0, [sp, #84]	; 0x54
    d566:	f44f 42c0 	mov.w	r2, #24576	; 0x6000
    d56a:	2100      	movs	r1, #0
    d56c:	f7fe fdc8 	bl	c100 <memset>
        memset(dLdb,'\0', bias_size   * sizeof(my_type));
    d570:	9816      	ldr	r0, [sp, #88]	; 0x58
    d572:	f44f 7280 	mov.w	r2, #256	; 0x100
    d576:	2100      	movs	r1, #0
    d578:	f7fe fdc2 	bl	c100 <memset>

        // Seizure 1 - dLdw, dLdb
        dLdw_dLdb_conv1D_block_QOID_Norm1(x_set[0], y_relu_seiz1, y_seiz1, y_seiz1, y_seiz2, y_nonseiz1, y_nonseiz2,
    d57c:	9600      	str	r6, [sp, #0]
    d57e:	9612      	str	r6, [sp, #72]	; 0x48
    d580:	2603      	movs	r6, #3
    d582:	e9cd 5607 	strd	r5, r6, [sp, #28]
    d586:	2620      	movs	r6, #32
    d588:	e9cd 450b 	strd	r4, r5, [sp, #44]	; 0x2c
    d58c:	e9cd 5605 	strd	r5, r6, [sp, #20]
    d590:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
    d594:	9b16      	ldr	r3, [sp, #88]	; 0x58
    d596:	9a15      	ldr	r2, [sp, #84]	; 0x54
    d598:	9914      	ldr	r1, [sp, #80]	; 0x50
    d59a:	9304      	str	r3, [sp, #16]
    d59c:	4842      	ldr	r0, [pc, #264]	; (d6a8 <launch+0x378>)
    d59e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    d5a0:	9203      	str	r2, [sp, #12]
    d5a2:	f04f 0c00 	mov.w	ip, #0
    d5a6:	9102      	str	r1, [sp, #8]
    d5a8:	9301      	str	r3, [sp, #4]
    d5aa:	2610      	movs	r6, #16
    d5ac:	6800      	ldr	r0, [r0, #0]
    d5ae:	ee18 3a90 	vmov	r3, s17
    d5b2:	e9cd 6c10 	strd	r6, ip, [sp, #64]	; 0x40
    d5b6:	ee18 2a90 	vmov	r2, s17
    d5ba:	4659      	mov	r1, fp
    d5bc:	2604      	movs	r6, #4
    d5be:	e9cd 570d 	strd	r5, r7, [sp, #52]	; 0x34
    d5c2:	960f      	str	r6, [sp, #60]	; 0x3c
    d5c4:	f000 fb74 	bl	dcb0 <dLdw_dLdb_conv1D_block_QOID_Norm1>
                                            &bn_params, pool_size, output_len, 0);

        vPortFree(y_relu_seiz1);

        // Seizure 2 - dLdw, dLdb
        dLdw_dLdb_conv1D_block_QOID_Norm1(x_set[1], y_relu_seiz2, y_seiz2, y_seiz1, y_seiz2, y_nonseiz1, y_nonseiz2,
    d5c8:	2603      	movs	r6, #3
        vPortFree(y_relu_seiz1);
    d5ca:	4658      	mov	r0, fp
    d5cc:	f7ff fbb8 	bl	cd40 <vPortFree>
        dLdw_dLdb_conv1D_block_QOID_Norm1(x_set[1], y_relu_seiz2, y_seiz2, y_seiz1, y_seiz2, y_nonseiz1, y_nonseiz2,
    d5d0:	e9cd 5607 	strd	r5, r6, [sp, #28]
    d5d4:	2620      	movs	r6, #32
    d5d6:	e9cd 450b 	strd	r4, r5, [sp, #44]	; 0x2c
    d5da:	e9cd 5605 	strd	r5, r6, [sp, #20]
    d5de:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
    d5e2:	9b16      	ldr	r3, [sp, #88]	; 0x58
    d5e4:	9a15      	ldr	r2, [sp, #84]	; 0x54
    d5e6:	9914      	ldr	r1, [sp, #80]	; 0x50
    d5e8:	9304      	str	r3, [sp, #16]
    d5ea:	9203      	str	r2, [sp, #12]
    d5ec:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    d5ee:	9a12      	ldr	r2, [sp, #72]	; 0x48
    d5f0:	482d      	ldr	r0, [pc, #180]	; (d6a8 <launch+0x378>)
    d5f2:	9200      	str	r2, [sp, #0]
    d5f4:	9102      	str	r1, [sp, #8]
    d5f6:	9301      	str	r3, [sp, #4]
    d5f8:	f04f 0e10 	mov.w	lr, #16
    d5fc:	6840      	ldr	r0, [r0, #4]
    d5fe:	9411      	str	r4, [sp, #68]	; 0x44
    d600:	ee18 3a90 	vmov	r3, s17
    d604:	4651      	mov	r1, sl
    d606:	2604      	movs	r6, #4
    d608:	e9cd 6e0f 	strd	r6, lr, [sp, #60]	; 0x3c
    d60c:	4693      	mov	fp, r2
    d60e:	e9cd 570d 	strd	r5, r7, [sp, #52]	; 0x34
                                            &bn_params, pool_size, output_len, 1);

        vPortFree(y_relu_seiz2);

        // Non-seizure 1 - dLdw, dLdb
        dLdw_dLdb_conv1D_block_QOID_Norm1(x_set[2], y_relu_nonseiz1, y_nonseiz1, y_seiz1, y_seiz2, y_nonseiz1, y_nonseiz2,
    d612:	2620      	movs	r6, #32
        dLdw_dLdb_conv1D_block_QOID_Norm1(x_set[1], y_relu_seiz2, y_seiz2, y_seiz1, y_seiz2, y_nonseiz1, y_nonseiz2,
    d614:	f000 fb4c 	bl	dcb0 <dLdw_dLdb_conv1D_block_QOID_Norm1>
        vPortFree(y_relu_seiz2);
    d618:	4650      	mov	r0, sl
    d61a:	f7ff fb91 	bl	cd40 <vPortFree>
        dLdw_dLdb_conv1D_block_QOID_Norm1(x_set[2], y_relu_nonseiz1, y_nonseiz1, y_seiz1, y_seiz2, y_nonseiz1, y_nonseiz2,
    d61e:	9813      	ldr	r0, [sp, #76]	; 0x4c
    d620:	9606      	str	r6, [sp, #24]
    d622:	2603      	movs	r6, #3
    d624:	e9cd 450b 	strd	r4, r5, [sp, #44]	; 0x2c
    d628:	e9cd 5607 	strd	r5, r6, [sp, #28]
    d62c:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
    d630:	9a14      	ldr	r2, [sp, #80]	; 0x50
    d632:	9b16      	ldr	r3, [sp, #88]	; 0x58
    d634:	9915      	ldr	r1, [sp, #84]	; 0x54
    d636:	9202      	str	r2, [sp, #8]
    d638:	9001      	str	r0, [sp, #4]
    d63a:	4682      	mov	sl, r0
    d63c:	4602      	mov	r2, r0
    d63e:	481a      	ldr	r0, [pc, #104]	; (d6a8 <launch+0x378>)
    d640:	9304      	str	r3, [sp, #16]
    d642:	9103      	str	r1, [sp, #12]
    d644:	9505      	str	r5, [sp, #20]
    d646:	f8cd b000 	str.w	fp, [sp]
    d64a:	2610      	movs	r6, #16
    d64c:	f04f 0c02 	mov.w	ip, #2
    d650:	6880      	ldr	r0, [r0, #8]
    d652:	9610      	str	r6, [sp, #64]	; 0x40
    d654:	ee18 3a90 	vmov	r3, s17
    d658:	4649      	mov	r1, r9
    d65a:	2604      	movs	r6, #4
    d65c:	f8cd c044 	str.w	ip, [sp, #68]	; 0x44
    d660:	e9cd 570d 	strd	r5, r7, [sp, #52]	; 0x34
    d664:	960f      	str	r6, [sp, #60]	; 0x3c
    d666:	f8cd b048 	str.w	fp, [sp, #72]	; 0x48
    d66a:	f000 fb21 	bl	dcb0 <dLdw_dLdb_conv1D_block_QOID_Norm1>
                                            input_len, input_depth,
                                            no_filters_, filter_len, stride, padding, bias_sharing,
                                            conv_output_len, output_depth,
                                            &bn_params, pool_size, output_len, 2);
                                            
        vPortFree(y_relu_nonseiz1);
    d66e:	4648      	mov	r0, r9
    d670:	f7ff fb66 	bl	cd40 <vPortFree>

        // Non-seizure 2 - dLdw, dLdb
        dLdw_dLdb_conv1D_block_QOID_Norm1(x_set[3], y_relu_nonseiz2, y_nonseiz2, y_seiz1, y_seiz2, y_nonseiz1, y_nonseiz2,
    d674:	2620      	movs	r6, #32
    d676:	e9cd 440a 	strd	r4, r4, [sp, #40]	; 0x28
    d67a:	9916      	ldr	r1, [sp, #88]	; 0x58
    d67c:	9b12      	ldr	r3, [sp, #72]	; 0x48
    d67e:	9a14      	ldr	r2, [sp, #80]	; 0x50
    d680:	e018      	b.n	d6b4 <launch+0x384>
    d682:	bf00      	nop
    d684:	10007408 	.word	0x10007408
    d688:	10007308 	.word	0x10007308
    d68c:	10001008 	.word	0x10001008
    d690:	322bcc77 	.word	0x322bcc77
    d694:	3a83126f 	.word	0x3a83126f
    d698:	3f7fbe77 	.word	0x3f7fbe77
    d69c:	3727c5ac 	.word	0x3727c5ac
    d6a0:	10007208 	.word	0x10007208
    d6a4:	3f666666 	.word	0x3f666666
    d6a8:	10007508 	.word	0x10007508
    d6ac:	10001108 	.word	0x10001108
    d6b0:	10001208 	.word	0x10001208
    d6b4:	9606      	str	r6, [sp, #24]
    d6b6:	9104      	str	r1, [sp, #16]
    d6b8:	9300      	str	r3, [sp, #0]
    d6ba:	9915      	ldr	r1, [sp, #84]	; 0x54
    d6bc:	4b25      	ldr	r3, [pc, #148]	; (d754 <launch+0x424>)
    d6be:	9202      	str	r2, [sp, #8]
    d6c0:	2603      	movs	r6, #3
    d6c2:	950c      	str	r5, [sp, #48]	; 0x30
    d6c4:	9507      	str	r5, [sp, #28]
    d6c6:	9505      	str	r5, [sp, #20]
    d6c8:	9103      	str	r1, [sp, #12]
    d6ca:	9608      	str	r6, [sp, #32]
    d6cc:	9409      	str	r4, [sp, #36]	; 0x24
    d6ce:	f8cd a004 	str.w	sl, [sp, #4]
    d6d2:	2410      	movs	r4, #16
    d6d4:	68d8      	ldr	r0, [r3, #12]
    d6d6:	9410      	str	r4, [sp, #64]	; 0x40
    d6d8:	2404      	movs	r4, #4
    d6da:	ee18 3a90 	vmov	r3, s17
    d6de:	4641      	mov	r1, r8
    d6e0:	940f      	str	r4, [sp, #60]	; 0x3c
    d6e2:	2403      	movs	r4, #3
    d6e4:	4616      	mov	r6, r2
    d6e6:	950d      	str	r5, [sp, #52]	; 0x34
    d6e8:	9411      	str	r4, [sp, #68]	; 0x44
    d6ea:	970e      	str	r7, [sp, #56]	; 0x38
    d6ec:	f8cd a04c 	str.w	sl, [sp, #76]	; 0x4c
    d6f0:	f000 fade 	bl	dcb0 <dLdw_dLdb_conv1D_block_QOID_Norm1>
                                            input_len, input_depth,
                                            no_filters_, filter_len, stride, padding, bias_sharing,
                                            conv_output_len, output_depth,
                                            &bn_params, pool_size, output_len, 3);
                                            
        vPortFree(y_relu_nonseiz2);
    d6f4:	4640      	mov	r0, r8
    d6f6:	f7ff fb23 	bl	cd40 <vPortFree>
        // ----------------------------


        // --- ADAM UPDATE STEP ---

        Adam_optimizer_step(&Adam_filter, filters_, dLdw);
    d6fa:	9d15      	ldr	r5, [sp, #84]	; 0x54
    d6fc:	4916      	ldr	r1, [pc, #88]	; (d758 <launch+0x428>)
    d6fe:	af1a      	add	r7, sp, #104	; 0x68
    d700:	462a      	mov	r2, r5
    d702:	4638      	mov	r0, r7
    d704:	f000 f87c 	bl	d800 <Adam_optimizer_step>
        Adam_optimizer_step(&Adam_bias, bias_, dLdb);
    d708:	9c16      	ldr	r4, [sp, #88]	; 0x58
    d70a:	4914      	ldr	r1, [pc, #80]	; (d75c <launch+0x42c>)
    d70c:	af23      	add	r7, sp, #140	; 0x8c
    d70e:	4622      	mov	r2, r4
    d710:	4638      	mov	r0, r7
    d712:	f000 f875 	bl	d800 <Adam_optimizer_step>


    // --- MEMORY FREE ---

    // Outputs y
    vPortFree(y_seiz1);
    d716:	ee18 0a90 	vmov	r0, s17
    d71a:	f7ff fb11 	bl	cd40 <vPortFree>
    vPortFree(y_seiz2);
    d71e:	9812      	ldr	r0, [sp, #72]	; 0x48
    d720:	f7ff fb0e 	bl	cd40 <vPortFree>
    vPortFree(y_nonseiz1);
    d724:	9813      	ldr	r0, [sp, #76]	; 0x4c
    d726:	f7ff fb0b 	bl	cd40 <vPortFree>
    vPortFree(y_nonseiz2);
    d72a:	4630      	mov	r0, r6
    d72c:	f7ff fb08 	bl	cd40 <vPortFree>

    // Derivatives dLdw, dLdb
    vPortFree(dLdw);
    d730:	4628      	mov	r0, r5
    d732:	f7ff fb05 	bl	cd40 <vPortFree>
    vPortFree(dLdb);
    d736:	4620      	mov	r0, r4
    d738:	f7ff fb02 	bl	cd40 <vPortFree>

    // Adam structs
    Adam_optimizer_free(&Adam_filter);
    d73c:	a81a      	add	r0, sp, #104	; 0x68
    d73e:	f000 f855 	bl	d7ec <Adam_optimizer_free>
    Adam_optimizer_free(&Adam_bias);
    d742:	a823      	add	r0, sp, #140	; 0x8c
    d744:	f000 f852 	bl	d7ec <Adam_optimizer_free>
    am_util_stdio_printf("\n*** END OF BIOBPFREE TRAINING ***\n\n");
    #endif

    return 0;

    d748:	2000      	movs	r0, #0
    d74a:	b037      	add	sp, #220	; 0xdc
    d74c:	ecbd 8b02 	vpop	{d8}
    d750:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d754:	10007508 	.word	0x10007508
    d758:	10001208 	.word	0x10001208
    d75c:	10001108 	.word	0x10001108

0000d760 <Adam_optimizer_init>:
#include "utils.h"
#include "Adam_optimizer.h"



void Adam_optimizer_init(Adam_parameters *Adam_, my_type beta1, my_type beta2, my_type alpha, my_type epsilon, int size)    {
    d760:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

    // Allocate and initialize to 0 momentum vector, and squared momentum vector
    Adam_->m = (my_type *)pvPortMalloc(size * sizeof(my_type));
    d762:	008e      	lsls	r6, r1, #2
void Adam_optimizer_init(Adam_parameters *Adam_, my_type beta1, my_type beta2, my_type alpha, my_type epsilon, int size)    {
    d764:	ed2d 8b04 	vpush	{d8-d9}
    d768:	4604      	mov	r4, r0
    Adam_->m = (my_type *)pvPortMalloc(size * sizeof(my_type));
    d76a:	4630      	mov	r0, r6
void Adam_optimizer_init(Adam_parameters *Adam_, my_type beta1, my_type beta2, my_type alpha, my_type epsilon, int size)    {
    d76c:	460f      	mov	r7, r1
    d76e:	eef0 8a40 	vmov.f32	s17, s0
    d772:	eeb0 8a60 	vmov.f32	s16, s1
    d776:	eeb0 9a41 	vmov.f32	s18, s2
    d77a:	eef0 9a61 	vmov.f32	s19, s3
    Adam_->m = (my_type *)pvPortMalloc(size * sizeof(my_type));
    d77e:	f7ff fa81 	bl	cc84 <pvPortMalloc>
    d782:	61a0      	str	r0, [r4, #24]
    Adam_->u = (my_type *)pvPortMalloc(size * sizeof(my_type));
    d784:	4630      	mov	r0, r6
    d786:	f7ff fa7d 	bl	cc84 <pvPortMalloc>

    for (int i = 0; i < size; i++)   {
    d78a:	2f00      	cmp	r7, #0
    Adam_->u = (my_type *)pvPortMalloc(size * sizeof(my_type));
    d78c:	61e0      	str	r0, [r4, #28]
    for (int i = 0; i < size; i++)   {
    d78e:	dd10      	ble.n	d7b2 <Adam_optimizer_init+0x52>
    d790:	4605      	mov	r5, r0
        Adam_->m[i] = 0;
    d792:	69a0      	ldr	r0, [r4, #24]
    d794:	1973      	adds	r3, r6, r5
    d796:	4298      	cmp	r0, r3
    d798:	d202      	bcs.n	d7a0 <Adam_optimizer_init+0x40>
    d79a:	1982      	adds	r2, r0, r6
    d79c:	4295      	cmp	r5, r2
    d79e:	d318      	bcc.n	d7d2 <Adam_optimizer_init+0x72>
    d7a0:	4632      	mov	r2, r6
    d7a2:	2100      	movs	r1, #0
    d7a4:	f7fe fcac 	bl	c100 <memset>
    d7a8:	4632      	mov	r2, r6
    d7aa:	4628      	mov	r0, r5
    d7ac:	2100      	movs	r1, #0
    d7ae:	f7fe fca7 	bl	c100 <memset>
        Adam_->u[i] = 0;
    }

    // Set the other parameters to the specified value
    Adam_->beta1 = beta1;
    d7b2:	edc4 8a00 	vstr	s17, [r4]
    Adam_->beta2 = beta2;
    d7b6:	ed84 8a02 	vstr	s16, [r4, #8]
    Adam_->epsilon = epsilon;
    d7ba:	edc4 9a05 	vstr	s19, [r4, #20]
    Adam_->alpha = alpha;
    d7be:	ed84 9a04 	vstr	s18, [r4, #16]
    Adam_->m_size = size;
    Adam_->beta1_t = beta1;
    d7c2:	edc4 8a01 	vstr	s17, [r4, #4]
    Adam_->beta2_t = beta2;
    d7c6:	ed84 8a03 	vstr	s16, [r4, #12]

}
    d7ca:	ecbd 8b04 	vpop	{d8-d9}
    Adam_->m_size = size;
    d7ce:	6227      	str	r7, [r4, #32]
}
    d7d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    d7d2:	f06f 0603 	mvn.w	r6, #3
        Adam_->m[i] = 0;
    d7d6:	2100      	movs	r1, #0
    d7d8:	1a36      	subs	r6, r6, r0
    d7da:	f840 1b04 	str.w	r1, [r0], #4
        Adam_->u[i] = 0;
    d7de:	182b      	adds	r3, r5, r0
    d7e0:	4433      	add	r3, r6
    for (int i = 0; i < size; i++)   {
    d7e2:	4290      	cmp	r0, r2
        Adam_->u[i] = 0;
    d7e4:	6019      	str	r1, [r3, #0]
    for (int i = 0; i < size; i++)   {
    d7e6:	d1f8      	bne.n	d7da <Adam_optimizer_init+0x7a>
    d7e8:	e7e3      	b.n	d7b2 <Adam_optimizer_init+0x52>
    d7ea:	bf00      	nop

0000d7ec <Adam_optimizer_free>:


void Adam_optimizer_free(Adam_parameters *Adam_)    {
    d7ec:	b510      	push	{r4, lr}
    d7ee:	4604      	mov	r4, r0
    vPortFree(Adam_->m);
    d7f0:	6980      	ldr	r0, [r0, #24]
    d7f2:	f7ff faa5 	bl	cd40 <vPortFree>
    vPortFree(Adam_->u);
    d7f6:	69e0      	ldr	r0, [r4, #28]
}
    d7f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    vPortFree(Adam_->u);
    d7fc:	f7ff baa0 	b.w	cd40 <vPortFree>

0000d800 <Adam_optimizer_step>:


void Adam_optimizer_step(Adam_parameters *Adam_, my_type *w, my_type *dLdw) {
    d800:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}

    // Assign params to local variables - simplify expressions and improve readability
    my_type beta1 = Adam_->beta1, beta2 = Adam_->beta2, epsilon = Adam_->epsilon, alpha = Adam_->alpha;
    int size = Adam_->m_size;
    d804:	f8d0 9020 	ldr.w	r9, [r0, #32]

    // Update 1st moment vector
    for (int i = 0; i < size; i++)   {
    d808:	f1b9 0f00 	cmp.w	r9, #0
void Adam_optimizer_step(Adam_parameters *Adam_, my_type *w, my_type *dLdw) {
    d80c:	ed2d 8b06 	vpush	{d8-d10}
    d810:	4606      	mov	r6, r0
    my_type beta1 = Adam_->beta1, beta2 = Adam_->beta2, epsilon = Adam_->epsilon, alpha = Adam_->alpha;
    d812:	ed90 8a00 	vldr	s16, [r0]
    d816:	edd0 8a02 	vldr	s17, [r0, #8]
    d81a:	edd0 9a05 	vldr	s19, [r0, #20]
    d81e:	ed90 9a04 	vldr	s18, [r0, #16]
void Adam_optimizer_step(Adam_parameters *Adam_, my_type *w, my_type *dLdw) {
    d822:	460d      	mov	r5, r1
    d824:	4693      	mov	fp, r2
    for (int i = 0; i < size; i++)   {
    d826:	f340 808f 	ble.w	d948 <Adam_optimizer_step+0x148>
    d82a:	6984      	ldr	r4, [r0, #24]
    d82c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
    d830:	ee76 6ac8 	vsub.f32	s13, s13, s16
    d834:	eb04 0289 	add.w	r2, r4, r9, lsl #2
    d838:	465b      	mov	r3, fp
    d83a:	ea4f 0789 	mov.w	r7, r9, lsl #2

        Adam_->m[i] = beta1 * Adam_->m[i] + (1 - beta1) * dLdw[i];
    d83e:	ecf3 7a01 	vldmia	r3!, {s15}
    d842:	ed94 7a00 	vldr	s14, [r4]
    d846:	ee67 7aa6 	vmul.f32	s15, s15, s13
    d84a:	eee7 7a08 	vfma.f32	s15, s14, s16
    d84e:	ece4 7a01 	vstmia	r4!, {s15}
    for (int i = 0; i < size; i++)   {
    d852:	4294      	cmp	r4, r2
    d854:	d1f3      	bne.n	d83e <Adam_optimizer_step+0x3e>

    }

    // Update 2nd raw moment vector
    my_type *vec_temp = (my_type *)pvPortMalloc(size * sizeof(my_type));
    d856:	4638      	mov	r0, r7
    d858:	f7ff fa14 	bl	cc84 <pvPortMalloc>

    vector_by_vector_mul_elementwise(dLdw, dLdw, vec_temp, size);
    d85c:	464b      	mov	r3, r9
    d85e:	4602      	mov	r2, r0
    my_type *vec_temp = (my_type *)pvPortMalloc(size * sizeof(my_type));
    d860:	4682      	mov	sl, r0
    vector_by_vector_mul_elementwise(dLdw, dLdw, vec_temp, size);
    d862:	4659      	mov	r1, fp
    d864:	4658      	mov	r0, fp
    d866:	f000 fe03 	bl	e470 <vector_by_vector_mul_elementwise>
    d86a:	69f3      	ldr	r3, [r6, #28]
    d86c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0

    for (int i = 0; i < size; i++)   {

        Adam_->u[i] = beta2 * Adam_->u[i] + (1 - beta2) * vec_temp[i];
    d870:	461c      	mov	r4, r3
    d872:	f06f 0203 	mvn.w	r2, #3
    d876:	ee76 6ae8 	vsub.f32	s13, s13, s17
    my_type *vec_temp = (my_type *)pvPortMalloc(size * sizeof(my_type));
    d87a:	46d0      	mov	r8, sl
    for (int i = 0; i < size; i++)   {
    d87c:	443b      	add	r3, r7
    d87e:	1b12      	subs	r2, r2, r4
        Adam_->u[i] = beta2 * Adam_->u[i] + (1 - beta2) * vec_temp[i];
    d880:	ecb4 7a01 	vldmia	r4!, {s14}
    d884:	eb0a 0104 	add.w	r1, sl, r4
    d888:	4411      	add	r1, r2
    d88a:	edd1 7a00 	vldr	s15, [r1]
    d88e:	ee66 7aa7 	vmul.f32	s15, s13, s15
    for (int i = 0; i < size; i++)   {
    d892:	42a3      	cmp	r3, r4
        Adam_->u[i] = beta2 * Adam_->u[i] + (1 - beta2) * vec_temp[i];
    d894:	eee7 7a28 	vfma.f32	s15, s14, s17
    d898:	ed44 7a01 	vstr	s15, [r4, #-4]
    for (int i = 0; i < size; i++)   {
    d89c:	d1f0      	bne.n	d880 <Adam_optimizer_step+0x80>

    }

    // Calculate bias-corrected 1st moment
    my_type *m_hat = (my_type *)pvPortMalloc(size * sizeof(my_type));
    d89e:	4638      	mov	r0, r7
    d8a0:	f7ff f9f0 	bl	cc84 <pvPortMalloc>

    scalar_by_vector_mul(1 / (1 - Adam_->beta1_t), Adam_->m, m_hat, size);
    d8a4:	ed96 0a01 	vldr	s0, [r6, #4]
    d8a8:	eeb7 aa00 	vmov.f32	s20, #112	; 0x3f800000  1.0
    d8ac:	ee3a 0a40 	vsub.f32	s0, s20, s0
    my_type *m_hat = (my_type *)pvPortMalloc(size * sizeof(my_type));
    d8b0:	4682      	mov	sl, r0
    scalar_by_vector_mul(1 / (1 - Adam_->beta1_t), Adam_->m, m_hat, size);
    d8b2:	ee8a 0a00 	vdiv.f32	s0, s20, s0
    d8b6:	4651      	mov	r1, sl
    d8b8:	464a      	mov	r2, r9
    d8ba:	69b0      	ldr	r0, [r6, #24]
    d8bc:	f000 fdb8 	bl	e430 <scalar_by_vector_mul>

    Adam_->beta1_t *= beta1;    // update beta1(t)

    // Calculate bias-corrected 2nd moment
    my_type *u_hat = (my_type *)pvPortMalloc(size * sizeof(my_type));
    d8c0:	4638      	mov	r0, r7
    Adam_->beta1_t *= beta1;    // update beta1(t)
    d8c2:	edd6 7a01 	vldr	s15, [r6, #4]
    d8c6:	ee27 8a88 	vmul.f32	s16, s15, s16
    d8ca:	ed86 8a01 	vstr	s16, [r6, #4]
    my_type *u_hat = (my_type *)pvPortMalloc(size * sizeof(my_type));
    d8ce:	f7ff f9d9 	bl	cc84 <pvPortMalloc>

    scalar_by_vector_mul(1 / (1 - Adam_->beta2_t), Adam_->u, u_hat, size);
    d8d2:	ed96 0a03 	vldr	s0, [r6, #12]
    d8d6:	ee3a 0a40 	vsub.f32	s0, s20, s0
    my_type *u_hat = (my_type *)pvPortMalloc(size * sizeof(my_type));
    d8da:	4604      	mov	r4, r0
    scalar_by_vector_mul(1 / (1 - Adam_->beta2_t), Adam_->u, u_hat, size);
    d8dc:	ee8a 0a00 	vdiv.f32	s0, s20, s0
    d8e0:	464a      	mov	r2, r9
    d8e2:	69f0      	ldr	r0, [r6, #28]
    d8e4:	4621      	mov	r1, r4
    d8e6:	f000 fda3 	bl	e430 <scalar_by_vector_mul>
    vector_sqrt(u_hat, size);
    d8ea:	4649      	mov	r1, r9
    d8ec:	4620      	mov	r0, r4
    d8ee:	f000 fde1 	bl	e4b4 <vector_sqrt>

    Adam_->beta2_t *= beta2;    // update beta2(t)

    // Update weights
    vector_by_vector_div_elementwise(m_hat, u_hat, vec_temp, size, epsilon);
    d8f2:	4621      	mov	r1, r4
    Adam_->beta2_t *= beta2;    // update beta2(t)
    d8f4:	edd6 7a03 	vldr	s15, [r6, #12]
    d8f8:	ee67 8aa8 	vmul.f32	s17, s15, s17
    vector_by_vector_div_elementwise(m_hat, u_hat, vec_temp, size, epsilon);
    d8fc:	4650      	mov	r0, sl
    d8fe:	464b      	mov	r3, r9
    d900:	4642      	mov	r2, r8
    d902:	eeb0 0a69 	vmov.f32	s0, s19
    Adam_->beta2_t *= beta2;    // update beta2(t)
    d906:	edc6 8a03 	vstr	s17, [r6, #12]
    vector_by_vector_div_elementwise(m_hat, u_hat, vec_temp, size, epsilon);
    d90a:	f000 fdc1 	bl	e490 <vector_by_vector_div_elementwise>

    for (int i = 0; i < size; i++)   {
    d90e:	f1b9 0f00 	cmp.w	r9, #0
    d912:	dd0c      	ble.n	d92e <Adam_optimizer_step+0x12e>
    d914:	4629      	mov	r1, r5
    d916:	442f      	add	r7, r5
    d918:	4643      	mov	r3, r8

        w[i] -= alpha * vec_temp[i];
    d91a:	edd1 7a00 	vldr	s15, [r1]
    d91e:	ecb3 7a01 	vldmia	r3!, {s14}
    d922:	eee7 7a49 	vfms.f32	s15, s14, s18
    d926:	ece1 7a01 	vstmia	r1!, {s15}
    for (int i = 0; i < size; i++)   {
    d92a:	428f      	cmp	r7, r1
    d92c:	d1f5      	bne.n	d91a <Adam_optimizer_step+0x11a>

    }

    // Free dynamic memory
    vPortFree(m_hat);
    d92e:	4650      	mov	r0, sl
    d930:	f7ff fa06 	bl	cd40 <vPortFree>
    vPortFree(u_hat);
    d934:	4620      	mov	r0, r4
    d936:	f7ff fa03 	bl	cd40 <vPortFree>
    vPortFree(vec_temp);

}
    d93a:	ecbd 8b06 	vpop	{d8-d10}
    vPortFree(vec_temp);
    d93e:	4640      	mov	r0, r8
}
    d940:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    vPortFree(vec_temp);
    d944:	f7ff b9fc 	b.w	cd40 <vPortFree>
    my_type *vec_temp = (my_type *)pvPortMalloc(size * sizeof(my_type));
    d948:	ea4f 0789 	mov.w	r7, r9, lsl #2
    d94c:	4638      	mov	r0, r7
    d94e:	f7ff f999 	bl	cc84 <pvPortMalloc>
    vector_by_vector_mul_elementwise(dLdw, dLdw, vec_temp, size);
    d952:	464b      	mov	r3, r9
    my_type *vec_temp = (my_type *)pvPortMalloc(size * sizeof(my_type));
    d954:	4680      	mov	r8, r0
    vector_by_vector_mul_elementwise(dLdw, dLdw, vec_temp, size);
    d956:	4602      	mov	r2, r0
    d958:	4659      	mov	r1, fp
    d95a:	4658      	mov	r0, fp
    d95c:	f000 fd88 	bl	e470 <vector_by_vector_mul_elementwise>
    for (int i = 0; i < size; i++)   {
    d960:	e79d      	b.n	d89e <Adam_optimizer_step+0x9e>
    d962:	bf00      	nop

0000d964 <bn_init_pretrained>:
    vPortFree(batch_norm_params->var_moving);
    vPortFree(batch_norm_params->gamma);
    vPortFree(batch_norm_params->beta);
}

void bn_init_pretrained(batch_norm_params_t *batch_norm_params, int channels, int samples, my_type *gamma, my_type *beta, my_type *mean, my_type *var, my_type epsilon)   {
    d964:	b410      	push	{r4}
    // Initialize the parameters
    batch_norm_params->channels = channels;
    d966:	6181      	str	r1, [r0, #24]
    batch_norm_params->samples = samples;
    d968:	61c2      	str	r2, [r0, #28]
void bn_init_pretrained(batch_norm_params_t *batch_norm_params, int channels, int samples, my_type *gamma, my_type *beta, my_type *mean, my_type *var, my_type epsilon)   {
    d96a:	9902      	ldr	r1, [sp, #8]
    d96c:	9a03      	ldr	r2, [sp, #12]
    d96e:	9c01      	ldr	r4, [sp, #4]
    batch_norm_params->epsilon = epsilon;
    // Set pretrained parameters 
    batch_norm_params->gamma = gamma;
    batch_norm_params->beta = beta;
    d970:	6144      	str	r4, [r0, #20]
    batch_norm_params->mean_moving = mean;
    batch_norm_params->var_moving = var;
    d972:	e9c0 1202 	strd	r1, r2, [r0, #8]
}
    d976:	f85d 4b04 	ldr.w	r4, [sp], #4
    batch_norm_params->gamma = gamma;
    d97a:	6103      	str	r3, [r0, #16]
    batch_norm_params->epsilon = epsilon;
    d97c:	ed80 0a09 	vstr	s0, [r0, #36]	; 0x24
}
    d980:	4770      	bx	lr
    d982:	bf00      	nop

0000d984 <bn_inference_forward>:
    }

}

// Per channel: y = gamma * (x - mean_moving) / sqrt(var_moving + epsilon) + beta
void bn_inference_forward(batch_norm_params_t *batch_norm_params, my_type *x, my_type *y)   {
    d984:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    int samples = batch_norm_params->samples;
    d988:	e9d0 3a06 	ldrd	r3, sl, [r0, #24]

    for (int i = 0; i < batch_norm_params->channels; i++)   {
    d98c:	2b00      	cmp	r3, #0
void bn_inference_forward(batch_norm_params_t *batch_norm_params, my_type *x, my_type *y)   {
    d98e:	b085      	sub	sp, #20
    for (int i = 0; i < batch_norm_params->channels; i++)   {
    d990:	dd41      	ble.n	da16 <bn_inference_forward+0x92>
    d992:	f1ba 0f00 	cmp.w	sl, #0
         my_type mean = batch_norm_params->mean_moving[i];
         my_type var = batch_norm_params->var_moving[i];
    d996:	e9d0 5402 	ldrd	r5, r4, [r0, #8]
    d99a:	dd3c      	ble.n	da16 <bn_inference_forward+0x92>
    d99c:	46a8      	mov	r8, r5
        // Calculate the normalized output (y = gamma * (x - mean_moving) / sqrt(var_moving + epsilon) + beta)
        for (int j = 0; j < samples; j++)   {
            #ifdef FLOATS
            y[i*samples + j] = batch_norm_params->gamma[i] * (x[i*samples + j] - mean) / sqrtf(var + batch_norm_params->epsilon) + batch_norm_params->beta[i];
    d99e:	6905      	ldr	r5, [r0, #16]
    d9a0:	9501      	str	r5, [sp, #4]
    d9a2:	f04f 0c00 	mov.w	ip, #0
    d9a6:	6945      	ldr	r5, [r0, #20]
    d9a8:	9502      	str	r5, [sp, #8]
    d9aa:	eb08 0383 	add.w	r3, r8, r3, lsl #2
    d9ae:	9303      	str	r3, [sp, #12]
    d9b0:	46a1      	mov	r9, r4
    d9b2:	46e6      	mov	lr, ip
    d9b4:	ea4f 0b8a 	mov.w	fp, sl, lsl #2
    d9b8:	eb01 058a 	add.w	r5, r1, sl, lsl #2
    d9bc:	9b01      	ldr	r3, [sp, #4]
         my_type mean = batch_norm_params->mean_moving[i];
    d9be:	ecf8 4a01 	vldmia	r8!, {s9}
         my_type var = batch_norm_params->var_moving[i];
    d9c2:	ecb9 5a01 	vldmia	r9!, {s10}
            y[i*samples + j] = batch_norm_params->gamma[i] * (x[i*samples + j] - mean) / sqrtf(var + batch_norm_params->epsilon) + batch_norm_params->beta[i];
    d9c6:	eb03 070e 	add.w	r7, r3, lr
    d9ca:	9b02      	ldr	r3, [sp, #8]
    d9cc:	eb02 048c 	add.w	r4, r2, ip, lsl #2
    d9d0:	eb03 060e 	add.w	r6, r3, lr
    d9d4:	eb01 038c 	add.w	r3, r1, ip, lsl #2
    d9d8:	ed90 7a09 	vldr	s14, [r0, #36]	; 0x24
    d9dc:	ecf3 7a01 	vldmia	r3!, {s15}
    d9e0:	edd7 5a00 	vldr	s11, [r7]
    d9e4:	edd6 6a00 	vldr	s13, [r6]
    d9e8:	ee35 7a07 	vadd.f32	s14, s10, s14
    d9ec:	ee77 7ae4 	vsub.f32	s15, s15, s9
    d9f0:	eeb1 6ac7 	vsqrt.f32	s12, s14
        for (int j = 0; j < samples; j++)   {
    d9f4:	42ab      	cmp	r3, r5
            y[i*samples + j] = batch_norm_params->gamma[i] * (x[i*samples + j] - mean) / sqrtf(var + batch_norm_params->epsilon) + batch_norm_params->beta[i];
    d9f6:	ee67 7aa5 	vmul.f32	s15, s15, s11
    d9fa:	ee87 7a86 	vdiv.f32	s14, s15, s12
    d9fe:	ee77 7a26 	vadd.f32	s15, s14, s13
    da02:	ece4 7a01 	vstmia	r4!, {s15}
        for (int j = 0; j < samples; j++)   {
    da06:	d1e7      	bne.n	d9d8 <bn_inference_forward+0x54>
    for (int i = 0; i < batch_norm_params->channels; i++)   {
    da08:	9b03      	ldr	r3, [sp, #12]
    da0a:	4543      	cmp	r3, r8
    da0c:	f10e 0e04 	add.w	lr, lr, #4
    da10:	44d4      	add	ip, sl
    da12:	445d      	add	r5, fp
    da14:	d1d2      	bne.n	d9bc <bn_inference_forward+0x38>
            #endif
        }

    }

}
    da16:	b005      	add	sp, #20
    da18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0000da1c <dydx_i_bn_frozen>:
    int channel_index = column_index / batch_norm_params->samples;                 // Find which channel we are referring to 

    // Common multiplier in all cases
    // dydx_ii_bn_frozen = gamma / sqrt(var + epsilon)
    #ifdef FLOATS
    return batch_norm_params->gamma[channel_index] / sqrtf(batch_norm_params->var_moving[channel_index] + batch_norm_params->epsilon);
    da1c:	68c3      	ldr	r3, [r0, #12]
    int channel_index = column_index / batch_norm_params->samples;                 // Find which channel we are referring to 
    da1e:	69c2      	ldr	r2, [r0, #28]
    da20:	fb91 f1f2 	sdiv	r1, r1, r2
    return batch_norm_params->gamma[channel_index] / sqrtf(batch_norm_params->var_moving[channel_index] + batch_norm_params->epsilon);
    da24:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    da28:	edd3 7a00 	vldr	s15, [r3]
    da2c:	ed90 7a09 	vldr	s14, [r0, #36]	; 0x24
    da30:	6903      	ldr	r3, [r0, #16]
    da32:	ee77 7a87 	vadd.f32	s15, s15, s14
    da36:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    da3a:	eeb1 7ae7 	vsqrt.f32	s14, s15
    da3e:	ed91 0a00 	vldr	s0, [r1]
    #else
    return batch_norm_params->gamma[channel_index] / sqrt(batch_norm_params->var_moving[channel_index] + batch_norm_params->epsilon);
    #endif

}
    da42:	ee80 0a07 	vdiv.f32	s0, s0, s14
    da46:	4770      	bx	lr

0000da48 <conv1D>:

// *** FORWARD PROPAGATION - COMMON CONV LAYERS ***

// ToDo: Optimize this loop (Avoid if with loop reordering + use better indexing)
void conv1D(const my_type *x, my_type *filter, my_type *bias, my_type *output,
            int input_len, int input_depth, int no_filters, int filter_len, int stride, int padding, bool bias_sharing)  {
    da48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    da4c:	b08b      	sub	sp, #44	; 0x2c
    da4e:	e9dd 8514 	ldrd	r8, r5, [sp, #80]	; 0x50
    da52:	9309      	str	r3, [sp, #36]	; 0x24

    int output_index = 0;
    int bias_index = 0;

    // Multiple filters
    for (int w_n = 0; w_n < no_filters; w_n++) {
    da54:	9b16      	ldr	r3, [sp, #88]	; 0x58
            int input_len, int input_depth, int no_filters, int filter_len, int stride, int padding, bool bias_sharing)  {
    da56:	f89d 6068 	ldrb.w	r6, [sp, #104]	; 0x68
    da5a:	f8dd e05c 	ldr.w	lr, [sp, #92]	; 0x5c
    da5e:	9c19      	ldr	r4, [sp, #100]	; 0x64
    da60:	9603      	str	r6, [sp, #12]
    for (int w_n = 0; w_n < no_filters; w_n++) {
    da62:	2b00      	cmp	r3, #0
            int input_len, int input_depth, int no_filters, int filter_len, int stride, int padding, bool bias_sharing)  {
    da64:	9205      	str	r2, [sp, #20]
    for (int w_n = 0; w_n < no_filters; w_n++) {
    da66:	dd60      	ble.n	db2a <conv1D+0xe2>

        // Input indexing -> Specifies where the filter is sitting at a moment
        // Since it is 1D conv we only traverse 1 dimension
        for (int start_index = -padding; start_index <= input_len + (padding - filter_len); start_index += stride) {
    da68:	eba4 030e 	sub.w	r3, r4, lr
    da6c:	4443      	add	r3, r8
    da6e:	4262      	negs	r2, r4
    da70:	429a      	cmp	r2, r3
    da72:	9304      	str	r3, [sp, #16]
    da74:	9207      	str	r2, [sp, #28]
    da76:	dc58      	bgt.n	db2a <conv1D+0xe2>
    da78:	fb0e f305 	mul.w	r3, lr, r5
    for (int w_n = 0; w_n < no_filters; w_n++) {
    da7c:	2200      	movs	r2, #0
    da7e:	009b      	lsls	r3, r3, #2
    da80:	9206      	str	r2, [sp, #24]
    da82:	468a      	mov	sl, r1
    da84:	9308      	str	r3, [sp, #32]
    int bias_index = 0;
    da86:	9202      	str	r2, [sp, #8]
    int output_index = 0;
    da88:	4693      	mov	fp, r2
    da8a:	ea4f 0c8e 	mov.w	ip, lr, lsl #2
    da8e:	ea4f 0788 	mov.w	r7, r8, lsl #2
        for (int start_index = -padding; start_index <= input_len + (padding - filter_len); start_index += stride) {
    da92:	9b09      	ldr	r3, [sp, #36]	; 0x24

            my_type sum = 0;
    da94:	f8dd 901c 	ldr.w	r9, [sp, #28]
    da98:	eb03 038b 	add.w	r3, r3, fp, lsl #2
    da9c:	9301      	str	r3, [sp, #4]

            // Traverse through filters length - depth (depth of filter matches depth of input map)
            for (int w_i = 0; w_i < filter_len; w_i++) {
    da9e:	f1be 0f00 	cmp.w	lr, #0
    daa2:	dd45      	ble.n	db30 <conv1D+0xe8>
            my_type sum = 0;
    daa4:	eddf 7a24 	vldr	s15, [pc, #144]	; db38 <conv1D+0xf0>
    daa8:	464c      	mov	r4, r9
            for (int w_i = 0; w_i < filter_len; w_i++) {
    daaa:	2600      	movs	r6, #0
                for (int w_j = 0; w_j < input_depth; w_j++) {
    daac:	2d00      	cmp	r5, #0
    daae:	dd13      	ble.n	dad8 <conv1D+0x90>
    dab0:	4544      	cmp	r4, r8
    dab2:	da11      	bge.n	dad8 <conv1D+0x90>
    dab4:	2c00      	cmp	r4, #0
    dab6:	db0f      	blt.n	dad8 <conv1D+0x90>
    dab8:	eb0a 0186 	add.w	r1, sl, r6, lsl #2
    dabc:	eb00 0284 	add.w	r2, r0, r4, lsl #2
    dac0:	2300      	movs	r3, #0

                    if (start_index + w_i < input_len && start_index + w_i  > -1) {
                        my_type filter_weight = mem3d(filter, filter_len, input_depth, w_n, w_j, w_i);
                        my_type x_ij = mem2d(x, input_len, w_j, start_index + w_i);
			            sum += filter_weight * x_ij;
    dac2:	edd1 6a00 	vldr	s13, [r1]
    dac6:	ed92 7a00 	vldr	s14, [r2]
                for (int w_j = 0; w_j < input_depth; w_j++) {
    daca:	3301      	adds	r3, #1
    dacc:	429d      	cmp	r5, r3
			            sum += filter_weight * x_ij;
    dace:	eee6 7a87 	vfma.f32	s15, s13, s14
                for (int w_j = 0; w_j < input_depth; w_j++) {
    dad2:	4461      	add	r1, ip
    dad4:	443a      	add	r2, r7
    dad6:	d1f4      	bne.n	dac2 <conv1D+0x7a>
            for (int w_i = 0; w_i < filter_len; w_i++) {
    dad8:	3601      	adds	r6, #1
    dada:	45b6      	cmp	lr, r6
    dadc:	f104 0401 	add.w	r4, r4, #1
    dae0:	d1e4      	bne.n	daac <conv1D+0x64>

                }
            }

            // Write output after adding bias
            output[output_index] = sum + bias[bias_index];
    dae2:	9b05      	ldr	r3, [sp, #20]
    dae4:	9a02      	ldr	r2, [sp, #8]
    dae6:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    daea:	ed93 7a00 	vldr	s14, [r3]
    daee:	9b01      	ldr	r3, [sp, #4]
    daf0:	ee77 7a27 	vadd.f32	s15, s14, s15

            // Update indexes
            output_index++;
    daf4:	f10b 0b01 	add.w	fp, fp, #1
            output[output_index] = sum + bias[bias_index];
    daf8:	ece3 7a01 	vstmia	r3!, {s15}
    dafc:	9301      	str	r3, [sp, #4]
            if (!bias_sharing)
    dafe:	9b03      	ldr	r3, [sp, #12]
    db00:	b90b      	cbnz	r3, db06 <conv1D+0xbe>
                bias_index++;
    db02:	3201      	adds	r2, #1
    db04:	9202      	str	r2, [sp, #8]
        for (int start_index = -padding; start_index <= input_len + (padding - filter_len); start_index += stride) {
    db06:	9b18      	ldr	r3, [sp, #96]	; 0x60
    db08:	4499      	add	r9, r3
    db0a:	9b04      	ldr	r3, [sp, #16]
    db0c:	4599      	cmp	r9, r3
    db0e:	ddc6      	ble.n	da9e <conv1D+0x56>
        }

        if (bias_sharing)
    db10:	9b03      	ldr	r3, [sp, #12]
    db12:	b113      	cbz	r3, db1a <conv1D+0xd2>
            bias_index++;
    db14:	9b02      	ldr	r3, [sp, #8]
    db16:	3301      	adds	r3, #1
    db18:	9302      	str	r3, [sp, #8]
    for (int w_n = 0; w_n < no_filters; w_n++) {
    db1a:	9a08      	ldr	r2, [sp, #32]
    db1c:	9b06      	ldr	r3, [sp, #24]
    db1e:	4492      	add	sl, r2
    db20:	9a16      	ldr	r2, [sp, #88]	; 0x58
    db22:	3301      	adds	r3, #1
    db24:	429a      	cmp	r2, r3
    db26:	9306      	str	r3, [sp, #24]
    db28:	d1b3      	bne.n	da92 <conv1D+0x4a>

    }
}
    db2a:	b00b      	add	sp, #44	; 0x2c
    db2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            my_type sum = 0;
    db30:	eddf 7a01 	vldr	s15, [pc, #4]	; db38 <conv1D+0xf0>
    db34:	e7d5      	b.n	dae2 <conv1D+0x9a>
    db36:	bf00      	nop
    db38:	00000000 	.word	0x00000000

0000db3c <relu>:


void relu(my_type *x, my_type *y, int size)  {

    for (int i = 0; i < size; i++)  {
    db3c:	2a00      	cmp	r2, #0
    db3e:	dd10      	ble.n	db62 <relu+0x26>
        if (x[i] >= 0)
    db40:	2300      	movs	r3, #0
    db42:	eb00 0282 	add.w	r2, r0, r2, lsl #2
    db46:	ecf0 7a01 	vldmia	r0!, {s15}
    db4a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
    db4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
            y[i] = x[i];
    db52:	bfac      	ite	ge
    db54:	edc1 7a00 	vstrge	s15, [r1]
        else
            y[i] = 0;
    db58:	600b      	strlt	r3, [r1, #0]
    for (int i = 0; i < size; i++)  {
    db5a:	4282      	cmp	r2, r0
    db5c:	f101 0104 	add.w	r1, r1, #4
    db60:	d1f1      	bne.n	db46 <relu+0xa>
    }

}
    db62:	4770      	bx	lr

0000db64 <max_pool1D>:

void max_pool1D(my_type *x, my_type *y, int pool_size, int x_len, int y_len) {

    int y_index = 0;

    for (int i = 0; i < x_len; i += pool_size) {
    db64:	2b00      	cmp	r3, #0
    db66:	dd1f      	ble.n	dba8 <max_pool1D+0x44>
void max_pool1D(my_type *x, my_type *y, int pool_size, int x_len, int y_len) {
    db68:	b4f0      	push	{r4, r5, r6, r7}
    db6a:	1d04      	adds	r4, r0, #4
    db6c:	460e      	mov	r6, r1
    db6e:	0097      	lsls	r7, r2, #2
    db70:	eb00 0082 	add.w	r0, r0, r2, lsl #2
    for (int i = 0; i < x_len; i += pool_size) {
    db74:	2500      	movs	r5, #0
        my_type max = x[i];
        for (int j = 1; j < pool_size; j++) {
    db76:	2a01      	cmp	r2, #1
        my_type max = x[i];
    db78:	ed54 7a01 	vldr	s15, [r4, #-4]
        for (int j = 1; j < pool_size; j++) {
    db7c:	dd0b      	ble.n	db96 <max_pool1D+0x32>
    db7e:	4621      	mov	r1, r4
            if (x[i + j] > max)
    db80:	ecb1 7a01 	vldmia	r1!, {s14}
    db84:	eef4 7ac7 	vcmpe.f32	s15, s14
    db88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    db8c:	bfb8      	it	lt
    db8e:	eef0 7a47 	vmovlt.f32	s15, s14
        for (int j = 1; j < pool_size; j++) {
    db92:	4288      	cmp	r0, r1
    db94:	d1f4      	bne.n	db80 <max_pool1D+0x1c>
    for (int i = 0; i < x_len; i += pool_size) {
    db96:	4415      	add	r5, r2
    db98:	42ab      	cmp	r3, r5
                max = x[i + j];
        }
        y[y_index++] = max;
    db9a:	ece6 7a01 	vstmia	r6!, {s15}
    for (int i = 0; i < x_len; i += pool_size) {
    db9e:	443c      	add	r4, r7
    dba0:	4438      	add	r0, r7
    dba2:	dce8      	bgt.n	db76 <max_pool1D+0x12>
    }
}
    dba4:	bcf0      	pop	{r4, r5, r6, r7}
    dba6:	4770      	bx	lr
    dba8:	4770      	bx	lr
    dbaa:	bf00      	nop

0000dbac <dydw_column_i_conv1D>:

// *** GRADIENTS ***

void dydw_column_i_conv1D( const my_type *x, my_type *dydw_column_i,
                            int input_len, int input_depth, int no_filters, int filter_len, int stride, int padding,
                            int output_len, int output_depth, int weight_index) {
    dbac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    dbb0:	b083      	sub	sp, #12
    dbb2:	e9dd ba0e 	ldrd	fp, sl, [sp, #56]	; 0x38
    dbb6:	9e0d      	ldr	r6, [sp, #52]	; 0x34
    dbb8:	9d12      	ldr	r5, [sp, #72]	; 0x48
    dbba:	9f10      	ldr	r7, [sp, #64]	; 0x40
    dbbc:	9c11      	ldr	r4, [sp, #68]	; 0x44
    dbbe:	9401      	str	r4, [sp, #4]

    // First find which is the filter index depending on the weight_index
    int filter_index = weight_index / (filter_len * input_depth);
    dbc0:	fb03 f406 	mul.w	r4, r3, r6

    // Then the relative index of this weight within the filter
    int relative_index = weight_index % (filter_len * input_depth);
    dbc4:	fb95 f3f4 	sdiv	r3, r5, r4
    dbc8:	fb04 5413 	mls	r4, r4, r3, r5
    int filter_i = relative_index % filter_len;

    int output_index = 0;

    // Potential initial 0s because of other filter
    for (; output_index < filter_index * output_len; output_index++)   {
    dbcc:	fb07 f503 	mul.w	r5, r7, r3
    dbd0:	2d00      	cmp	r5, #0
                            int output_len, int output_depth, int weight_index) {
    dbd2:	9700      	str	r7, [sp, #0]
    int filter_j = relative_index / filter_len;
    dbd4:	fb94 f8f6 	sdiv	r8, r4, r6
                            int output_len, int output_depth, int weight_index) {
    dbd8:	4681      	mov	r9, r0
    dbda:	460b      	mov	r3, r1
    dbdc:	4617      	mov	r7, r2
    int filter_i = relative_index % filter_len;
    dbde:	fb06 4418 	mls	r4, r6, r8, r4
    for (; output_index < filter_index * output_len; output_index++)   {
    dbe2:	dd62      	ble.n	dcaa <dydw_column_i_conv1D+0xfe>
    dbe4:	4618      	mov	r0, r3
    dbe6:	00aa      	lsls	r2, r5, #2
    dbe8:	2100      	movs	r1, #0
    dbea:	f7fe fa89 	bl	c100 <memset>
    dbee:	4603      	mov	r3, r0
        dydw_column_i[output_index] = 0;
    }

    // Find which element of the 2D input map were multiplied by this weight
    // Progress by stride
    for (int start_index = -padding; start_index <= input_len + (padding - filter_len); output_index++, start_index += stride)   {
    dbf0:	ebaa 0606 	sub.w	r6, sl, r6
    dbf4:	443e      	add	r6, r7
    dbf6:	f1ca 0200 	rsb	r2, sl, #0
    dbfa:	42b2      	cmp	r2, r6
    dbfc:	dc27      	bgt.n	dc4e <dydw_column_i_conv1D+0xa2>
    dbfe:	f1bb 0f01 	cmp.w	fp, #1

        int input_i = start_index + filter_i;

        // Check if x_ij is within limits - if not it was padding -> 0
        if (input_i >= 0 && input_i < input_len)
            dydw_column_i[output_index] = mem2d(x, input_len, filter_j, input_i);
    dc02:	fb07 f808 	mul.w	r8, r7, r8
    dc06:	d135      	bne.n	dc74 <dydw_column_i_conv1D+0xc8>
    dc08:	3601      	adds	r6, #1
    dc0a:	1931      	adds	r1, r6, r4
        else
            dydw_column_i[output_index] = 0;
    dc0c:	f04f 0c00 	mov.w	ip, #0
    dc10:	eba4 040a 	sub.w	r4, r4, sl
    dc14:	eb03 0285 	add.w	r2, r3, r5, lsl #2
    dc18:	e00e      	b.n	dc38 <dydw_column_i_conv1D+0x8c>
            dydw_column_i[output_index] = mem2d(x, input_len, filter_j, input_i);
    dc1a:	eb08 0004 	add.w	r0, r8, r4
        if (input_i >= 0 && input_i < input_len)
    dc1e:	42a7      	cmp	r7, r4
            dydw_column_i[output_index] = mem2d(x, input_len, filter_j, input_i);
    dc20:	eb09 0080 	add.w	r0, r9, r0, lsl #2
        if (input_i >= 0 && input_i < input_len)
    dc24:	dd0a      	ble.n	dc3c <dydw_column_i_conv1D+0x90>
    dc26:	3401      	adds	r4, #1
            dydw_column_i[output_index] = mem2d(x, input_len, filter_j, input_i);
    dc28:	6800      	ldr	r0, [r0, #0]
    dc2a:	6010      	str	r0, [r2, #0]
    for (int start_index = -padding; start_index <= input_len + (padding - filter_len); output_index++, start_index += stride)   {
    dc2c:	42a1      	cmp	r1, r4
    dc2e:	f105 0501 	add.w	r5, r5, #1
    dc32:	f102 0204 	add.w	r2, r2, #4
    dc36:	d00a      	beq.n	dc4e <dydw_column_i_conv1D+0xa2>
        if (input_i >= 0 && input_i < input_len)
    dc38:	2c00      	cmp	r4, #0
    dc3a:	daee      	bge.n	dc1a <dydw_column_i_conv1D+0x6e>
    dc3c:	3401      	adds	r4, #1
    for (int start_index = -padding; start_index <= input_len + (padding - filter_len); output_index++, start_index += stride)   {
    dc3e:	42a1      	cmp	r1, r4
            dydw_column_i[output_index] = 0;
    dc40:	f8c2 c000 	str.w	ip, [r2]
    for (int start_index = -padding; start_index <= input_len + (padding - filter_len); output_index++, start_index += stride)   {
    dc44:	f105 0501 	add.w	r5, r5, #1
    dc48:	f102 0204 	add.w	r2, r2, #4
    dc4c:	d1f4      	bne.n	dc38 <dydw_column_i_conv1D+0x8c>

    }

    // Potential final 0s because of other filters
    for (; output_index < output_len * output_depth; output_index++)   {
    dc4e:	e9dd 1200 	ldrd	r1, r2, [sp]
    dc52:	fb02 f201 	mul.w	r2, r2, r1
    dc56:	42aa      	cmp	r2, r5
    dc58:	dd09      	ble.n	dc6e <dydw_column_i_conv1D+0xc2>
        dydw_column_i[output_index] = 0;
    dc5a:	1b52      	subs	r2, r2, r5
    dc5c:	0092      	lsls	r2, r2, #2
    dc5e:	eb03 0085 	add.w	r0, r3, r5, lsl #2
    dc62:	2100      	movs	r1, #0
    }

}
    dc64:	b003      	add	sp, #12
    dc66:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    dc6a:	f7fe ba49 	b.w	c100 <memset>
    dc6e:	b003      	add	sp, #12
    dc70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            dydw_column_i[output_index] = 0;
    dc74:	f04f 0e00 	mov.w	lr, #0
    dc78:	44a0      	add	r8, r4
    dc7a:	eb03 0185 	add.w	r1, r3, r5, lsl #2
    dc7e:	e00e      	b.n	dc9e <dydw_column_i_conv1D+0xf2>
            dydw_column_i[output_index] = mem2d(x, input_len, filter_j, input_i);
    dc80:	eb02 0008 	add.w	r0, r2, r8
        if (input_i >= 0 && input_i < input_len)
    dc84:	4567      	cmp	r7, ip
            dydw_column_i[output_index] = mem2d(x, input_len, filter_j, input_i);
    dc86:	eb09 0080 	add.w	r0, r9, r0, lsl #2
        if (input_i >= 0 && input_i < input_len)
    dc8a:	dd0b      	ble.n	dca4 <dydw_column_i_conv1D+0xf8>
            dydw_column_i[output_index] = mem2d(x, input_len, filter_j, input_i);
    dc8c:	6800      	ldr	r0, [r0, #0]
    dc8e:	6008      	str	r0, [r1, #0]
    for (int start_index = -padding; start_index <= input_len + (padding - filter_len); output_index++, start_index += stride)   {
    dc90:	445a      	add	r2, fp
    dc92:	42b2      	cmp	r2, r6
    dc94:	f105 0501 	add.w	r5, r5, #1
    dc98:	f101 0104 	add.w	r1, r1, #4
    dc9c:	dcd7      	bgt.n	dc4e <dydw_column_i_conv1D+0xa2>
        if (input_i >= 0 && input_i < input_len)
    dc9e:	eb12 0c04 	adds.w	ip, r2, r4
    dca2:	d5ed      	bpl.n	dc80 <dydw_column_i_conv1D+0xd4>
            dydw_column_i[output_index] = 0;
    dca4:	f8c1 e000 	str.w	lr, [r1]
    dca8:	e7f2      	b.n	dc90 <dydw_column_i_conv1D+0xe4>
    int output_index = 0;
    dcaa:	2500      	movs	r5, #0
    dcac:	e7a0      	b.n	dbf0 <dydw_column_i_conv1D+0x44>
    dcae:	bf00      	nop

0000dcb0 <dLdw_dLdb_conv1D_block_QOID_Norm1>:
                                        int input_len, int input_depth,
                                        int no_filters, int filter_len, int stride, int padding, bool bias_sharing,
                                        int conv_output_len, int output_depth,
                                        batch_norm_params_t *batch_norm_params,
                                        int pool_size, int output_len,
                                        int input_index) {
    dcb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    dcb4:	ed2d 8b04 	vpush	{d8-d9}
    dcb8:	b09b      	sub	sp, #108	; 0x6c
    dcba:	e9dd 9a36 	ldrd	r9, sl, [sp, #216]	; 0xd8
    dcbe:	9e2f      	ldr	r6, [sp, #188]	; 0xbc
    dcc0:	960c      	str	r6, [sp, #48]	; 0x30
    dcc2:	9e34      	ldr	r6, [sp, #208]	; 0xd0
    dcc4:	960b      	str	r6, [sp, #44]	; 0x2c
    dcc6:	9e39      	ldr	r6, [sp, #228]	; 0xe4
    dcc8:	9609      	str	r6, [sp, #36]	; 0x24
    dcca:	9e28      	ldr	r6, [sp, #160]	; 0xa0
    dccc:	9614      	str	r6, [sp, #80]	; 0x50
    dcce:	9e29      	ldr	r6, [sp, #164]	; 0xa4
    dcd0:	9615      	str	r6, [sp, #84]	; 0x54
    dcd2:	9e2a      	ldr	r6, [sp, #168]	; 0xa8
    dcd4:	9616      	str	r6, [sp, #88]	; 0x58
    dcd6:	9e2b      	ldr	r6, [sp, #172]	; 0xac
    dcd8:	9618      	str	r6, [sp, #96]	; 0x60
    dcda:	9e2c      	ldr	r6, [sp, #176]	; 0xb0
    dcdc:	9c38      	ldr	r4, [sp, #224]	; 0xe0
    dcde:	9d35      	ldr	r5, [sp, #212]	; 0xd4
    dce0:	9619      	str	r6, [sp, #100]	; 0x64
    dce2:	9e31      	ldr	r6, [sp, #196]	; 0xc4
    dce4:	9f30      	ldr	r7, [sp, #192]	; 0xc0
    dce6:	f89d c0cc 	ldrb.w	ip, [sp, #204]	; 0xcc
    dcea:	960e      	str	r6, [sp, #56]	; 0x38
    dcec:	9e32      	ldr	r6, [sp, #200]	; 0xc8
    dcee:	970d      	str	r7, [sp, #52]	; 0x34
    dcf0:	960f      	str	r6, [sp, #60]	; 0x3c
    dcf2:	9f2e      	ldr	r7, [sp, #184]	; 0xb8
    dcf4:	f8cd c044 	str.w	ip, [sp, #68]	; 0x44
    dcf8:	f8dd b0b4 	ldr.w	fp, [sp, #180]	; 0xb4
    
    // Calculate #weight_parameters and size of output
    int weight_size = no_filters * filter_len * input_depth;
    int conv_output_size = conv_output_len * output_depth;
    int output_size = output_len * output_depth;
    dcfc:	950a      	str	r5, [sp, #40]	; 0x28
    dcfe:	fb04 f505 	mul.w	r5, r4, r5
    dd02:	462c      	mov	r4, r5
    dd04:	9512      	str	r5, [sp, #72]	; 0x48
                                        int input_index) {
    dd06:	4605      	mov	r5, r0

    // Allocate memory for the 3 derivative vectors (Chain rule)
    my_type *dLdy = (my_type *) pvPortMalloc(sizeof(my_type) * output_size);
    dd08:	00a0      	lsls	r0, r4, #2
    int weight_size = no_filters * filter_len * input_depth;
    dd0a:	9c0d      	ldr	r4, [sp, #52]	; 0x34
                                        int input_index) {
    dd0c:	9117      	str	r1, [sp, #92]	; 0x5c
    int weight_size = no_filters * filter_len * input_depth;
    dd0e:	46a4      	mov	ip, r4
    dd10:	9c0c      	ldr	r4, [sp, #48]	; 0x30
                                        int input_index) {
    dd12:	9313      	str	r3, [sp, #76]	; 0x4c
    int weight_size = no_filters * filter_len * input_depth;
    dd14:	fb0c f404 	mul.w	r4, ip, r4
    dd18:	fb07 f104 	mul.w	r1, r7, r4
                                        int input_index) {
    dd1c:	4616      	mov	r6, r2
    int weight_size = no_filters * filter_len * input_depth;
    dd1e:	9110      	str	r1, [sp, #64]	; 0x40
    my_type *dLdy = (my_type *) pvPortMalloc(sizeof(my_type) * output_size);
    dd20:	f7fe ffb0 	bl	cc84 <pvPortMalloc>
    int conv_output_size = conv_output_len * output_depth;
    dd24:	e9dd 320a 	ldrd	r3, r2, [sp, #40]	; 0x28
    dd28:	fb03 f402 	mul.w	r4, r3, r2

    // dLdy - Derivative of Loss with respect to output y
    // Depending on which input is fed (y1? y2? y3? y4?)
    if (input_index == 0)
    dd2c:	9b09      	ldr	r3, [sp, #36]	; 0x24
    my_type *dLdy = (my_type *) pvPortMalloc(sizeof(my_type) * output_size);
    dd2e:	4680      	mov	r8, r0
    if (input_index == 0)
    dd30:	2b00      	cmp	r3, #0
    dd32:	f000 80e1 	beq.w	def8 <dLdw_dLdb_conv1D_block_QOID_Norm1+0x248>
        dLdy1_QOID_Norm1(y1, y2, y3, y4, dLdy, output_size);
    else if (input_index == 1)
    dd36:	2b01      	cmp	r3, #1
    dd38:	f000 80eb 	beq.w	df12 <dLdw_dLdb_conv1D_block_QOID_Norm1+0x262>
        dLdy2_QOID_Norm1(y1, y2, y3, y4, dLdy, output_size);
    else if (input_index == 2)
    dd3c:	2b02      	cmp	r3, #2
        dLdy3_QOID_Norm1(y1, y2, y3, y4, dLdy, output_size);
    dd3e:	9b12      	ldr	r3, [sp, #72]	; 0x48
    dd40:	e9cd 0300 	strd	r0, r3, [sp]
    dd44:	e9dd 2315 	ldrd	r2, r3, [sp, #84]	; 0x54
    dd48:	e9dd 0113 	ldrd	r0, r1, [sp, #76]	; 0x4c
    else if (input_index == 2)
    dd4c:	f000 80de 	beq.w	df0c <dLdw_dLdb_conv1D_block_QOID_Norm1+0x25c>
    else
        dLdy4_QOID_Norm1(y1, y2, y3, y4, dLdy, output_size);
    dd50:	f000 fae6 	bl	e320 <dLdy4_QOID_Norm1>

    my_type *dLdy_bn = (my_type *) pvPortMalloc(sizeof(my_type) * conv_output_size);
    dd54:	00a3      	lsls	r3, r4, #2
    dd56:	4618      	mov	r0, r3
    dd58:	ee08 3a90 	vmov	s17, r3
    dd5c:	f7fe ff92 	bl	cc84 <pvPortMalloc>

    // dLdy_bn - Derivative of Loss with respect to output y after batch normalization
    // Multiply the derivative with the derivatives of pooling, ReLU layers
    // Exploit sparsity of such layers' derivatives to avoid matrix or vector multiplications 
    for (int index = 0; index < conv_output_size; index++)   {
    dd60:	2c00      	cmp	r4, #0
    my_type *dLdy_bn = (my_type *) pvPortMalloc(sizeof(my_type) * conv_output_size);
    dd62:	9009      	str	r0, [sp, #36]	; 0x24
    for (int index = 0; index < conv_output_size; index++)   {
    dd64:	f340 80df 	ble.w	df26 <dLdw_dLdb_conv1D_block_QOID_Norm1+0x276>
    dd68:	9917      	ldr	r1, [sp, #92]	; 0x5c
        // The derivative propagates only if the neuron was selected during max pooling (max pooling derivative) and the neuron is not 0 (ReLU derivative)
        if ( y[index / pool_size] > 0 && y_relu[index] == y[index / pool_size] )
            dLdy_bn[index] = dLdy[index / pool_size];
        else
            dLdy_bn[index] = 0; 
    dd6a:	f04f 0e00 	mov.w	lr, #0
    dd6e:	1a40      	subs	r0, r0, r1
    for (int index = 0; index < conv_output_size; index++)   {
    dd70:	2200      	movs	r2, #0
    dd72:	e011      	b.n	dd98 <dLdw_dLdb_conv1D_block_QOID_Norm1+0xe8>
        if ( y[index / pool_size] > 0 && y_relu[index] == y[index / pool_size] )
    dd74:	ed91 7a00 	vldr	s14, [r1]
    dd78:	eef4 7a47 	vcmp.f32	s15, s14
    dd7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
            dLdy_bn[index] = dLdy[index / pool_size];
    dd80:	4443      	add	r3, r8
    dd82:	eb00 0c01 	add.w	ip, r0, r1
        if ( y[index / pool_size] > 0 && y_relu[index] == y[index / pool_size] )
    dd86:	d114      	bne.n	ddb2 <dLdw_dLdb_conv1D_block_QOID_Norm1+0x102>
    for (int index = 0; index < conv_output_size; index++)   {
    dd88:	3201      	adds	r2, #1
            dLdy_bn[index] = dLdy[index / pool_size];
    dd8a:	681b      	ldr	r3, [r3, #0]
    dd8c:	f8cc 3000 	str.w	r3, [ip]
    for (int index = 0; index < conv_output_size; index++)   {
    dd90:	4294      	cmp	r4, r2
    dd92:	f101 0104 	add.w	r1, r1, #4
    dd96:	d014      	beq.n	ddc2 <dLdw_dLdb_conv1D_block_QOID_Norm1+0x112>
        if ( y[index / pool_size] > 0 && y_relu[index] == y[index / pool_size] )
    dd98:	fb92 f3fa 	sdiv	r3, r2, sl
    dd9c:	eb06 0c83 	add.w	ip, r6, r3, lsl #2
    dda0:	eddc 7a00 	vldr	s15, [ip]
    dda4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
    dda8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    ddac:	ea4f 0383 	mov.w	r3, r3, lsl #2
    ddb0:	dce0      	bgt.n	dd74 <dLdw_dLdb_conv1D_block_QOID_Norm1+0xc4>
            dLdy_bn[index] = 0; 
    ddb2:	1843      	adds	r3, r0, r1
    for (int index = 0; index < conv_output_size; index++)   {
    ddb4:	3201      	adds	r2, #1
    ddb6:	4294      	cmp	r4, r2
            dLdy_bn[index] = 0; 
    ddb8:	f8c3 e000 	str.w	lr, [r3]
    for (int index = 0; index < conv_output_size; index++)   {
    ddbc:	f101 0104 	add.w	r1, r1, #4
    ddc0:	d1ea      	bne.n	dd98 <dLdw_dLdb_conv1D_block_QOID_Norm1+0xe8>
    }

    vPortFree(dLdy);
    ddc2:	4640      	mov	r0, r8
    ddc4:	f7fe ffbc 	bl	cd40 <vPortFree>

    my_type *dLdy_conv = (my_type *) pvPortMalloc(sizeof(my_type) * conv_output_size);
    ddc8:	ee18 0a90 	vmov	r0, s17
    ddcc:	f7fe ff5a 	bl	cc84 <pvPortMalloc>
    ddd0:	9e09      	ldr	r6, [sp, #36]	; 0x24
    ddd2:	1b83      	subs	r3, r0, r6
    ddd4:	ee09 5a10 	vmov	s18, r5
    ddd8:	4680      	mov	r8, r0
    ddda:	f04f 0a00 	mov.w	sl, #0
    ddde:	461d      	mov	r5, r3
    // dLdy_conv = dLdy_bn * dydx_bn
    // Multiply the derivative with the derivative of batch normalization layer
    // Do vector by column multiplication to avoid storing matrix for vector by matrix multiplication
    // ToDO: Multiply by element only since each column has only 1 non-zero element!
    for (int column_index = 0; column_index < conv_output_size; column_index++)   {
        dLdy_conv[column_index] = dLdy_bn[column_index] * dydx_i_bn_frozen(batch_norm_params, column_index);
    dde0:	4651      	mov	r1, sl
    dde2:	4648      	mov	r0, r9
    dde4:	ed96 8a00 	vldr	s16, [r6]
    dde8:	f7ff fe18 	bl	da1c <dydx_i_bn_frozen>
    for (int column_index = 0; column_index < conv_output_size; column_index++)   {
    ddec:	f10a 0a01 	add.w	sl, sl, #1
        dLdy_conv[column_index] = dLdy_bn[column_index] * dydx_i_bn_frozen(batch_norm_params, column_index);
    ddf0:	ee28 0a00 	vmul.f32	s0, s16, s0
    ddf4:	19ab      	adds	r3, r5, r6
    for (int column_index = 0; column_index < conv_output_size; column_index++)   {
    ddf6:	4554      	cmp	r4, sl
        dLdy_conv[column_index] = dLdy_bn[column_index] * dydx_i_bn_frozen(batch_norm_params, column_index);
    ddf8:	ed83 0a00 	vstr	s0, [r3]
    for (int column_index = 0; column_index < conv_output_size; column_index++)   {
    ddfc:	f106 0604 	add.w	r6, r6, #4
    de00:	d1ee      	bne.n	dde0 <dLdw_dLdb_conv1D_block_QOID_Norm1+0x130>
    de02:	ee19 5a10 	vmov	r5, s18
    }

    vPortFree(dLdy_bn);
    de06:	9809      	ldr	r0, [sp, #36]	; 0x24
    de08:	f7fe ff9a 	bl	cd40 <vPortFree>

    my_type *dydw_column_i = (my_type *) pvPortMalloc(sizeof(my_type) * conv_output_size);
    de0c:	ee18 0a90 	vmov	r0, s17
    de10:	f7fe ff38 	bl	cc84 <pvPortMalloc>

    // dLdw = dLdy_conv * dydw
    // dydw - Derivative of (conv1d + ReLU) layer with respect to weights
    // Calculate column by column and do vector by vector multiplication (avoid vector by matrix multiplication)
    
    for (int weight_index = 0; weight_index < weight_size; weight_index++)   {
    de14:	9b10      	ldr	r3, [sp, #64]	; 0x40
    de16:	2b00      	cmp	r3, #0
    my_type *dydw_column_i = (my_type *) pvPortMalloc(sizeof(my_type) * conv_output_size);
    de18:	4682      	mov	sl, r0
    for (int weight_index = 0; weight_index < weight_size; weight_index++)   {
    de1a:	dd29      	ble.n	de70 <dLdw_dLdb_conv1D_block_QOID_Norm1+0x1c0>
    de1c:	463b      	mov	r3, r7
    de1e:	f8dd 9060 	ldr.w	r9, [sp, #96]	; 0x60
    de22:	462f      	mov	r7, r5
    de24:	4625      	mov	r5, r4
    de26:	9c10      	ldr	r4, [sp, #64]	; 0x40
    de28:	2600      	movs	r6, #0

        dydw_column_i_conv1D(x, dydw_column_i,
    de2a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    de2c:	9205      	str	r2, [sp, #20]
    de2e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    de30:	9204      	str	r2, [sp, #16]
    de32:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    de34:	9203      	str	r2, [sp, #12]
    de36:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    de38:	9202      	str	r2, [sp, #8]
    de3a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    de3c:	9201      	str	r2, [sp, #4]
    de3e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    de40:	9606      	str	r6, [sp, #24]
    de42:	9200      	str	r2, [sp, #0]
    de44:	4651      	mov	r1, sl
    de46:	465a      	mov	r2, fp
    de48:	4638      	mov	r0, r7
    de4a:	9309      	str	r3, [sp, #36]	; 0x24
    de4c:	f7ff feae 	bl	dbac <dydw_column_i_conv1D>
                             conv_output_len, output_depth, weight_index);

        // dLdy * dydw_column_i = dLdw_i
        // No need to multiply whole vectors
        // Just multiply the non-zero elements
        dLdw[weight_index] += vector_by_vector_mul(dLdy_conv, dydw_column_i, conv_output_size);
    de50:	462a      	mov	r2, r5
    de52:	4651      	mov	r1, sl
    de54:	4640      	mov	r0, r8
    de56:	f000 faf9 	bl	e44c <vector_by_vector_mul>
    de5a:	edd9 7a00 	vldr	s15, [r9]
    for (int weight_index = 0; weight_index < weight_size; weight_index++)   {
    de5e:	9b09      	ldr	r3, [sp, #36]	; 0x24
        dLdw[weight_index] += vector_by_vector_mul(dLdy_conv, dydw_column_i, conv_output_size);
    de60:	ee37 0a80 	vadd.f32	s0, s15, s0
    for (int weight_index = 0; weight_index < weight_size; weight_index++)   {
    de64:	3601      	adds	r6, #1
    de66:	42b4      	cmp	r4, r6
        dLdw[weight_index] += vector_by_vector_mul(dLdy_conv, dydw_column_i, conv_output_size);
    de68:	eca9 0a01 	vstmia	r9!, {s0}
    for (int weight_index = 0; weight_index < weight_size; weight_index++)   {
    de6c:	d1dd      	bne.n	de2a <dLdw_dLdb_conv1D_block_QOID_Norm1+0x17a>
    de6e:	462c      	mov	r4, r5
    }
    
    vPortFree(dydw_column_i);
    de70:	4650      	mov	r0, sl
    de72:	f7fe ff65 	bl	cd40 <vPortFree>

    // dLdb
    // Avoid vector by matrix multiplication since dydb matrix is sparse with 1s and 0s
    if (!bias_sharing)   {
    de76:	9b11      	ldr	r3, [sp, #68]	; 0x44
    de78:	b9cb      	cbnz	r3, deae <dLdw_dLdb_conv1D_block_QOID_Norm1+0x1fe>
        // Calculate derivative for each bias parameter
        for (int i = 0; i < conv_output_size; i++)   {
    de7a:	2c00      	cmp	r4, #0
    de7c:	dd0f      	ble.n	de9e <dLdw_dLdb_conv1D_block_QOID_Norm1+0x1ee>
    de7e:	9b19      	ldr	r3, [sp, #100]	; 0x64
    de80:	ee18 2a90 	vmov	r2, s17
    de84:	441a      	add	r2, r3
    de86:	4693      	mov	fp, r2
    de88:	4642      	mov	r2, r8
            dLdb[i] += dLdy_conv[i];
    de8a:	edd3 7a00 	vldr	s15, [r3]
    de8e:	ecb2 7a01 	vldmia	r2!, {s14}
    de92:	ee77 7a87 	vadd.f32	s15, s15, s14
    de96:	ece3 7a01 	vstmia	r3!, {s15}
        for (int i = 0; i < conv_output_size; i++)   {
    de9a:	459b      	cmp	fp, r3
    de9c:	d1f5      	bne.n	de8a <dLdw_dLdb_conv1D_block_QOID_Norm1+0x1da>
            for (int grad_index = i * conv_output_len; grad_index < (i + 1) * conv_output_len; grad_index++)
                dLdb[i] += dLdy_conv[grad_index];
        }

    }
    vPortFree(dLdy_conv);                       
    de9e:	4640      	mov	r0, r8
}
    dea0:	b01b      	add	sp, #108	; 0x6c
    dea2:	ecbd 8b04 	vpop	{d8-d9}
    dea6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    vPortFree(dLdy_conv);                       
    deaa:	f7fe bf49 	b.w	cd40 <vPortFree>
        for (int i = 0; i < output_depth; i++)   {
    deae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    deb0:	2b00      	cmp	r3, #0
    deb2:	ddf4      	ble.n	de9e <dLdw_dLdb_conv1D_block_QOID_Norm1+0x1ee>
    deb4:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
    deb6:	9919      	ldr	r1, [sp, #100]	; 0x64
    deb8:	ebc7 7587 	rsb	r5, r7, r7, lsl #30
    debc:	2000      	movs	r0, #0
    debe:	469c      	mov	ip, r3
    dec0:	00ad      	lsls	r5, r5, #2
    dec2:	4604      	mov	r4, r0
    dec4:	00be      	lsls	r6, r7, #2
    dec6:	eb08 0287 	add.w	r2, r8, r7, lsl #2
            for (int grad_index = i * conv_output_len; grad_index < (i + 1) * conv_output_len; grad_index++)
    deca:	4603      	mov	r3, r0
    decc:	4438      	add	r0, r7
    dece:	4283      	cmp	r3, r0
    ded0:	f104 0401 	add.w	r4, r4, #1
    ded4:	da0a      	bge.n	deec <dLdw_dLdb_conv1D_block_QOID_Norm1+0x23c>
    ded6:	edd1 7a00 	vldr	s15, [r1]
    deda:	1953      	adds	r3, r2, r5
                dLdb[i] += dLdy_conv[grad_index];
    dedc:	ecb3 7a01 	vldmia	r3!, {s14}
    dee0:	ee77 7a87 	vadd.f32	s15, s15, s14
            for (int grad_index = i * conv_output_len; grad_index < (i + 1) * conv_output_len; grad_index++)
    dee4:	429a      	cmp	r2, r3
                dLdb[i] += dLdy_conv[grad_index];
    dee6:	edc1 7a00 	vstr	s15, [r1]
            for (int grad_index = i * conv_output_len; grad_index < (i + 1) * conv_output_len; grad_index++)
    deea:	d1f7      	bne.n	dedc <dLdw_dLdb_conv1D_block_QOID_Norm1+0x22c>
        for (int i = 0; i < output_depth; i++)   {
    deec:	45a4      	cmp	ip, r4
    deee:	f101 0104 	add.w	r1, r1, #4
    def2:	4432      	add	r2, r6
    def4:	d1e9      	bne.n	deca <dLdw_dLdb_conv1D_block_QOID_Norm1+0x21a>
    def6:	e7d2      	b.n	de9e <dLdw_dLdb_conv1D_block_QOID_Norm1+0x1ee>
        dLdy1_QOID_Norm1(y1, y2, y3, y4, dLdy, output_size);
    def8:	9b12      	ldr	r3, [sp, #72]	; 0x48
    defa:	e9cd 0300 	strd	r0, r3, [sp]
    defe:	e9dd 2315 	ldrd	r2, r3, [sp, #84]	; 0x54
    df02:	e9dd 0113 	ldrd	r0, r1, [sp, #76]	; 0x4c
    df06:	f000 f873 	bl	dff0 <dLdy1_QOID_Norm1>
    df0a:	e723      	b.n	dd54 <dLdw_dLdb_conv1D_block_QOID_Norm1+0xa4>
        dLdy3_QOID_Norm1(y1, y2, y3, y4, dLdy, output_size);
    df0c:	f000 f980 	bl	e210 <dLdy3_QOID_Norm1>
    df10:	e720      	b.n	dd54 <dLdw_dLdb_conv1D_block_QOID_Norm1+0xa4>
        dLdy2_QOID_Norm1(y1, y2, y3, y4, dLdy, output_size);
    df12:	9b12      	ldr	r3, [sp, #72]	; 0x48
    df14:	e9cd 0300 	strd	r0, r3, [sp]
    df18:	e9dd 2315 	ldrd	r2, r3, [sp, #84]	; 0x54
    df1c:	e9dd 0113 	ldrd	r0, r1, [sp, #76]	; 0x4c
    df20:	f000 f8ee 	bl	e100 <dLdy2_QOID_Norm1>
    df24:	e716      	b.n	dd54 <dLdw_dLdb_conv1D_block_QOID_Norm1+0xa4>
    vPortFree(dLdy);
    df26:	4640      	mov	r0, r8
    df28:	f7fe ff0a 	bl	cd40 <vPortFree>
    my_type *dLdy_conv = (my_type *) pvPortMalloc(sizeof(my_type) * conv_output_size);
    df2c:	ee18 0a90 	vmov	r0, s17
    df30:	f7fe fea8 	bl	cc84 <pvPortMalloc>
    df34:	4680      	mov	r8, r0
    for (int column_index = 0; column_index < conv_output_size; column_index++)   {
    df36:	e766      	b.n	de06 <dLdw_dLdb_conv1D_block_QOID_Norm1+0x156>

0000df38 <update_loss_QOID_Norm1>:



// *** QOID Loss using sum of Abs distance (Norm1) ***

void update_loss_QOID_Norm1(my_type *y1, my_type *y2, my_type *y3, my_type *y4, int output_size)    {
    df38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    df3c:	ed2d 8b02 	vpush	{d8}
    df40:	9c08      	ldr	r4, [sp, #32]
    df42:	4615      	mov	r5, r2

    sum_abs_y1y2 = Sum_Abs_Diff(y1, y2, output_size); dist_y1y2 = sum_abs_y1y2 / output_size;
    df44:	4622      	mov	r2, r4
void update_loss_QOID_Norm1(my_type *y1, my_type *y2, my_type *y3, my_type *y4, int output_size)    {
    df46:	461e      	mov	r6, r3
    df48:	460f      	mov	r7, r1
    df4a:	4680      	mov	r8, r0
    sum_abs_y1y2 = Sum_Abs_Diff(y1, y2, output_size); dist_y1y2 = sum_abs_y1y2 / output_size;
    df4c:	f000 fac0 	bl	e4d0 <Sum_Abs_Diff>
    df50:	ee07 4a90 	vmov	s15, r4
    df54:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    df58:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    df5c:	ee87 8a27 	vdiv.f32	s16, s14, s15
    df60:	4b1d      	ldr	r3, [pc, #116]	; (dfd8 <update_loss_QOID_Norm1+0xa0>)
    sum_abs_y1y3 = Sum_Abs_Diff(y1, y3, output_size); dist_y1y3 = sum_abs_y1y3 / output_size;
    df62:	4629      	mov	r1, r5
    df64:	4640      	mov	r0, r8
    df66:	4622      	mov	r2, r4
    sum_abs_y1y2 = Sum_Abs_Diff(y1, y2, output_size); dist_y1y2 = sum_abs_y1y2 / output_size;
    df68:	ee20 0a08 	vmul.f32	s0, s0, s16
    df6c:	ed83 0a00 	vstr	s0, [r3]
    sum_abs_y1y3 = Sum_Abs_Diff(y1, y3, output_size); dist_y1y3 = sum_abs_y1y3 / output_size;
    df70:	f000 faae 	bl	e4d0 <Sum_Abs_Diff>
    df74:	4b19      	ldr	r3, [pc, #100]	; (dfdc <update_loss_QOID_Norm1+0xa4>)
    df76:	ee20 0a08 	vmul.f32	s0, s0, s16
    sum_abs_y1y4 = Sum_Abs_Diff(y1, y4, output_size); dist_y1y4 = sum_abs_y1y4 / output_size;
    df7a:	4640      	mov	r0, r8
    df7c:	4631      	mov	r1, r6
    df7e:	4622      	mov	r2, r4
    sum_abs_y1y3 = Sum_Abs_Diff(y1, y3, output_size); dist_y1y3 = sum_abs_y1y3 / output_size;
    df80:	ed83 0a00 	vstr	s0, [r3]
    sum_abs_y1y4 = Sum_Abs_Diff(y1, y4, output_size); dist_y1y4 = sum_abs_y1y4 / output_size;
    df84:	f000 faa4 	bl	e4d0 <Sum_Abs_Diff>
    df88:	4b15      	ldr	r3, [pc, #84]	; (dfe0 <update_loss_QOID_Norm1+0xa8>)
    df8a:	ee20 0a08 	vmul.f32	s0, s0, s16
    sum_abs_y2y3 = Sum_Abs_Diff(y2, y3, output_size); dist_y2y3 = sum_abs_y2y3 / output_size;
    df8e:	4629      	mov	r1, r5
    df90:	4638      	mov	r0, r7
    df92:	4622      	mov	r2, r4
    sum_abs_y1y4 = Sum_Abs_Diff(y1, y4, output_size); dist_y1y4 = sum_abs_y1y4 / output_size;
    df94:	ed83 0a00 	vstr	s0, [r3]
    sum_abs_y2y3 = Sum_Abs_Diff(y2, y3, output_size); dist_y2y3 = sum_abs_y2y3 / output_size;
    df98:	f000 fa9a 	bl	e4d0 <Sum_Abs_Diff>
    df9c:	4b11      	ldr	r3, [pc, #68]	; (dfe4 <update_loss_QOID_Norm1+0xac>)
    df9e:	ee20 0a08 	vmul.f32	s0, s0, s16
    sum_abs_y2y4 = Sum_Abs_Diff(y2, y4, output_size); dist_y2y4 = sum_abs_y2y4 / output_size;
    dfa2:	4638      	mov	r0, r7
    dfa4:	4631      	mov	r1, r6
    dfa6:	4622      	mov	r2, r4
    sum_abs_y2y3 = Sum_Abs_Diff(y2, y3, output_size); dist_y2y3 = sum_abs_y2y3 / output_size;
    dfa8:	ed83 0a00 	vstr	s0, [r3]
    sum_abs_y2y4 = Sum_Abs_Diff(y2, y4, output_size); dist_y2y4 = sum_abs_y2y4 / output_size;
    dfac:	f000 fa90 	bl	e4d0 <Sum_Abs_Diff>
    dfb0:	4b0d      	ldr	r3, [pc, #52]	; (dfe8 <update_loss_QOID_Norm1+0xb0>)
    dfb2:	ee20 0a08 	vmul.f32	s0, s0, s16
    sum_abs_y3y4 = Sum_Abs_Diff(y3, y4, output_size); dist_y3y4 = sum_abs_y3y4 / output_size;
    dfb6:	4631      	mov	r1, r6
    dfb8:	4628      	mov	r0, r5
    dfba:	4622      	mov	r2, r4
    sum_abs_y2y4 = Sum_Abs_Diff(y2, y4, output_size); dist_y2y4 = sum_abs_y2y4 / output_size;
    dfbc:	ed83 0a00 	vstr	s0, [r3]
    sum_abs_y3y4 = Sum_Abs_Diff(y3, y4, output_size); dist_y3y4 = sum_abs_y3y4 / output_size;
    dfc0:	f000 fa86 	bl	e4d0 <Sum_Abs_Diff>
    dfc4:	ee20 0a08 	vmul.f32	s0, s0, s16

}
    dfc8:	ecbd 8b02 	vpop	{d8}
    sum_abs_y3y4 = Sum_Abs_Diff(y3, y4, output_size); dist_y3y4 = sum_abs_y3y4 / output_size;
    dfcc:	4b07      	ldr	r3, [pc, #28]	; (dfec <update_loss_QOID_Norm1+0xb4>)
    dfce:	ed83 0a00 	vstr	s0, [r3]
}
    dfd2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    dfd6:	bf00      	nop
    dfd8:	100525fc 	.word	0x100525fc
    dfdc:	10052600 	.word	0x10052600
    dfe0:	10052604 	.word	0x10052604
    dfe4:	10052608 	.word	0x10052608
    dfe8:	1005260c 	.word	0x1005260c
    dfec:	10052610 	.word	0x10052610

0000dff0 <dLdy1_QOID_Norm1>:
}


// Must first call update_loss_QOID_Norm1() to update the distances
// *** Note: y1[i] = y2[i]? -> Derivative not defined -> 0 ***
void dLdy1_QOID_Norm1(my_type *y1, my_type *y2, my_type *y3, my_type *y4, my_type *output, int output_size)  {
    dff0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    dff4:	9e07      	ldr	r6, [sp, #28]

    // Intermediate variables for better readability
    my_type term, sum;

    // Calculate the 3 terms that arise from the derivative of the loss function
    for (int i = 0; i < output_size; i++)  {
    dff6:	2e00      	cmp	r6, #0
    dff8:	dd73      	ble.n	e0e2 <dLdy1_QOID_Norm1+0xf2>
    dffa:	4604      	mov	r4, r0

        sum = 0;

        // Term 1
        term = 1.0 / output_size;
    dffc:	4630      	mov	r0, r6
    dffe:	4615      	mov	r5, r2
    e000:	461f      	mov	r7, r3
    e002:	4688      	mov	r8, r1
    e004:	f7fe fa1e 	bl	c444 <__aeabi_i2d>
    e008:	4602      	mov	r2, r0
    e00a:	460b      	mov	r3, r1
    e00c:	2000      	movs	r0, #0
    e00e:	4937      	ldr	r1, [pc, #220]	; (e0ec <dLdy1_QOID_Norm1+0xfc>)
    e010:	f7fe fbac 	bl	c76c <__aeabi_ddiv>
    e014:	f7fe fc92 	bl	c93c <__aeabi_d2f>
        else if (y1[i] < y2[i])
            sum -= term;

        // Term 2
        //term = -output_size / (sum_abs_y1y3 * sum_abs_y1y3);
        term = -1 / (output_size * (dist_y1y3+epsilon) * (dist_y1y3+epsilon));
    e018:	4a35      	ldr	r2, [pc, #212]	; (e0f0 <dLdy1_QOID_Norm1+0x100>)
        else if (y1[i] < y3[i])
            sum -= term;

        // Term 3
        //term = -output_size / (sum_abs_y1y4 * sum_abs_y1y4);
        term = -1 / (output_size * (dist_y1y4+epsilon) * (dist_y1y4+epsilon));
    e01a:	4b36      	ldr	r3, [pc, #216]	; (e0f4 <dLdy1_QOID_Norm1+0x104>)
        term = -1 / (output_size * (dist_y1y3+epsilon) * (dist_y1y3+epsilon));
    e01c:	eddf 6a36 	vldr	s13, [pc, #216]	; e0f8 <dLdy1_QOID_Norm1+0x108>
    e020:	ed92 7a00 	vldr	s14, [r2]
        term = -1 / (output_size * (dist_y1y4+epsilon) * (dist_y1y4+epsilon));
    e024:	edd3 7a00 	vldr	s15, [r3]
        term = -1 / (output_size * (dist_y1y3+epsilon) * (dist_y1y3+epsilon));
    e028:	ee37 7a26 	vadd.f32	s14, s14, s13
        term = -1 / (output_size * (dist_y1y4+epsilon) * (dist_y1y4+epsilon));
    e02c:	ee77 7aa6 	vadd.f32	s15, s15, s13
        term = -1 / (output_size * (dist_y1y3+epsilon) * (dist_y1y3+epsilon));
    e030:	ee06 6a90 	vmov	s13, r6
    e034:	ee27 7a07 	vmul.f32	s14, s14, s14
    e038:	eeb8 6ae6 	vcvt.f32.s32	s12, s13
        term = -1 / (output_size * (dist_y1y4+epsilon) * (dist_y1y4+epsilon));
    e03c:	ee67 7aa7 	vmul.f32	s15, s15, s15
        term = -1 / (output_size * (dist_y1y3+epsilon) * (dist_y1y3+epsilon));
    e040:	ee27 7a06 	vmul.f32	s14, s14, s12
        term = -1 / (output_size * (dist_y1y4+epsilon) * (dist_y1y4+epsilon));
    e044:	ee67 7a86 	vmul.f32	s15, s15, s12
        term = 1.0 / output_size;
    e048:	ee06 0a10 	vmov	s12, r0
        term = -1 / (output_size * (dist_y1y3+epsilon) * (dist_y1y3+epsilon));
    e04c:	eeff 6a00 	vmov.f32	s13, #240	; 0xbf800000 -1.0
    e050:	462a      	mov	r2, r5
    e052:	ee86 5a87 	vdiv.f32	s10, s13, s14
    e056:	9d06      	ldr	r5, [sp, #24]
    e058:	4641      	mov	r1, r8
    e05a:	463b      	mov	r3, r7
    e05c:	eb04 0686 	add.w	r6, r4, r6, lsl #2
        term = -1 / (output_size * (dist_y1y4+epsilon) * (dist_y1y4+epsilon));
    e060:	eec6 5aa7 	vdiv.f32	s11, s13, s15
            sum -= term;
    e064:	eef1 4a46 	vneg.f32	s9, s12
    e068:	e018      	b.n	e09c <dLdy1_QOID_Norm1+0xac>
        else if (y1[i] < y2[i])
    e06a:	d43c      	bmi.n	e0e6 <dLdy1_QOID_Norm1+0xf6>
        sum = 0;
    e06c:	eddf 7a23 	vldr	s15, [pc, #140]	; e0fc <dLdy1_QOID_Norm1+0x10c>
        if (y1[i] > y3[i])
    e070:	ecf2 6a01 	vldmia	r2!, {s13}
    e074:	eeb4 7ae6 	vcmpe.f32	s14, s13
    e078:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    e07c:	dd20      	ble.n	e0c0 <dLdy1_QOID_Norm1+0xd0>
        if (y1[i] > y4[i])
    e07e:	ecf3 6a01 	vldmia	r3!, {s13}
    e082:	eeb4 7ae6 	vcmpe.f32	s14, s13
    e086:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
            sum += term;
    e08a:	ee77 7a85 	vadd.f32	s15, s15, s10
        if (y1[i] > y4[i])
    e08e:	dd21      	ble.n	e0d4 <dLdy1_QOID_Norm1+0xe4>
            sum += term;
    e090:	ee77 7aa5 	vadd.f32	s15, s15, s11
    for (int i = 0; i < output_size; i++)  {
    e094:	42a6      	cmp	r6, r4
        else if (y1[i] < y4[i])
            sum -= term;

        output[i] = sum;
    e096:	ece5 7a01 	vstmia	r5!, {s15}
    for (int i = 0; i < output_size; i++)  {
    e09a:	d022      	beq.n	e0e2 <dLdy1_QOID_Norm1+0xf2>
        if (y1[i] > y2[i])
    e09c:	ecb4 7a01 	vldmia	r4!, {s14}
    e0a0:	ecf1 7a01 	vldmia	r1!, {s15}
    e0a4:	eeb4 7ae7 	vcmpe.f32	s14, s15
    e0a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    e0ac:	dddd      	ble.n	e06a <dLdy1_QOID_Norm1+0x7a>
        if (y1[i] > y3[i])
    e0ae:	ecf2 6a01 	vldmia	r2!, {s13}
    e0b2:	eeb4 7ae6 	vcmpe.f32	s14, s13
    e0b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
            sum += term;
    e0ba:	eef0 7a46 	vmov.f32	s15, s12
        if (y1[i] > y3[i])
    e0be:	dcde      	bgt.n	e07e <dLdy1_QOID_Norm1+0x8e>
        if (y1[i] > y4[i])
    e0c0:	ecf3 6a01 	vldmia	r3!, {s13}
    e0c4:	eeb4 7ae6 	vcmpe.f32	s14, s13
            sum -= term;
    e0c8:	bf48      	it	mi
    e0ca:	ee77 7ac5 	vsubmi.f32	s15, s15, s10
        if (y1[i] > y4[i])
    e0ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    e0d2:	dcdd      	bgt.n	e090 <dLdy1_QOID_Norm1+0xa0>
            sum -= term;
    e0d4:	bf48      	it	mi
    e0d6:	ee77 7ae5 	vsubmi.f32	s15, s15, s11
    for (int i = 0; i < output_size; i++)  {
    e0da:	42a6      	cmp	r6, r4
        output[i] = sum;
    e0dc:	ece5 7a01 	vstmia	r5!, {s15}
    for (int i = 0; i < output_size; i++)  {
    e0e0:	d1dc      	bne.n	e09c <dLdy1_QOID_Norm1+0xac>

    }

}
    e0e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            sum -= term;
    e0e6:	eef0 7a64 	vmov.f32	s15, s9
    e0ea:	e7c1      	b.n	e070 <dLdy1_QOID_Norm1+0x80>
    e0ec:	3ff00000 	.word	0x3ff00000
    e0f0:	10052600 	.word	0x10052600
    e0f4:	10052604 	.word	0x10052604
    e0f8:	33d6bf95 	.word	0x33d6bf95
    e0fc:	00000000 	.word	0x00000000

0000e100 <dLdy2_QOID_Norm1>:


void dLdy2_QOID_Norm1(my_type *y1, my_type *y2, my_type *y3, my_type *y4, my_type *output, int output_size)  {
    e100:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
    e104:	9e07      	ldr	r6, [sp, #28]

    // Intermediate variables for better readability
    my_type term, sum;

    // Calculate the 3 terms that arise from the derivative of the loss function
    for (int i = 0; i < output_size; i++)  {
    e106:	2e00      	cmp	r6, #0
    e108:	dd73      	ble.n	e1f2 <dLdy2_QOID_Norm1+0xf2>
    e10a:	4605      	mov	r5, r0

        sum = 0;

        // Term 1
        term = 1.0 / output_size;
    e10c:	4630      	mov	r0, r6
    e10e:	4614      	mov	r4, r2
    e110:	4689      	mov	r9, r1
    e112:	4698      	mov	r8, r3
    e114:	f7fe f996 	bl	c444 <__aeabi_i2d>
    e118:	4602      	mov	r2, r0
    e11a:	460b      	mov	r3, r1
    e11c:	2000      	movs	r0, #0
    e11e:	4937      	ldr	r1, [pc, #220]	; (e1fc <dLdy2_QOID_Norm1+0xfc>)
    e120:	f7fe fb24 	bl	c76c <__aeabi_ddiv>
    e124:	f7fe fc0a 	bl	c93c <__aeabi_d2f>
        else if (y2[i] < y1[i])
            sum -= term;

        // Term 2
        //term = -output_size / (sum_abs_y2y3 * sum_abs_y2y3);
        term = -1 / (output_size * (dist_y2y3+epsilon)*(dist_y2y3+epsilon));
    e128:	4a35      	ldr	r2, [pc, #212]	; (e200 <dLdy2_QOID_Norm1+0x100>)
        else if (y2[i] < y3[i])
            sum -= term;

        // Term 3
        //term = -output_size / (sum_abs_y2y4 * sum_abs_y2y4);
        term = -1 / (output_size * (dist_y2y4+epsilon)*(dist_y2y4+epsilon));
    e12a:	4b36      	ldr	r3, [pc, #216]	; (e204 <dLdy2_QOID_Norm1+0x104>)
        term = -1 / (output_size * (dist_y2y3+epsilon)*(dist_y2y3+epsilon));
    e12c:	eddf 6a36 	vldr	s13, [pc, #216]	; e208 <dLdy2_QOID_Norm1+0x108>
    e130:	ed92 7a00 	vldr	s14, [r2]
        term = -1 / (output_size * (dist_y2y4+epsilon)*(dist_y2y4+epsilon));
    e134:	edd3 7a00 	vldr	s15, [r3]
        term = -1 / (output_size * (dist_y2y3+epsilon)*(dist_y2y3+epsilon));
    e138:	ee37 7a26 	vadd.f32	s14, s14, s13
        term = -1 / (output_size * (dist_y2y4+epsilon)*(dist_y2y4+epsilon));
    e13c:	ee77 7aa6 	vadd.f32	s15, s15, s13
        term = -1 / (output_size * (dist_y2y3+epsilon)*(dist_y2y3+epsilon));
    e140:	ee06 6a90 	vmov	s13, r6
    e144:	ee27 7a07 	vmul.f32	s14, s14, s14
    e148:	eeb8 6ae6 	vcvt.f32.s32	s12, s13
        term = -1 / (output_size * (dist_y2y4+epsilon)*(dist_y2y4+epsilon));
    e14c:	ee67 7aa7 	vmul.f32	s15, s15, s15
        term = -1 / (output_size * (dist_y2y3+epsilon)*(dist_y2y3+epsilon));
    e150:	ee27 7a06 	vmul.f32	s14, s14, s12
        term = -1 / (output_size * (dist_y2y4+epsilon)*(dist_y2y4+epsilon));
    e154:	ee67 7a86 	vmul.f32	s15, s15, s12
        term = 1.0 / output_size;
    e158:	ee06 0a10 	vmov	s12, r0
        term = -1 / (output_size * (dist_y2y3+epsilon)*(dist_y2y3+epsilon));
    e15c:	eeff 6a00 	vmov.f32	s13, #240	; 0xbf800000 -1.0
    e160:	4622      	mov	r2, r4
    e162:	ee86 5a87 	vdiv.f32	s10, s13, s14
    e166:	9c06      	ldr	r4, [sp, #24]
    e168:	4649      	mov	r1, r9
    e16a:	4643      	mov	r3, r8
    e16c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
        term = -1 / (output_size * (dist_y2y4+epsilon)*(dist_y2y4+epsilon));
    e170:	eec6 5aa7 	vdiv.f32	s11, s13, s15
            sum -= term;
    e174:	eef1 4a46 	vneg.f32	s9, s12
    e178:	e018      	b.n	e1ac <dLdy2_QOID_Norm1+0xac>
        else if (y2[i] < y1[i])
    e17a:	d43c      	bmi.n	e1f6 <dLdy2_QOID_Norm1+0xf6>
        sum = 0;
    e17c:	eddf 7a23 	vldr	s15, [pc, #140]	; e20c <dLdy2_QOID_Norm1+0x10c>
        if (y2[i] > y3[i])
    e180:	ecf2 6a01 	vldmia	r2!, {s13}
    e184:	eeb4 7ae6 	vcmpe.f32	s14, s13
    e188:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    e18c:	dd20      	ble.n	e1d0 <dLdy2_QOID_Norm1+0xd0>
        if (y2[i] > y4[i])
    e18e:	ecf3 6a01 	vldmia	r3!, {s13}
    e192:	eeb4 7ae6 	vcmpe.f32	s14, s13
    e196:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
            sum += term;
    e19a:	ee77 7a85 	vadd.f32	s15, s15, s10
        if (y2[i] > y4[i])
    e19e:	dd21      	ble.n	e1e4 <dLdy2_QOID_Norm1+0xe4>
            sum += term;
    e1a0:	ee77 7aa5 	vadd.f32	s15, s15, s11
    for (int i = 0; i < output_size; i++)  {
    e1a4:	428e      	cmp	r6, r1
        else if (y2[i] < y4[i])
            sum -= term;

        output[i] = sum;
    e1a6:	ece4 7a01 	vstmia	r4!, {s15}
    for (int i = 0; i < output_size; i++)  {
    e1aa:	d022      	beq.n	e1f2 <dLdy2_QOID_Norm1+0xf2>
        if (y2[i] > y1[i])
    e1ac:	ecb1 7a01 	vldmia	r1!, {s14}
    e1b0:	ecf5 7a01 	vldmia	r5!, {s15}
    e1b4:	eeb4 7ae7 	vcmpe.f32	s14, s15
    e1b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    e1bc:	dddd      	ble.n	e17a <dLdy2_QOID_Norm1+0x7a>
        if (y2[i] > y3[i])
    e1be:	ecf2 6a01 	vldmia	r2!, {s13}
    e1c2:	eeb4 7ae6 	vcmpe.f32	s14, s13
    e1c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
            sum += term;
    e1ca:	eef0 7a46 	vmov.f32	s15, s12
        if (y2[i] > y3[i])
    e1ce:	dcde      	bgt.n	e18e <dLdy2_QOID_Norm1+0x8e>
        if (y2[i] > y4[i])
    e1d0:	ecf3 6a01 	vldmia	r3!, {s13}
    e1d4:	eeb4 7ae6 	vcmpe.f32	s14, s13
            sum -= term;
    e1d8:	bf48      	it	mi
    e1da:	ee77 7ac5 	vsubmi.f32	s15, s15, s10
        if (y2[i] > y4[i])
    e1de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    e1e2:	dcdd      	bgt.n	e1a0 <dLdy2_QOID_Norm1+0xa0>
            sum -= term;
    e1e4:	bf48      	it	mi
    e1e6:	ee77 7ae5 	vsubmi.f32	s15, s15, s11
    for (int i = 0; i < output_size; i++)  {
    e1ea:	428e      	cmp	r6, r1
        output[i] = sum;
    e1ec:	ece4 7a01 	vstmia	r4!, {s15}
    for (int i = 0; i < output_size; i++)  {
    e1f0:	d1dc      	bne.n	e1ac <dLdy2_QOID_Norm1+0xac>

    }

}
    e1f2:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
            sum -= term;
    e1f6:	eef0 7a64 	vmov.f32	s15, s9
    e1fa:	e7c1      	b.n	e180 <dLdy2_QOID_Norm1+0x80>
    e1fc:	3ff00000 	.word	0x3ff00000
    e200:	10052608 	.word	0x10052608
    e204:	1005260c 	.word	0x1005260c
    e208:	33d6bf95 	.word	0x33d6bf95
    e20c:	00000000 	.word	0x00000000

0000e210 <dLdy3_QOID_Norm1>:


void dLdy3_QOID_Norm1(my_type *y1, my_type *y2, my_type *y3, my_type *y4, my_type *output, int output_size)  {
    e210:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e214:	9e07      	ldr	r6, [sp, #28]

    // Intermediate variables for better readability
    my_type term, sum;

    // Calculate the 3 terms that arise from the derivative of the loss function
    for (int i = 0; i < output_size; i++)  {
    e216:	2e00      	cmp	r6, #0
    e218:	dd73      	ble.n	e302 <dLdy3_QOID_Norm1+0xf2>
    e21a:	4605      	mov	r5, r0

        sum = 0;

        // Term 1
        term = 1.0 / output_size;
    e21c:	4630      	mov	r0, r6
    e21e:	4690      	mov	r8, r2
    e220:	460c      	mov	r4, r1
    e222:	461f      	mov	r7, r3
    e224:	f7fe f90e 	bl	c444 <__aeabi_i2d>
    e228:	4602      	mov	r2, r0
    e22a:	460b      	mov	r3, r1
    e22c:	2000      	movs	r0, #0
    e22e:	4937      	ldr	r1, [pc, #220]	; (e30c <dLdy3_QOID_Norm1+0xfc>)
    e230:	f7fe fa9c 	bl	c76c <__aeabi_ddiv>
    e234:	f7fe fb82 	bl	c93c <__aeabi_d2f>
        else if (y3[i] < y4[i])
            sum -= term;

        // Term 2
        //term = -output_size / (sum_abs_y1y3 * sum_abs_y1y3);
        term = -1 / (output_size * (dist_y1y3+epsilon)*(dist_y1y3+epsilon));
    e238:	4a35      	ldr	r2, [pc, #212]	; (e310 <dLdy3_QOID_Norm1+0x100>)
        else if (y3[i] < y1[i])
            sum -= term;

        // Term 3
        //term = -output_size / (sum_abs_y2y3 * sum_abs_y2y3);
        term = -1 / (output_size * (dist_y2y3+epsilon)*(dist_y2y3+epsilon));
    e23a:	4b36      	ldr	r3, [pc, #216]	; (e314 <dLdy3_QOID_Norm1+0x104>)
        term = -1 / (output_size * (dist_y1y3+epsilon)*(dist_y1y3+epsilon));
    e23c:	eddf 6a36 	vldr	s13, [pc, #216]	; e318 <dLdy3_QOID_Norm1+0x108>
    e240:	ed92 7a00 	vldr	s14, [r2]
        term = -1 / (output_size * (dist_y2y3+epsilon)*(dist_y2y3+epsilon));
    e244:	edd3 7a00 	vldr	s15, [r3]
        term = -1 / (output_size * (dist_y1y3+epsilon)*(dist_y1y3+epsilon));
    e248:	ee37 7a26 	vadd.f32	s14, s14, s13
        term = -1 / (output_size * (dist_y2y3+epsilon)*(dist_y2y3+epsilon));
    e24c:	ee77 7aa6 	vadd.f32	s15, s15, s13
        term = -1 / (output_size * (dist_y1y3+epsilon)*(dist_y1y3+epsilon));
    e250:	ee06 6a90 	vmov	s13, r6
    e254:	ee27 7a07 	vmul.f32	s14, s14, s14
    e258:	eeb8 6ae6 	vcvt.f32.s32	s12, s13
        term = -1 / (output_size * (dist_y2y3+epsilon)*(dist_y2y3+epsilon));
    e25c:	ee67 7aa7 	vmul.f32	s15, s15, s15
        term = -1 / (output_size * (dist_y1y3+epsilon)*(dist_y1y3+epsilon));
    e260:	ee27 7a06 	vmul.f32	s14, s14, s12
        term = -1 / (output_size * (dist_y2y3+epsilon)*(dist_y2y3+epsilon));
    e264:	ee67 7a86 	vmul.f32	s15, s15, s12
        term = 1.0 / output_size;
    e268:	ee06 0a10 	vmov	s12, r0
        term = -1 / (output_size * (dist_y1y3+epsilon)*(dist_y1y3+epsilon));
    e26c:	eeff 6a00 	vmov.f32	s13, #240	; 0xbf800000 -1.0
    e270:	4621      	mov	r1, r4
    e272:	ee86 5a87 	vdiv.f32	s10, s13, s14
    e276:	9c06      	ldr	r4, [sp, #24]
    e278:	4642      	mov	r2, r8
    e27a:	463b      	mov	r3, r7
    e27c:	eb08 0686 	add.w	r6, r8, r6, lsl #2
        term = -1 / (output_size * (dist_y2y3+epsilon)*(dist_y2y3+epsilon));
    e280:	eec6 5aa7 	vdiv.f32	s11, s13, s15
            sum -= term;
    e284:	eef1 4a46 	vneg.f32	s9, s12
    e288:	e018      	b.n	e2bc <dLdy3_QOID_Norm1+0xac>
        else if (y3[i] < y4[i])
    e28a:	d43c      	bmi.n	e306 <dLdy3_QOID_Norm1+0xf6>
        sum = 0;
    e28c:	eddf 7a23 	vldr	s15, [pc, #140]	; e31c <dLdy3_QOID_Norm1+0x10c>
        if (y3[i] > y1[i])
    e290:	ecf5 6a01 	vldmia	r5!, {s13}
    e294:	eeb4 7ae6 	vcmpe.f32	s14, s13
    e298:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    e29c:	dd20      	ble.n	e2e0 <dLdy3_QOID_Norm1+0xd0>
        if (y3[i] > y2[i])
    e29e:	ecf1 6a01 	vldmia	r1!, {s13}
    e2a2:	eeb4 7ae6 	vcmpe.f32	s14, s13
    e2a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
            sum += term;
    e2aa:	ee77 7a85 	vadd.f32	s15, s15, s10
        if (y3[i] > y2[i])
    e2ae:	dd21      	ble.n	e2f4 <dLdy3_QOID_Norm1+0xe4>
            sum += term;
    e2b0:	ee77 7aa5 	vadd.f32	s15, s15, s11
    for (int i = 0; i < output_size; i++)  {
    e2b4:	4296      	cmp	r6, r2
        else if (y3[i] < y2[i])
            sum -= term;

        output[i] = sum;
    e2b6:	ece4 7a01 	vstmia	r4!, {s15}
    for (int i = 0; i < output_size; i++)  {
    e2ba:	d022      	beq.n	e302 <dLdy3_QOID_Norm1+0xf2>
        if (y3[i] > y4[i])
    e2bc:	ecb2 7a01 	vldmia	r2!, {s14}
    e2c0:	ecf3 7a01 	vldmia	r3!, {s15}
    e2c4:	eeb4 7ae7 	vcmpe.f32	s14, s15
    e2c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    e2cc:	dddd      	ble.n	e28a <dLdy3_QOID_Norm1+0x7a>
        if (y3[i] > y1[i])
    e2ce:	ecf5 6a01 	vldmia	r5!, {s13}
    e2d2:	eeb4 7ae6 	vcmpe.f32	s14, s13
    e2d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
            sum += term;
    e2da:	eef0 7a46 	vmov.f32	s15, s12
        if (y3[i] > y1[i])
    e2de:	dcde      	bgt.n	e29e <dLdy3_QOID_Norm1+0x8e>
        if (y3[i] > y2[i])
    e2e0:	ecf1 6a01 	vldmia	r1!, {s13}
    e2e4:	eeb4 7ae6 	vcmpe.f32	s14, s13
            sum -= term;
    e2e8:	bf48      	it	mi
    e2ea:	ee77 7ac5 	vsubmi.f32	s15, s15, s10
        if (y3[i] > y2[i])
    e2ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    e2f2:	dcdd      	bgt.n	e2b0 <dLdy3_QOID_Norm1+0xa0>
            sum -= term;
    e2f4:	bf48      	it	mi
    e2f6:	ee77 7ae5 	vsubmi.f32	s15, s15, s11
    for (int i = 0; i < output_size; i++)  {
    e2fa:	4296      	cmp	r6, r2
        output[i] = sum;
    e2fc:	ece4 7a01 	vstmia	r4!, {s15}
    for (int i = 0; i < output_size; i++)  {
    e300:	d1dc      	bne.n	e2bc <dLdy3_QOID_Norm1+0xac>

    }

}
    e302:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            sum -= term;
    e306:	eef0 7a64 	vmov.f32	s15, s9
    e30a:	e7c1      	b.n	e290 <dLdy3_QOID_Norm1+0x80>
    e30c:	3ff00000 	.word	0x3ff00000
    e310:	10052600 	.word	0x10052600
    e314:	10052608 	.word	0x10052608
    e318:	33d6bf95 	.word	0x33d6bf95
    e31c:	00000000 	.word	0x00000000

0000e320 <dLdy4_QOID_Norm1>:


void dLdy4_QOID_Norm1(my_type *y1, my_type *y2, my_type *y3, my_type *y4, my_type *output, int output_size)  {
    e320:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
    e324:	9e07      	ldr	r6, [sp, #28]

    // Intermediate variables for better readability
    my_type term, sum;

    // Calculate the 3 terms that arise from the derivative of the loss function
    for (int i = 0; i < output_size; i++)  {
    e326:	2e00      	cmp	r6, #0
    e328:	dd73      	ble.n	e412 <dLdy4_QOID_Norm1+0xf2>
    e32a:	4605      	mov	r5, r0

        sum = 0;

        // Term 1
        term = 1.0 / output_size;
    e32c:	4630      	mov	r0, r6
    e32e:	461c      	mov	r4, r3
    e330:	4691      	mov	r9, r2
    e332:	4688      	mov	r8, r1
    e334:	f7fe f886 	bl	c444 <__aeabi_i2d>
    e338:	4602      	mov	r2, r0
    e33a:	460b      	mov	r3, r1
    e33c:	2000      	movs	r0, #0
    e33e:	4937      	ldr	r1, [pc, #220]	; (e41c <dLdy4_QOID_Norm1+0xfc>)
    e340:	f7fe fa14 	bl	c76c <__aeabi_ddiv>
    e344:	f7fe fafa 	bl	c93c <__aeabi_d2f>
        else if (y4[i] < y3[i])
            sum -= term;

        // Term 2
        //term = -output_size / (sum_abs_y1y4 * sum_abs_y1y4);
        term = -1 / (output_size * (dist_y1y4+epsilon)*(dist_y1y4+epsilon));
    e348:	4a35      	ldr	r2, [pc, #212]	; (e420 <dLdy4_QOID_Norm1+0x100>)
        else if (y4[i] < y1[i])
            sum -= term;

        // Term 3
        //term = -output_size / (sum_abs_y2y4 * sum_abs_y2y4);
        term = -1 / (output_size * (dist_y2y4+epsilon)*(dist_y2y4+epsilon));
    e34a:	4b36      	ldr	r3, [pc, #216]	; (e424 <dLdy4_QOID_Norm1+0x104>)
        term = -1 / (output_size * (dist_y1y4+epsilon)*(dist_y1y4+epsilon));
    e34c:	eddf 6a36 	vldr	s13, [pc, #216]	; e428 <dLdy4_QOID_Norm1+0x108>
    e350:	ed92 7a00 	vldr	s14, [r2]
        term = -1 / (output_size * (dist_y2y4+epsilon)*(dist_y2y4+epsilon));
    e354:	edd3 7a00 	vldr	s15, [r3]
        term = -1 / (output_size * (dist_y1y4+epsilon)*(dist_y1y4+epsilon));
    e358:	ee37 7a26 	vadd.f32	s14, s14, s13
        term = -1 / (output_size * (dist_y2y4+epsilon)*(dist_y2y4+epsilon));
    e35c:	ee77 7aa6 	vadd.f32	s15, s15, s13
        term = -1 / (output_size * (dist_y1y4+epsilon)*(dist_y1y4+epsilon));
    e360:	ee06 6a90 	vmov	s13, r6
    e364:	ee27 7a07 	vmul.f32	s14, s14, s14
    e368:	eeb8 6ae6 	vcvt.f32.s32	s12, s13
        term = -1 / (output_size * (dist_y2y4+epsilon)*(dist_y2y4+epsilon));
    e36c:	ee67 7aa7 	vmul.f32	s15, s15, s15
        term = -1 / (output_size * (dist_y1y4+epsilon)*(dist_y1y4+epsilon));
    e370:	ee27 7a06 	vmul.f32	s14, s14, s12
        term = -1 / (output_size * (dist_y2y4+epsilon)*(dist_y2y4+epsilon));
    e374:	ee67 7a86 	vmul.f32	s15, s15, s12
        term = 1.0 / output_size;
    e378:	ee06 0a10 	vmov	s12, r0
        term = -1 / (output_size * (dist_y1y4+epsilon)*(dist_y1y4+epsilon));
    e37c:	eeff 6a00 	vmov.f32	s13, #240	; 0xbf800000 -1.0
    e380:	4623      	mov	r3, r4
    e382:	eb04 0686 	add.w	r6, r4, r6, lsl #2
    e386:	ee86 5a87 	vdiv.f32	s10, s13, s14
    e38a:	9c06      	ldr	r4, [sp, #24]
    e38c:	464a      	mov	r2, r9
    e38e:	4641      	mov	r1, r8
        term = -1 / (output_size * (dist_y2y4+epsilon)*(dist_y2y4+epsilon));
    e390:	eec6 5aa7 	vdiv.f32	s11, s13, s15
            sum -= term;
    e394:	eef1 4a46 	vneg.f32	s9, s12
    e398:	e018      	b.n	e3cc <dLdy4_QOID_Norm1+0xac>
        else if (y4[i] < y3[i])
    e39a:	d43c      	bmi.n	e416 <dLdy4_QOID_Norm1+0xf6>
        sum = 0;
    e39c:	eddf 7a23 	vldr	s15, [pc, #140]	; e42c <dLdy4_QOID_Norm1+0x10c>
        if (y4[i] > y1[i])
    e3a0:	ecf5 6a01 	vldmia	r5!, {s13}
    e3a4:	eeb4 7ae6 	vcmpe.f32	s14, s13
    e3a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    e3ac:	dd20      	ble.n	e3f0 <dLdy4_QOID_Norm1+0xd0>
        if (y4[i] > y2[i])
    e3ae:	ecf1 6a01 	vldmia	r1!, {s13}
    e3b2:	eeb4 7ae6 	vcmpe.f32	s14, s13
    e3b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
            sum += term;
    e3ba:	ee77 7a85 	vadd.f32	s15, s15, s10
        if (y4[i] > y2[i])
    e3be:	dd21      	ble.n	e404 <dLdy4_QOID_Norm1+0xe4>
            sum += term;
    e3c0:	ee77 7aa5 	vadd.f32	s15, s15, s11
    for (int i = 0; i < output_size; i++)  {
    e3c4:	429e      	cmp	r6, r3
        else if (y4[i] < y2[i])
            sum -= term;

        output[i] = sum;
    e3c6:	ece4 7a01 	vstmia	r4!, {s15}
    for (int i = 0; i < output_size; i++)  {
    e3ca:	d022      	beq.n	e412 <dLdy4_QOID_Norm1+0xf2>
        if (y4[i] > y3[i])
    e3cc:	ecb3 7a01 	vldmia	r3!, {s14}
    e3d0:	ecf2 7a01 	vldmia	r2!, {s15}
    e3d4:	eeb4 7ae7 	vcmpe.f32	s14, s15
    e3d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    e3dc:	dddd      	ble.n	e39a <dLdy4_QOID_Norm1+0x7a>
        if (y4[i] > y1[i])
    e3de:	ecf5 6a01 	vldmia	r5!, {s13}
    e3e2:	eeb4 7ae6 	vcmpe.f32	s14, s13
    e3e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
            sum += term;
    e3ea:	eef0 7a46 	vmov.f32	s15, s12
        if (y4[i] > y1[i])
    e3ee:	dcde      	bgt.n	e3ae <dLdy4_QOID_Norm1+0x8e>
        if (y4[i] > y2[i])
    e3f0:	ecf1 6a01 	vldmia	r1!, {s13}
    e3f4:	eeb4 7ae6 	vcmpe.f32	s14, s13
            sum -= term;
    e3f8:	bf48      	it	mi
    e3fa:	ee77 7ac5 	vsubmi.f32	s15, s15, s10
        if (y4[i] > y2[i])
    e3fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    e402:	dcdd      	bgt.n	e3c0 <dLdy4_QOID_Norm1+0xa0>
            sum -= term;
    e404:	bf48      	it	mi
    e406:	ee77 7ae5 	vsubmi.f32	s15, s15, s11
    for (int i = 0; i < output_size; i++)  {
    e40a:	429e      	cmp	r6, r3
        output[i] = sum;
    e40c:	ece4 7a01 	vstmia	r4!, {s15}
    for (int i = 0; i < output_size; i++)  {
    e410:	d1dc      	bne.n	e3cc <dLdy4_QOID_Norm1+0xac>

    }

}
    e412:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
            sum -= term;
    e416:	eef0 7a64 	vmov.f32	s15, s9
    e41a:	e7c1      	b.n	e3a0 <dLdy4_QOID_Norm1+0x80>
    e41c:	3ff00000 	.word	0x3ff00000
    e420:	10052604 	.word	0x10052604
    e424:	1005260c 	.word	0x1005260c
    e428:	33d6bf95 	.word	0x33d6bf95
    e42c:	00000000 	.word	0x00000000

0000e430 <scalar_by_vector_mul>:
#include <stdbool.h>


void scalar_by_vector_mul(my_type alpha, my_type *vec, my_type *output, int size)    {

    for (int i = 0; i < size; i++)  {
    e430:	2a00      	cmp	r2, #0
    e432:	dd09      	ble.n	e448 <scalar_by_vector_mul+0x18>
    e434:	eb00 0282 	add.w	r2, r0, r2, lsl #2

        output[i] = alpha * vec[i];
    e438:	ecf0 7a01 	vldmia	r0!, {s15}
    e43c:	ee67 7a80 	vmul.f32	s15, s15, s0
    for (int i = 0; i < size; i++)  {
    e440:	4282      	cmp	r2, r0
        output[i] = alpha * vec[i];
    e442:	ece1 7a01 	vstmia	r1!, {s15}
    for (int i = 0; i < size; i++)  {
    e446:	d1f7      	bne.n	e438 <scalar_by_vector_mul+0x8>

    }

}
    e448:	4770      	bx	lr
    e44a:	bf00      	nop

0000e44c <vector_by_vector_mul>:

my_type vector_by_vector_mul(my_type *vec1, my_type *vec2, int size)    {

    my_type sum = 0;

    for (int i = 0; i < size; i++)  {
    e44c:	2a00      	cmp	r2, #0
    my_type sum = 0;
    e44e:	ed9f 0a07 	vldr	s0, [pc, #28]	; e46c <vector_by_vector_mul+0x20>
    for (int i = 0; i < size; i++)  {
    e452:	dd0a      	ble.n	e46a <vector_by_vector_mul+0x1e>
    e454:	eb00 0282 	add.w	r2, r0, r2, lsl #2

        sum += vec1[i] * vec2[i];
    e458:	ecb0 7a01 	vldmia	r0!, {s14}
    e45c:	ecf1 7a01 	vldmia	r1!, {s15}
    for (int i = 0; i < size; i++)  {
    e460:	4282      	cmp	r2, r0
        sum += vec1[i] * vec2[i];
    e462:	eea7 0a27 	vfma.f32	s0, s14, s15
    for (int i = 0; i < size; i++)  {
    e466:	d1f7      	bne.n	e458 <vector_by_vector_mul+0xc>
    e468:	4770      	bx	lr

    }

    return sum;
}
    e46a:	4770      	bx	lr
    e46c:	00000000 	.word	0x00000000

0000e470 <vector_by_vector_mul_elementwise>:


void vector_by_vector_mul_elementwise(my_type *vec1, my_type *vec2, my_type *vec_out, int size) {

    for (int i = 0; i < size; i++)  {
    e470:	2b00      	cmp	r3, #0
    e472:	dd0b      	ble.n	e48c <vector_by_vector_mul_elementwise+0x1c>
    e474:	eb00 0383 	add.w	r3, r0, r3, lsl #2

        vec_out[i] = vec1[i] * vec2[i];
    e478:	ecf0 7a01 	vldmia	r0!, {s15}
    e47c:	ecb1 7a01 	vldmia	r1!, {s14}
    e480:	ee67 7a87 	vmul.f32	s15, s15, s14
    for (int i = 0; i < size; i++)  {
    e484:	4283      	cmp	r3, r0
        vec_out[i] = vec1[i] * vec2[i];
    e486:	ece2 7a01 	vstmia	r2!, {s15}
    for (int i = 0; i < size; i++)  {
    e48a:	d1f5      	bne.n	e478 <vector_by_vector_mul_elementwise+0x8>

    }

}
    e48c:	4770      	bx	lr
    e48e:	bf00      	nop

0000e490 <vector_by_vector_div_elementwise>:


void vector_by_vector_div_elementwise(my_type *vec1, my_type *vec2, my_type *vec_out, int size, my_type epsilon) {

    for (int i = 0; i < size; i++)  {
    e490:	2b00      	cmp	r3, #0
    e492:	dd0d      	ble.n	e4b0 <vector_by_vector_div_elementwise+0x20>
    e494:	eb00 0383 	add.w	r3, r0, r3, lsl #2

        vec_out[i] = vec1[i] / (vec2[i] + epsilon);
    e498:	ecf1 7a01 	vldmia	r1!, {s15}
    e49c:	ecf0 6a01 	vldmia	r0!, {s13}
    e4a0:	ee77 7a80 	vadd.f32	s15, s15, s0
    for (int i = 0; i < size; i++)  {
    e4a4:	4283      	cmp	r3, r0
        vec_out[i] = vec1[i] / (vec2[i] + epsilon);
    e4a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
    e4aa:	eca2 7a01 	vstmia	r2!, {s14}
    for (int i = 0; i < size; i++)  {
    e4ae:	d1f3      	bne.n	e498 <vector_by_vector_div_elementwise+0x8>

    }

}
    e4b0:	4770      	bx	lr
    e4b2:	bf00      	nop

0000e4b4 <vector_sqrt>:


void vector_sqrt(my_type *vec, int size)   {

    for (int i = 0; i < size; i++)  {
    e4b4:	2900      	cmp	r1, #0
    e4b6:	dd09      	ble.n	e4cc <vector_sqrt+0x18>
    e4b8:	eb00 0181 	add.w	r1, r0, r1, lsl #2

        #ifdef FLOATS
        vec[i] = sqrtf(vec[i]);
    e4bc:	ed90 7a00 	vldr	s14, [r0]
    e4c0:	eef1 7ac7 	vsqrt.f32	s15, s14
    e4c4:	ece0 7a01 	vstmia	r0!, {s15}
    for (int i = 0; i < size; i++)  {
    e4c8:	4281      	cmp	r1, r0
    e4ca:	d1f7      	bne.n	e4bc <vector_sqrt+0x8>
        vec[i] = sqrtl(vec[i]);
        #endif

    }

}
    e4cc:	4770      	bx	lr
    e4ce:	bf00      	nop

0000e4d0 <Sum_Abs_Diff>:

my_type Sum_Abs_Diff(my_type *vec1, my_type *vec2, int size)  {

    my_type sum = 0;

    for (int i = 0; i < size; i++)  {
    e4d0:	2a00      	cmp	r2, #0
    my_type sum = 0;
    e4d2:	ed9f 0a09 	vldr	s0, [pc, #36]	; e4f8 <Sum_Abs_Diff+0x28>
    for (int i = 0; i < size; i++)  {
    e4d6:	dd0e      	ble.n	e4f6 <Sum_Abs_Diff+0x26>
    e4d8:	eb00 0282 	add.w	r2, r0, r2, lsl #2

        sum += ABS(vec1[i] - vec2[i]);
    e4dc:	ecf0 7a01 	vldmia	r0!, {s15}
    e4e0:	ecb1 7a01 	vldmia	r1!, {s14}
    e4e4:	ee77 7ac7 	vsub.f32	s15, s15, s14
    for (int i = 0; i < size; i++)  {
    e4e8:	4282      	cmp	r2, r0
        sum += ABS(vec1[i] - vec2[i]);
    e4ea:	eef0 7ae7 	vabs.f32	s15, s15
    e4ee:	ee30 0a27 	vadd.f32	s0, s0, s15
    for (int i = 0; i < size; i++)  {
    e4f2:	d1f3      	bne.n	e4dc <Sum_Abs_Diff+0xc>
    e4f4:	4770      	bx	lr

    }

    return sum;

}
    e4f6:	4770      	bx	lr
    e4f8:	00000000 	.word	0x00000000

0000e4fc <am_bsp_low_power_init>:
    e4fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    e4fe:	f000 fd6d 	bl	efdc <am_hal_pwrctrl_low_power_init>
    e502:	f000 fe35 	bl	f170 <am_hal_rtc_osc_disable>
    e506:	4b0b      	ldr	r3, [pc, #44]	; (e534 <am_bsp_low_power_init+0x38>)
    e508:	4f0b      	ldr	r7, [pc, #44]	; (e538 <am_bsp_low_power_init+0x3c>)
    e50a:	681e      	ldr	r6, [r3, #0]
    e50c:	2400      	movs	r4, #0
    e50e:	f857 5034 	ldr.w	r5, [r7, r4, lsl #3]
    e512:	4631      	mov	r1, r6
    e514:	4628      	mov	r0, r5
    e516:	f000 faa5 	bl	ea64 <am_hal_gpio_pinconfig>
    e51a:	2103      	movs	r1, #3
    e51c:	4628      	mov	r0, r5
    e51e:	f000 fbd7 	bl	ecd0 <am_hal_gpio_state_write>
    e522:	3401      	adds	r4, #1
    e524:	2100      	movs	r1, #0
    e526:	4628      	mov	r0, r5
    e528:	f000 fbd2 	bl	ecd0 <am_hal_gpio_state_write>
    e52c:	2c05      	cmp	r4, #5
    e52e:	d1ee      	bne.n	e50e <am_bsp_low_power_init+0x12>
    e530:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    e532:	bf00      	nop
    e534:	00017364 	.word	0x00017364
    e538:	10007518 	.word	0x10007518

0000e53c <am_hal_cachectrl_config>:
    e53c:	b530      	push	{r4, r5, lr}
    e53e:	b083      	sub	sp, #12
    e540:	4604      	mov	r4, r0
    e542:	f000 fc47 	bl	edd4 <am_hal_interrupt_master_disable>
    e546:	4d0e      	ldr	r5, [pc, #56]	; (e580 <am_hal_cachectrl_config+0x44>)
    e548:	9001      	str	r0, [sp, #4]
    e54a:	682b      	ldr	r3, [r5, #0]
    e54c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    e550:	602b      	str	r3, [r5, #0]
    e552:	9801      	ldr	r0, [sp, #4]
    e554:	f000 fc42 	bl	eddc <am_hal_interrupt_master_set>
    e558:	7863      	ldrb	r3, [r4, #1]
    e55a:	7822      	ldrb	r2, [r4, #0]
    e55c:	78a1      	ldrb	r1, [r4, #2]
    e55e:	021b      	lsls	r3, r3, #8
    e560:	f403 7340 	and.w	r3, r3, #768	; 0x300
    e564:	0112      	lsls	r2, r2, #4
    e566:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
    e56a:	b2d2      	uxtb	r2, r2
    e56c:	4313      	orrs	r3, r2
    e56e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
    e572:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
    e576:	2000      	movs	r0, #0
    e578:	602b      	str	r3, [r5, #0]
    e57a:	b003      	add	sp, #12
    e57c:	bd30      	pop	{r4, r5, pc}
    e57e:	bf00      	nop
    e580:	40018000 	.word	0x40018000

0000e584 <am_hal_cachectrl_enable>:
    e584:	4a03      	ldr	r2, [pc, #12]	; (e594 <am_hal_cachectrl_enable+0x10>)
    e586:	6813      	ldr	r3, [r2, #0]
    e588:	f043 0301 	orr.w	r3, r3, #1
    e58c:	2000      	movs	r0, #0
    e58e:	6013      	str	r3, [r2, #0]
    e590:	4770      	bx	lr
    e592:	bf00      	nop
    e594:	40018000 	.word	0x40018000

0000e598 <am_hal_cachectrl_control>:
    e598:	b510      	push	{r4, lr}
    e59a:	3801      	subs	r0, #1
    e59c:	b08e      	sub	sp, #56	; 0x38
    e59e:	2810      	cmp	r0, #16
    e5a0:	f200 815e 	bhi.w	e860 <am_hal_cachectrl_control+0x2c8>
    e5a4:	e8df f010 	tbh	[pc, r0, lsl #1]
    e5a8:	00360018 	.word	0x00360018
    e5ac:	0040003d 	.word	0x0040003d
    e5b0:	00450043 	.word	0x00450043
    e5b4:	0011001a 	.word	0x0011001a
    e5b8:	00540047 	.word	0x00540047
    e5bc:	009a0061 	.word	0x009a0061
    e5c0:	010c00d3 	.word	0x010c00d3
    e5c4:	013f0126 	.word	0x013f0126
    e5c8:	001d      	.short	0x001d
    e5ca:	f44f 7300 	mov.w	r3, #512	; 0x200
    e5ce:	4aac      	ldr	r2, [pc, #688]	; (e880 <am_hal_cachectrl_control+0x2e8>)
    e5d0:	2000      	movs	r0, #0
    e5d2:	6093      	str	r3, [r2, #8]
    e5d4:	b00e      	add	sp, #56	; 0x38
    e5d6:	bd10      	pop	{r4, pc}
    e5d8:	2301      	movs	r3, #1
    e5da:	e7f8      	b.n	e5ce <am_hal_cachectrl_control+0x36>
    e5dc:	f44f 6380 	mov.w	r3, #1024	; 0x400
    e5e0:	e7f5      	b.n	e5ce <am_hal_cachectrl_control+0x36>
    e5e2:	2900      	cmp	r1, #0
    e5e4:	f000 813c 	beq.w	e860 <am_hal_cachectrl_control+0x2c8>
    e5e8:	684a      	ldr	r2, [r1, #4]
    e5ea:	48a6      	ldr	r0, [pc, #664]	; (e884 <am_hal_cachectrl_control+0x2ec>)
    e5ec:	4202      	tst	r2, r0
    e5ee:	f040 8137 	bne.w	e860 <am_hal_cachectrl_control+0x2c8>
    e5f2:	688b      	ldr	r3, [r1, #8]
    e5f4:	4018      	ands	r0, r3
    e5f6:	f040 8133 	bne.w	e860 <am_hal_cachectrl_control+0x2c8>
    e5fa:	780c      	ldrb	r4, [r1, #0]
    e5fc:	2c00      	cmp	r4, #0
    e5fe:	f040 8133 	bne.w	e868 <am_hal_cachectrl_control+0x2d0>
    e602:	4c9f      	ldr	r4, [pc, #636]	; (e880 <am_hal_cachectrl_control+0x2e8>)
    e604:	7849      	ldrb	r1, [r1, #1]
    e606:	6122      	str	r2, [r4, #16]
    e608:	6163      	str	r3, [r4, #20]
    e60a:	6823      	ldr	r3, [r4, #0]
    e60c:	f361 0382 	bfi	r3, r1, #2, #1
    e610:	6023      	str	r3, [r4, #0]
    e612:	e7df      	b.n	e5d4 <am_hal_cachectrl_control+0x3c>
    e614:	4b9a      	ldr	r3, [pc, #616]	; (e880 <am_hal_cachectrl_control+0x2e8>)
    e616:	681b      	ldr	r3, [r3, #0]
    e618:	01db      	lsls	r3, r3, #7
    e61a:	f140 811f 	bpl.w	e85c <am_hal_cachectrl_control+0x2c4>
    e61e:	2302      	movs	r3, #2
    e620:	e7d5      	b.n	e5ce <am_hal_cachectrl_control+0x36>
    e622:	f44f 6388 	mov.w	r3, #1088	; 0x440
    e626:	e7d2      	b.n	e5ce <am_hal_cachectrl_control+0x36>
    e628:	f44f 7308 	mov.w	r3, #544	; 0x220
    e62c:	e7cf      	b.n	e5ce <am_hal_cachectrl_control+0x36>
    e62e:	2340      	movs	r3, #64	; 0x40
    e630:	e7cd      	b.n	e5ce <am_hal_cachectrl_control+0x36>
    e632:	2320      	movs	r3, #32
    e634:	e7cb      	b.n	e5ce <am_hal_cachectrl_control+0x36>
    e636:	f000 fbcd 	bl	edd4 <am_hal_interrupt_master_disable>
    e63a:	4a91      	ldr	r2, [pc, #580]	; (e880 <am_hal_cachectrl_control+0x2e8>)
    e63c:	9000      	str	r0, [sp, #0]
    e63e:	6813      	ldr	r3, [r2, #0]
    e640:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
    e644:	6013      	str	r3, [r2, #0]
    e646:	9800      	ldr	r0, [sp, #0]
    e648:	f000 fbc8 	bl	eddc <am_hal_interrupt_master_set>
    e64c:	2000      	movs	r0, #0
    e64e:	e7c1      	b.n	e5d4 <am_hal_cachectrl_control+0x3c>
    e650:	f000 fbc0 	bl	edd4 <am_hal_interrupt_master_disable>
    e654:	4a8a      	ldr	r2, [pc, #552]	; (e880 <am_hal_cachectrl_control+0x2e8>)
    e656:	9001      	str	r0, [sp, #4]
    e658:	6813      	ldr	r3, [r2, #0]
    e65a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
    e65e:	6013      	str	r3, [r2, #0]
    e660:	9801      	ldr	r0, [sp, #4]
    e662:	f000 fbbb 	bl	eddc <am_hal_interrupt_master_set>
    e666:	2000      	movs	r0, #0
    e668:	e7b4      	b.n	e5d4 <am_hal_cachectrl_control+0x3c>
    e66a:	f000 fbb3 	bl	edd4 <am_hal_interrupt_master_disable>
    e66e:	4603      	mov	r3, r0
    e670:	4885      	ldr	r0, [pc, #532]	; (e888 <am_hal_cachectrl_control+0x2f0>)
    e672:	9302      	str	r3, [sp, #8]
    e674:	f000 f9ec 	bl	ea50 <am_hal_flash_load_ui32>
    e678:	f420 507c 	bic.w	r0, r0, #16128	; 0x3f00
    e67c:	f440 61e0 	orr.w	r1, r0, #1792	; 0x700
    e680:	4881      	ldr	r0, [pc, #516]	; (e888 <am_hal_cachectrl_control+0x2f0>)
    e682:	f000 f9e9 	bl	ea58 <am_hal_flash_store_ui32>
    e686:	9802      	ldr	r0, [sp, #8]
    e688:	f000 fba8 	bl	eddc <am_hal_interrupt_master_set>
    e68c:	f000 fba2 	bl	edd4 <am_hal_interrupt_master_disable>
    e690:	4603      	mov	r3, r0
    e692:	487d      	ldr	r0, [pc, #500]	; (e888 <am_hal_cachectrl_control+0x2f0>)
    e694:	9303      	str	r3, [sp, #12]
    e696:	f000 f9db 	bl	ea50 <am_hal_flash_load_ui32>
    e69a:	f420 6077 	bic.w	r0, r0, #3952	; 0xf70
    e69e:	f440 61ee 	orr.w	r1, r0, #1904	; 0x770
    e6a2:	4879      	ldr	r0, [pc, #484]	; (e888 <am_hal_cachectrl_control+0x2f0>)
    e6a4:	f000 f9d8 	bl	ea58 <am_hal_flash_store_ui32>
    e6a8:	9803      	ldr	r0, [sp, #12]
    e6aa:	f000 fb97 	bl	eddc <am_hal_interrupt_master_set>
    e6ae:	f000 fb91 	bl	edd4 <am_hal_interrupt_master_disable>
    e6b2:	4603      	mov	r3, r0
    e6b4:	4874      	ldr	r0, [pc, #464]	; (e888 <am_hal_cachectrl_control+0x2f0>)
    e6b6:	9304      	str	r3, [sp, #16]
    e6b8:	f000 f9ca 	bl	ea50 <am_hal_flash_load_ui32>
    e6bc:	f420 6070 	bic.w	r0, r0, #3840	; 0xf00
    e6c0:	f020 000f 	bic.w	r0, r0, #15
    e6c4:	f440 61e0 	orr.w	r1, r0, #1792	; 0x700
    e6c8:	f041 0103 	orr.w	r1, r1, #3
    e6cc:	486e      	ldr	r0, [pc, #440]	; (e888 <am_hal_cachectrl_control+0x2f0>)
    e6ce:	f000 f9c3 	bl	ea58 <am_hal_flash_store_ui32>
    e6d2:	9804      	ldr	r0, [sp, #16]
    e6d4:	f000 fb82 	bl	eddc <am_hal_interrupt_master_set>
    e6d8:	2000      	movs	r0, #0
    e6da:	e77b      	b.n	e5d4 <am_hal_cachectrl_control+0x3c>
    e6dc:	f000 fb7a 	bl	edd4 <am_hal_interrupt_master_disable>
    e6e0:	4603      	mov	r3, r0
    e6e2:	4869      	ldr	r0, [pc, #420]	; (e888 <am_hal_cachectrl_control+0x2f0>)
    e6e4:	9305      	str	r3, [sp, #20]
    e6e6:	f000 f9b3 	bl	ea50 <am_hal_flash_load_ui32>
    e6ea:	f420 507c 	bic.w	r0, r0, #16128	; 0x3f00
    e6ee:	f440 51b8 	orr.w	r1, r0, #5888	; 0x1700
    e6f2:	4865      	ldr	r0, [pc, #404]	; (e888 <am_hal_cachectrl_control+0x2f0>)
    e6f4:	f000 f9b0 	bl	ea58 <am_hal_flash_store_ui32>
    e6f8:	9805      	ldr	r0, [sp, #20]
    e6fa:	f000 fb6f 	bl	eddc <am_hal_interrupt_master_set>
    e6fe:	f000 fb69 	bl	edd4 <am_hal_interrupt_master_disable>
    e702:	4603      	mov	r3, r0
    e704:	4860      	ldr	r0, [pc, #384]	; (e888 <am_hal_cachectrl_control+0x2f0>)
    e706:	9306      	str	r3, [sp, #24]
    e708:	f000 f9a2 	bl	ea50 <am_hal_flash_load_ui32>
    e70c:	f420 6077 	bic.w	r0, r0, #3952	; 0xf70
    e710:	f440 61ea 	orr.w	r1, r0, #1872	; 0x750
    e714:	485c      	ldr	r0, [pc, #368]	; (e888 <am_hal_cachectrl_control+0x2f0>)
    e716:	f000 f99f 	bl	ea58 <am_hal_flash_store_ui32>
    e71a:	9806      	ldr	r0, [sp, #24]
    e71c:	f000 fb5e 	bl	eddc <am_hal_interrupt_master_set>
    e720:	f000 fb58 	bl	edd4 <am_hal_interrupt_master_disable>
    e724:	4603      	mov	r3, r0
    e726:	4858      	ldr	r0, [pc, #352]	; (e888 <am_hal_cachectrl_control+0x2f0>)
    e728:	9307      	str	r3, [sp, #28]
    e72a:	f000 f991 	bl	ea50 <am_hal_flash_load_ui32>
    e72e:	f420 6070 	bic.w	r0, r0, #3840	; 0xf00
    e732:	f020 000f 	bic.w	r0, r0, #15
    e736:	f440 61e0 	orr.w	r1, r0, #1792	; 0x700
    e73a:	f041 0101 	orr.w	r1, r1, #1
    e73e:	4852      	ldr	r0, [pc, #328]	; (e888 <am_hal_cachectrl_control+0x2f0>)
    e740:	f000 f98a 	bl	ea58 <am_hal_flash_store_ui32>
    e744:	9807      	ldr	r0, [sp, #28]
    e746:	f000 fb49 	bl	eddc <am_hal_interrupt_master_set>
    e74a:	2000      	movs	r0, #0
    e74c:	e742      	b.n	e5d4 <am_hal_cachectrl_control+0x3c>
    e74e:	f000 fb41 	bl	edd4 <am_hal_interrupt_master_disable>
    e752:	4603      	mov	r3, r0
    e754:	484c      	ldr	r0, [pc, #304]	; (e888 <am_hal_cachectrl_control+0x2f0>)
    e756:	9308      	str	r3, [sp, #32]
    e758:	f000 f97a 	bl	ea50 <am_hal_flash_load_ui32>
    e75c:	f420 507c 	bic.w	r0, r0, #16128	; 0x3f00
    e760:	f440 51b8 	orr.w	r1, r0, #5888	; 0x1700
    e764:	4848      	ldr	r0, [pc, #288]	; (e888 <am_hal_cachectrl_control+0x2f0>)
    e766:	f000 f977 	bl	ea58 <am_hal_flash_store_ui32>
    e76a:	9808      	ldr	r0, [sp, #32]
    e76c:	f000 fb36 	bl	eddc <am_hal_interrupt_master_set>
    e770:	f000 fb30 	bl	edd4 <am_hal_interrupt_master_disable>
    e774:	4603      	mov	r3, r0
    e776:	4844      	ldr	r0, [pc, #272]	; (e888 <am_hal_cachectrl_control+0x2f0>)
    e778:	9309      	str	r3, [sp, #36]	; 0x24
    e77a:	f000 f969 	bl	ea50 <am_hal_flash_load_ui32>
    e77e:	f420 6077 	bic.w	r0, r0, #3952	; 0xf70
    e782:	f440 61ec 	orr.w	r1, r0, #1888	; 0x760
    e786:	4840      	ldr	r0, [pc, #256]	; (e888 <am_hal_cachectrl_control+0x2f0>)
    e788:	f000 f966 	bl	ea58 <am_hal_flash_store_ui32>
    e78c:	9809      	ldr	r0, [sp, #36]	; 0x24
    e78e:	f000 fb25 	bl	eddc <am_hal_interrupt_master_set>
    e792:	f000 fb1f 	bl	edd4 <am_hal_interrupt_master_disable>
    e796:	4603      	mov	r3, r0
    e798:	483b      	ldr	r0, [pc, #236]	; (e888 <am_hal_cachectrl_control+0x2f0>)
    e79a:	930a      	str	r3, [sp, #40]	; 0x28
    e79c:	f000 f958 	bl	ea50 <am_hal_flash_load_ui32>
    e7a0:	f420 6070 	bic.w	r0, r0, #3840	; 0xf00
    e7a4:	f020 000f 	bic.w	r0, r0, #15
    e7a8:	f440 61e0 	orr.w	r1, r0, #1792	; 0x700
    e7ac:	f041 0101 	orr.w	r1, r1, #1
    e7b0:	4835      	ldr	r0, [pc, #212]	; (e888 <am_hal_cachectrl_control+0x2f0>)
    e7b2:	f000 f951 	bl	ea58 <am_hal_flash_store_ui32>
    e7b6:	980a      	ldr	r0, [sp, #40]	; 0x28
    e7b8:	f000 fb10 	bl	eddc <am_hal_interrupt_master_set>
    e7bc:	2000      	movs	r0, #0
    e7be:	e709      	b.n	e5d4 <am_hal_cachectrl_control+0x3c>
    e7c0:	2900      	cmp	r1, #0
    e7c2:	d04d      	beq.n	e860 <am_hal_cachectrl_control+0x2c8>
    e7c4:	680c      	ldr	r4, [r1, #0]
    e7c6:	2c03      	cmp	r4, #3
    e7c8:	d84c      	bhi.n	e864 <am_hal_cachectrl_control+0x2cc>
    e7ca:	f000 fb03 	bl	edd4 <am_hal_interrupt_master_disable>
    e7ce:	4603      	mov	r3, r0
    e7d0:	482d      	ldr	r0, [pc, #180]	; (e888 <am_hal_cachectrl_control+0x2f0>)
    e7d2:	930b      	str	r3, [sp, #44]	; 0x2c
    e7d4:	f000 f93c 	bl	ea50 <am_hal_flash_load_ui32>
    e7d8:	f420 507c 	bic.w	r0, r0, #16128	; 0x3f00
    e7dc:	ea40 3104 	orr.w	r1, r0, r4, lsl #12
    e7e0:	f441 61e0 	orr.w	r1, r1, #1792	; 0x700
    e7e4:	4828      	ldr	r0, [pc, #160]	; (e888 <am_hal_cachectrl_control+0x2f0>)
    e7e6:	f000 f937 	bl	ea58 <am_hal_flash_store_ui32>
    e7ea:	980b      	ldr	r0, [sp, #44]	; 0x2c
    e7ec:	f000 faf6 	bl	eddc <am_hal_interrupt_master_set>
    e7f0:	2000      	movs	r0, #0
    e7f2:	e6ef      	b.n	e5d4 <am_hal_cachectrl_control+0x3c>
    e7f4:	b3a1      	cbz	r1, e860 <am_hal_cachectrl_control+0x2c8>
    e7f6:	680c      	ldr	r4, [r1, #0]
    e7f8:	2c07      	cmp	r4, #7
    e7fa:	d833      	bhi.n	e864 <am_hal_cachectrl_control+0x2cc>
    e7fc:	f000 faea 	bl	edd4 <am_hal_interrupt_master_disable>
    e800:	4603      	mov	r3, r0
    e802:	4821      	ldr	r0, [pc, #132]	; (e888 <am_hal_cachectrl_control+0x2f0>)
    e804:	930c      	str	r3, [sp, #48]	; 0x30
    e806:	f000 f923 	bl	ea50 <am_hal_flash_load_ui32>
    e80a:	f420 6077 	bic.w	r0, r0, #3952	; 0xf70
    e80e:	ea40 1104 	orr.w	r1, r0, r4, lsl #4
    e812:	f441 61e0 	orr.w	r1, r1, #1792	; 0x700
    e816:	481c      	ldr	r0, [pc, #112]	; (e888 <am_hal_cachectrl_control+0x2f0>)
    e818:	f000 f91e 	bl	ea58 <am_hal_flash_store_ui32>
    e81c:	980c      	ldr	r0, [sp, #48]	; 0x30
    e81e:	f000 fadd 	bl	eddc <am_hal_interrupt_master_set>
    e822:	2000      	movs	r0, #0
    e824:	e6d6      	b.n	e5d4 <am_hal_cachectrl_control+0x3c>
    e826:	b1d9      	cbz	r1, e860 <am_hal_cachectrl_control+0x2c8>
    e828:	680c      	ldr	r4, [r1, #0]
    e82a:	2c0f      	cmp	r4, #15
    e82c:	d81a      	bhi.n	e864 <am_hal_cachectrl_control+0x2cc>
    e82e:	f000 fad1 	bl	edd4 <am_hal_interrupt_master_disable>
    e832:	4603      	mov	r3, r0
    e834:	4814      	ldr	r0, [pc, #80]	; (e888 <am_hal_cachectrl_control+0x2f0>)
    e836:	930d      	str	r3, [sp, #52]	; 0x34
    e838:	f000 f90a 	bl	ea50 <am_hal_flash_load_ui32>
    e83c:	f420 6070 	bic.w	r0, r0, #3840	; 0xf00
    e840:	f020 000f 	bic.w	r0, r0, #15
    e844:	ea40 0104 	orr.w	r1, r0, r4
    e848:	f441 61e0 	orr.w	r1, r1, #1792	; 0x700
    e84c:	480e      	ldr	r0, [pc, #56]	; (e888 <am_hal_cachectrl_control+0x2f0>)
    e84e:	f000 f903 	bl	ea58 <am_hal_flash_store_ui32>
    e852:	980d      	ldr	r0, [sp, #52]	; 0x34
    e854:	f000 fac2 	bl	eddc <am_hal_interrupt_master_set>
    e858:	2000      	movs	r0, #0
    e85a:	e6bb      	b.n	e5d4 <am_hal_cachectrl_control+0x3c>
    e85c:	2007      	movs	r0, #7
    e85e:	e6b9      	b.n	e5d4 <am_hal_cachectrl_control+0x3c>
    e860:	2006      	movs	r0, #6
    e862:	e6b7      	b.n	e5d4 <am_hal_cachectrl_control+0x3c>
    e864:	2001      	movs	r0, #1
    e866:	e6b5      	b.n	e5d4 <am_hal_cachectrl_control+0x3c>
    e868:	2c01      	cmp	r4, #1
    e86a:	d1f9      	bne.n	e860 <am_hal_cachectrl_control+0x2c8>
    e86c:	4c04      	ldr	r4, [pc, #16]	; (e880 <am_hal_cachectrl_control+0x2e8>)
    e86e:	7849      	ldrb	r1, [r1, #1]
    e870:	61a2      	str	r2, [r4, #24]
    e872:	61e3      	str	r3, [r4, #28]
    e874:	6823      	ldr	r3, [r4, #0]
    e876:	f361 03c3 	bfi	r3, r1, #3, #1
    e87a:	6023      	str	r3, [r4, #0]
    e87c:	e6aa      	b.n	e5d4 <am_hal_cachectrl_control+0x3c>
    e87e:	bf00      	nop
    e880:	40018000 	.word	0x40018000
    e884:	f800000f 	.word	0xf800000f
    e888:	40018004 	.word	0x40018004

0000e88c <am_hal_clkgen_control>:
    e88c:	4b49      	ldr	r3, [pc, #292]	; (e9b4 <am_hal_clkgen_control+0x128>)
    e88e:	681a      	ldr	r2, [r3, #0]
    e890:	b912      	cbnz	r2, e898 <am_hal_clkgen_control+0xc>
    e892:	4a49      	ldr	r2, [pc, #292]	; (e9b8 <am_hal_clkgen_control+0x12c>)
    e894:	6812      	ldr	r2, [r2, #0]
    e896:	601a      	str	r2, [r3, #0]
    e898:	2809      	cmp	r0, #9
    e89a:	f200 8089 	bhi.w	e9b0 <am_hal_clkgen_control+0x124>
    e89e:	e8df f000 	tbb	[pc, r0]
    e8a2:	160d      	.short	0x160d
    e8a4:	423a261e 	.word	0x423a261e
    e8a8:	055c544c 	.word	0x055c544c
    e8ac:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    e8b0:	2000      	movs	r0, #0
    e8b2:	6a1a      	ldr	r2, [r3, #32]
    e8b4:	f36f 0200 	bfc	r2, #0, #1
    e8b8:	621a      	str	r2, [r3, #32]
    e8ba:	4770      	bx	lr
    e8bc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    e8c0:	2200      	movs	r2, #0
    e8c2:	2147      	movs	r1, #71	; 0x47
    e8c4:	6159      	str	r1, [r3, #20]
    e8c6:	4610      	mov	r0, r2
    e8c8:	619a      	str	r2, [r3, #24]
    e8ca:	615a      	str	r2, [r3, #20]
    e8cc:	4770      	bx	lr
    e8ce:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    e8d2:	2000      	movs	r0, #0
    e8d4:	68da      	ldr	r2, [r3, #12]
    e8d6:	f36f 0200 	bfc	r2, #0, #1
    e8da:	60da      	str	r2, [r3, #12]
    e8dc:	4770      	bx	lr
    e8de:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    e8e2:	2000      	movs	r0, #0
    e8e4:	68da      	ldr	r2, [r3, #12]
    e8e6:	f36f 0241 	bfc	r2, #1, #1
    e8ea:	60da      	str	r2, [r3, #12]
    e8ec:	4770      	bx	lr
    e8ee:	4a33      	ldr	r2, [pc, #204]	; (e9bc <am_hal_clkgen_control+0x130>)
    e8f0:	68d3      	ldr	r3, [r2, #12]
    e8f2:	b2db      	uxtb	r3, r3
    e8f4:	2b21      	cmp	r3, #33	; 0x21
    e8f6:	d106      	bne.n	e906 <am_hal_clkgen_control+0x7a>
    e8f8:	f8d2 3120 	ldr.w	r3, [r2, #288]	; 0x120
    e8fc:	2101      	movs	r1, #1
    e8fe:	f361 2309 	bfi	r3, r1, #8, #2
    e902:	f8c2 3120 	str.w	r3, [r2, #288]	; 0x120
    e906:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
    e90a:	2000      	movs	r0, #0
    e90c:	68d3      	ldr	r3, [r2, #12]
    e90e:	f043 0301 	orr.w	r3, r3, #1
    e912:	60d3      	str	r3, [r2, #12]
    e914:	4770      	bx	lr
    e916:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
    e91a:	2000      	movs	r0, #0
    e91c:	68d3      	ldr	r3, [r2, #12]
    e91e:	f043 0302 	orr.w	r3, r3, #2
    e922:	60d3      	str	r3, [r2, #12]
    e924:	4770      	bx	lr
    e926:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    e92a:	2200      	movs	r2, #0
    e92c:	2047      	movs	r0, #71	; 0x47
    e92e:	2101      	movs	r1, #1
    e930:	6158      	str	r0, [r3, #20]
    e932:	6199      	str	r1, [r3, #24]
    e934:	4610      	mov	r0, r2
    e936:	615a      	str	r2, [r3, #20]
    e938:	4770      	bx	lr
    e93a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    e93e:	2000      	movs	r0, #0
    e940:	68da      	ldr	r2, [r3, #12]
    e942:	f36f 12c7 	bfc	r2, #7, #1
    e946:	60da      	str	r2, [r3, #12]
    e948:	4770      	bx	lr
    e94a:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
    e94e:	2000      	movs	r0, #0
    e950:	68d3      	ldr	r3, [r2, #12]
    e952:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    e956:	60d3      	str	r3, [r2, #12]
    e958:	4770      	bx	lr
    e95a:	4a18      	ldr	r2, [pc, #96]	; (e9bc <am_hal_clkgen_control+0x130>)
    e95c:	68d3      	ldr	r3, [r2, #12]
    e95e:	b2db      	uxtb	r3, r3
    e960:	2b21      	cmp	r3, #33	; 0x21
    e962:	d00a      	beq.n	e97a <am_hal_clkgen_control+0xee>
    e964:	b139      	cbz	r1, e976 <am_hal_clkgen_control+0xea>
    e966:	680b      	ldr	r3, [r1, #0]
    e968:	f043 0301 	orr.w	r3, r3, #1
    e96c:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
    e970:	2000      	movs	r0, #0
    e972:	6213      	str	r3, [r2, #32]
    e974:	4770      	bx	lr
    e976:	4b12      	ldr	r3, [pc, #72]	; (e9c0 <am_hal_clkgen_control+0x134>)
    e978:	e7f8      	b.n	e96c <am_hal_clkgen_control+0xe0>
    e97a:	b500      	push	{lr}
    e97c:	b083      	sub	sp, #12
    e97e:	f44f 507a 	mov.w	r0, #16000	; 0x3e80
    e982:	9101      	str	r1, [sp, #4]
    e984:	f8d2 3120 	ldr.w	r3, [r2, #288]	; 0x120
    e988:	f443 7340 	orr.w	r3, r3, #768	; 0x300
    e98c:	f8c2 3120 	str.w	r3, [r2, #288]	; 0x120
    e990:	f000 f818 	bl	e9c4 <am_hal_flash_delay>
    e994:	9901      	ldr	r1, [sp, #4]
    e996:	b149      	cbz	r1, e9ac <am_hal_clkgen_control+0x120>
    e998:	680b      	ldr	r3, [r1, #0]
    e99a:	f043 0301 	orr.w	r3, r3, #1
    e99e:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
    e9a2:	2000      	movs	r0, #0
    e9a4:	6213      	str	r3, [r2, #32]
    e9a6:	b003      	add	sp, #12
    e9a8:	f85d fb04 	ldr.w	pc, [sp], #4
    e9ac:	4b04      	ldr	r3, [pc, #16]	; (e9c0 <am_hal_clkgen_control+0x134>)
    e9ae:	e7f6      	b.n	e99e <am_hal_clkgen_control+0x112>
    e9b0:	2006      	movs	r0, #6
    e9b2:	4770      	bx	lr
    e9b4:	10052614 	.word	0x10052614
    e9b8:	4ffff000 	.word	0x4ffff000
    e9bc:	40020000 	.word	0x40020000
    e9c0:	0025b801 	.word	0x0025b801

0000e9c4 <am_hal_flash_delay>:
    e9c4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    e9c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    e9ca:	075b      	lsls	r3, r3, #29
    e9cc:	bf46      	itte	mi
    e9ce:	0040      	lslmi	r0, r0, #1
    e9d0:	230e      	movmi	r3, #14
    e9d2:	230b      	movpl	r3, #11
    e9d4:	4298      	cmp	r0, r3
    e9d6:	d902      	bls.n	e9de <am_hal_flash_delay+0x1a>
    e9d8:	4a01      	ldr	r2, [pc, #4]	; (e9e0 <am_hal_flash_delay+0x1c>)
    e9da:	1ac0      	subs	r0, r0, r3
    e9dc:	4710      	bx	r2
    e9de:	4770      	bx	lr
    e9e0:	0800009d 	.word	0x0800009d

0000e9e4 <am_hal_flash_delay_status_check>:
    e9e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    e9e8:	f89d c020 	ldrb.w	ip, [sp, #32]
    e9ec:	f8df 805c 	ldr.w	r8, [pc, #92]	; ea4c <am_hal_flash_delay_status_check+0x68>
    e9f0:	4604      	mov	r4, r0
    e9f2:	460d      	mov	r5, r1
    e9f4:	4616      	mov	r6, r2
    e9f6:	461f      	mov	r7, r3
    e9f8:	f04f 2940 	mov.w	r9, #1073758208	; 0x40004000
    e9fc:	f1bc 0f00 	cmp.w	ip, #0
    ea00:	d00a      	beq.n	ea18 <am_hal_flash_delay_status_check+0x34>
    ea02:	e01a      	b.n	ea3a <am_hal_flash_delay_status_check+0x56>
    ea04:	b1f4      	cbz	r4, ea44 <am_hal_flash_delay_status_check+0x60>
    ea06:	f8d9 3034 	ldr.w	r3, [r9, #52]	; 0x34
    ea0a:	f013 0f04 	tst.w	r3, #4
    ea0e:	bf0c      	ite	eq
    ea10:	2005      	moveq	r0, #5
    ea12:	2012      	movne	r0, #18
    ea14:	3c01      	subs	r4, #1
    ea16:	47c0      	blx	r8
    ea18:	6828      	ldr	r0, [r5, #0]
    ea1a:	4030      	ands	r0, r6
    ea1c:	42b8      	cmp	r0, r7
    ea1e:	d0f1      	beq.n	ea04 <am_hal_flash_delay_status_check+0x20>
    ea20:	2000      	movs	r0, #0
    ea22:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    ea26:	b16c      	cbz	r4, ea44 <am_hal_flash_delay_status_check+0x60>
    ea28:	f8d9 3034 	ldr.w	r3, [r9, #52]	; 0x34
    ea2c:	f013 0f04 	tst.w	r3, #4
    ea30:	bf0c      	ite	eq
    ea32:	2005      	moveq	r0, #5
    ea34:	2012      	movne	r0, #18
    ea36:	3c01      	subs	r4, #1
    ea38:	47c0      	blx	r8
    ea3a:	6828      	ldr	r0, [r5, #0]
    ea3c:	4030      	ands	r0, r6
    ea3e:	42b8      	cmp	r0, r7
    ea40:	d1f1      	bne.n	ea26 <am_hal_flash_delay_status_check+0x42>
    ea42:	e7ed      	b.n	ea20 <am_hal_flash_delay_status_check+0x3c>
    ea44:	2004      	movs	r0, #4
    ea46:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    ea4a:	bf00      	nop
    ea4c:	0800009d 	.word	0x0800009d

0000ea50 <am_hal_flash_load_ui32>:
    ea50:	4b00      	ldr	r3, [pc, #0]	; (ea54 <am_hal_flash_load_ui32+0x4>)
    ea52:	4718      	bx	r3
    ea54:	08000075 	.word	0x08000075

0000ea58 <am_hal_flash_store_ui32>:
    ea58:	4b01      	ldr	r3, [pc, #4]	; (ea60 <am_hal_flash_store_ui32+0x8>)
    ea5a:	f043 0301 	orr.w	r3, r3, #1
    ea5e:	4718      	bx	r3
    ea60:	10007540 	.word	0x10007540

0000ea64 <am_hal_gpio_pinconfig>:
    ea64:	2831      	cmp	r0, #49	; 0x31
    ea66:	f200 80c3 	bhi.w	ebf0 <am_hal_gpio_pinconfig+0x18c>
    ea6a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ea6e:	4604      	mov	r4, r0
    ea70:	f011 07e0 	ands.w	r7, r1, #224	; 0xe0
    ea74:	f001 0007 	and.w	r0, r1, #7
    ea78:	b085      	sub	sp, #20
    ea7a:	f3c1 03c1 	ubfx	r3, r1, #3, #2
    ea7e:	ea4f 02c0 	mov.w	r2, r0, lsl #3
    ea82:	d00f      	beq.n	eaa4 <am_hal_gpio_pinconfig+0x40>
    ea84:	f3c1 1642 	ubfx	r6, r1, #5, #3
    ea88:	1db5      	adds	r5, r6, #6
    ea8a:	f005 0507 	and.w	r5, r5, #7
    ea8e:	2d03      	cmp	r5, #3
    ea90:	f042 0201 	orr.w	r2, r2, #1
    ea94:	f240 80ae 	bls.w	ebf4 <am_hal_gpio_pinconfig+0x190>
    ea98:	2fc0      	cmp	r7, #192	; 0xc0
    ea9a:	f000 80e1 	beq.w	ec60 <am_hal_gpio_pinconfig+0x1fc>
    ea9e:	2f20      	cmp	r7, #32
    eaa0:	f000 80e3 	beq.w	ec6a <am_hal_gpio_pinconfig+0x206>
    eaa4:	b163      	cbz	r3, eac0 <am_hal_gpio_pinconfig+0x5c>
    eaa6:	2b01      	cmp	r3, #1
    eaa8:	f000 80d3 	beq.w	ec52 <am_hal_gpio_pinconfig+0x1ee>
    eaac:	2b02      	cmp	r3, #2
    eaae:	f040 80c9 	bne.w	ec44 <am_hal_gpio_pinconfig+0x1e0>
    eab2:	4b79      	ldr	r3, [pc, #484]	; (ec98 <am_hal_gpio_pinconfig+0x234>)
    eab4:	5d1b      	ldrb	r3, [r3, r4]
    eab6:	075b      	lsls	r3, r3, #29
    eab8:	f140 80c4 	bpl.w	ec44 <am_hal_gpio_pinconfig+0x1e0>
    eabc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
    eac0:	4b76      	ldr	r3, [pc, #472]	; (ec9c <am_hal_gpio_pinconfig+0x238>)
    eac2:	5d1b      	ldrb	r3, [r3, r4]
    eac4:	4103      	asrs	r3, r0
    eac6:	005b      	lsls	r3, r3, #1
    eac8:	f003 0302 	and.w	r3, r3, #2
    eacc:	4313      	orrs	r3, r2
    eace:	4a74      	ldr	r2, [pc, #464]	; (eca0 <am_hal_gpio_pinconfig+0x23c>)
    ead0:	5d12      	ldrb	r2, [r2, r4]
    ead2:	4282      	cmp	r2, r0
    ead4:	f000 8099 	beq.w	ec0a <am_hal_gpio_pinconfig+0x1a6>
    ead8:	f3c1 3000 	ubfx	r0, r1, #12, #1
    eadc:	f3c1 2581 	ubfx	r5, r1, #10, #2
    eae0:	f3c1 3280 	ubfx	r2, r1, #14, #1
    eae4:	ea43 0340 	orr.w	r3, r3, r0, lsl #1
    eae8:	0a88      	lsrs	r0, r1, #10
    eaea:	ea42 0245 	orr.w	r2, r2, r5, lsl #1
    eaee:	f000 0008 	and.w	r0, r0, #8
    eaf2:	4302      	orrs	r2, r0
    eaf4:	f3c1 2007 	ubfx	r0, r1, #8, #8
    eaf8:	f000 050c 	and.w	r5, r0, #12
    eafc:	2d04      	cmp	r5, #4
    eafe:	f000 80a5 	beq.w	ec4c <am_hal_gpio_pinconfig+0x1e8>
    eb02:	4d68      	ldr	r5, [pc, #416]	; (eca4 <am_hal_gpio_pinconfig+0x240>)
    eb04:	682d      	ldr	r5, [r5, #0]
    eb06:	eba1 0805 	sub.w	r8, r1, r5
    eb0a:	fab8 f888 	clz	r8, r8
    eb0e:	ea4f 1858 	mov.w	r8, r8, lsr #5
    eb12:	f010 0f60 	tst.w	r0, #96	; 0x60
    eb16:	bf04      	itt	eq
    eb18:	f3c1 30c0 	ubfxeq	r0, r1, #15, #1
    eb1c:	f360 0200 	bfieq	r2, r0, #0, #1
    eb20:	00a0      	lsls	r0, r4, #2
    eb22:	f3c1 2101 	ubfx	r1, r1, #8, #2
    eb26:	2902      	cmp	r1, #2
    eb28:	d05c      	beq.n	ebe4 <am_hal_gpio_pinconfig+0x180>
    eb2a:	2903      	cmp	r1, #3
    eb2c:	d058      	beq.n	ebe0 <am_hal_gpio_pinconfig+0x17c>
    eb2e:	2901      	cmp	r1, #1
    eb30:	ea4f 01c4 	mov.w	r1, r4, lsl #3
    eb34:	bf08      	it	eq
    eb36:	f043 0304 	orreq.w	r3, r3, #4
    eb3a:	f001 0118 	and.w	r1, r1, #24
    eb3e:	2700      	movs	r7, #0
    eb40:	f000 001c 	and.w	r0, r0, #28
    eb44:	fa02 f600 	lsl.w	r6, r2, r0
    eb48:	220f      	movs	r2, #15
    eb4a:	4082      	lsls	r2, r0
    eb4c:	43d2      	mvns	r2, r2
    eb4e:	f04f 09ff 	mov.w	r9, #255	; 0xff
    eb52:	fa03 f501 	lsl.w	r5, r3, r1
    eb56:	fa09 f901 	lsl.w	r9, r9, r1
    eb5a:	9201      	str	r2, [sp, #4]
    eb5c:	f000 f93a 	bl	edd4 <am_hal_interrupt_master_disable>
    eb60:	f024 0a03 	bic.w	sl, r4, #3
    eb64:	ea4f 0b54 	mov.w	fp, r4, lsr #1
    eb68:	f10a 4c80 	add.w	ip, sl, #1073741824	; 0x40000000
    eb6c:	4b4e      	ldr	r3, [pc, #312]	; (eca8 <am_hal_gpio_pinconfig+0x244>)
    eb6e:	494f      	ldr	r1, [pc, #316]	; (ecac <am_hal_gpio_pinconfig+0x248>)
    eb70:	9a01      	ldr	r2, [sp, #4]
    eb72:	9003      	str	r0, [sp, #12]
    eb74:	ea6f 0909 	mvn.w	r9, r9
    eb78:	f02b 0b03 	bic.w	fp, fp, #3
    eb7c:	f50c 3c80 	add.w	ip, ip, #65536	; 0x10000
    eb80:	f1b8 0f00 	cmp.w	r8, #0
    eb84:	d00b      	beq.n	eb9e <am_hal_gpio_pinconfig+0x13a>
    eb86:	ea4f 0ed4 	mov.w	lr, r4, lsr #3
    eb8a:	f004 081f 	and.w	r8, r4, #31
    eb8e:	4848      	ldr	r0, [pc, #288]	; (ecb0 <am_hal_gpio_pinconfig+0x24c>)
    eb90:	f00e 0e04 	and.w	lr, lr, #4
    eb94:	2401      	movs	r4, #1
    eb96:	fa04 f408 	lsl.w	r4, r4, r8
    eb9a:	f84e 4000 	str.w	r4, [lr, r0]
    eb9e:	4845      	ldr	r0, [pc, #276]	; (ecb4 <am_hal_gpio_pinconfig+0x250>)
    eba0:	2473      	movs	r4, #115	; 0x73
    eba2:	6604      	str	r4, [r0, #96]	; 0x60
    eba4:	f8dc 4000 	ldr.w	r4, [ip]
    eba8:	ea04 0409 	and.w	r4, r4, r9
    ebac:	4325      	orrs	r5, r4
    ebae:	f8cc 5000 	str.w	r5, [ip]
    ebb2:	f85b 4003 	ldr.w	r4, [fp, r3]
    ebb6:	4022      	ands	r2, r4
    ebb8:	4332      	orrs	r2, r6
    ebba:	f84b 2003 	str.w	r2, [fp, r3]
    ebbe:	f85a 3001 	ldr.w	r3, [sl, r1]
    ebc2:	ea03 0909 	and.w	r9, r3, r9
    ebc6:	2400      	movs	r4, #0
    ebc8:	ea49 0707 	orr.w	r7, r9, r7
    ebcc:	f84a 7001 	str.w	r7, [sl, r1]
    ebd0:	6604      	str	r4, [r0, #96]	; 0x60
    ebd2:	9803      	ldr	r0, [sp, #12]
    ebd4:	f000 f902 	bl	eddc <am_hal_interrupt_master_set>
    ebd8:	4620      	mov	r0, r4
    ebda:	b005      	add	sp, #20
    ebdc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ebe0:	f043 0304 	orr.w	r3, r3, #4
    ebe4:	00e1      	lsls	r1, r4, #3
    ebe6:	f001 0118 	and.w	r1, r1, #24
    ebea:	2701      	movs	r7, #1
    ebec:	408f      	lsls	r7, r1
    ebee:	e7a7      	b.n	eb40 <am_hal_gpio_pinconfig+0xdc>
    ebf0:	2006      	movs	r0, #6
    ebf2:	4770      	bx	lr
    ebf4:	4d28      	ldr	r5, [pc, #160]	; (ec98 <am_hal_gpio_pinconfig+0x234>)
    ebf6:	5d2d      	ldrb	r5, [r5, r4]
    ebf8:	3e02      	subs	r6, #2
    ebfa:	ea42 1286 	orr.w	r2, r2, r6, lsl #6
    ebfe:	07ee      	lsls	r6, r5, #31
    ec00:	d536      	bpl.n	ec70 <am_hal_gpio_pinconfig+0x20c>
    ec02:	2b00      	cmp	r3, #0
    ec04:	f43f af5c 	beq.w	eac0 <am_hal_gpio_pinconfig+0x5c>
    ec08:	e74d      	b.n	eaa6 <am_hal_gpio_pinconfig+0x42>
    ec0a:	f3c1 4202 	ubfx	r2, r1, #16, #3
    ec0e:	2a07      	cmp	r2, #7
    ec10:	d030      	beq.n	ec74 <am_hal_gpio_pinconfig+0x210>
    ec12:	4d29      	ldr	r5, [pc, #164]	; (ecb8 <am_hal_gpio_pinconfig+0x254>)
    ec14:	f3c1 40c1 	ubfx	r0, r1, #19, #2
    ec18:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
    ec1c:	f815 0024 	ldrb.w	r0, [r5, r4, lsl #2]
    ec20:	4290      	cmp	r0, r2
    ec22:	d029      	beq.n	ec78 <am_hal_gpio_pinconfig+0x214>
    ec24:	eb05 0584 	add.w	r5, r5, r4, lsl #2
    ec28:	00a0      	lsls	r0, r4, #2
    ec2a:	786e      	ldrb	r6, [r5, #1]
    ec2c:	4296      	cmp	r6, r2
    ec2e:	d02d      	beq.n	ec8c <am_hal_gpio_pinconfig+0x228>
    ec30:	78ae      	ldrb	r6, [r5, #2]
    ec32:	4296      	cmp	r6, r2
    ec34:	d02c      	beq.n	ec90 <am_hal_gpio_pinconfig+0x22c>
    ec36:	78ed      	ldrb	r5, [r5, #3]
    ec38:	4295      	cmp	r5, r2
    ec3a:	d02b      	beq.n	ec94 <am_hal_gpio_pinconfig+0x230>
    ec3c:	481f      	ldr	r0, [pc, #124]	; (ecbc <am_hal_gpio_pinconfig+0x258>)
    ec3e:	b005      	add	sp, #20
    ec40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ec44:	481e      	ldr	r0, [pc, #120]	; (ecc0 <am_hal_gpio_pinconfig+0x25c>)
    ec46:	b005      	add	sp, #20
    ec48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ec4c:	f04f 0801 	mov.w	r8, #1
    ec50:	e75f      	b.n	eb12 <am_hal_gpio_pinconfig+0xae>
    ec52:	4b11      	ldr	r3, [pc, #68]	; (ec98 <am_hal_gpio_pinconfig+0x234>)
    ec54:	5d1b      	ldrb	r3, [r3, r4]
    ec56:	079d      	lsls	r5, r3, #30
    ec58:	d5f4      	bpl.n	ec44 <am_hal_gpio_pinconfig+0x1e0>
    ec5a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
    ec5e:	e72f      	b.n	eac0 <am_hal_gpio_pinconfig+0x5c>
    ec60:	2c14      	cmp	r4, #20
    ec62:	f43f af1f 	beq.w	eaa4 <am_hal_gpio_pinconfig+0x40>
    ec66:	4817      	ldr	r0, [pc, #92]	; (ecc4 <am_hal_gpio_pinconfig+0x260>)
    ec68:	e7b7      	b.n	ebda <am_hal_gpio_pinconfig+0x176>
    ec6a:	2c14      	cmp	r4, #20
    ec6c:	f47f af1a 	bne.w	eaa4 <am_hal_gpio_pinconfig+0x40>
    ec70:	4815      	ldr	r0, [pc, #84]	; (ecc8 <am_hal_gpio_pinconfig+0x264>)
    ec72:	e7b2      	b.n	ebda <am_hal_gpio_pinconfig+0x176>
    ec74:	4815      	ldr	r0, [pc, #84]	; (eccc <am_hal_gpio_pinconfig+0x268>)
    ec76:	e7b0      	b.n	ebda <am_hal_gpio_pinconfig+0x176>
    ec78:	2200      	movs	r2, #0
    ec7a:	00a0      	lsls	r0, r4, #2
    ec7c:	0052      	lsls	r2, r2, #1
    ec7e:	f3c1 5540 	ubfx	r5, r1, #21, #1
    ec82:	ea42 02c5 	orr.w	r2, r2, r5, lsl #3
    ec86:	f04f 0800 	mov.w	r8, #0
    ec8a:	e74a      	b.n	eb22 <am_hal_gpio_pinconfig+0xbe>
    ec8c:	2201      	movs	r2, #1
    ec8e:	e7f5      	b.n	ec7c <am_hal_gpio_pinconfig+0x218>
    ec90:	2202      	movs	r2, #2
    ec92:	e7f3      	b.n	ec7c <am_hal_gpio_pinconfig+0x218>
    ec94:	2203      	movs	r2, #3
    ec96:	e7f1      	b.n	ec7c <am_hal_gpio_pinconfig+0x218>
    ec98:	0001736c 	.word	0x0001736c
    ec9c:	000173a0 	.word	0x000173a0
    eca0:	0001749c 	.word	0x0001749c
    eca4:	00017360 	.word	0x00017360
    eca8:	40010040 	.word	0x40010040
    ecac:	400100e0 	.word	0x400100e0
    ecb0:	400100b4 	.word	0x400100b4
    ecb4:	40010000 	.word	0x40010000
    ecb8:	000173d4 	.word	0x000173d4
    ecbc:	08000104 	.word	0x08000104
    ecc0:	08000102 	.word	0x08000102
    ecc4:	08000101 	.word	0x08000101
    ecc8:	08000100 	.word	0x08000100
    eccc:	08000103 	.word	0x08000103

0000ecd0 <am_hal_gpio_state_write>:
    ecd0:	2831      	cmp	r0, #49	; 0x31
    ecd2:	d81a      	bhi.n	ed0a <am_hal_gpio_state_write+0x3a>
    ecd4:	b570      	push	{r4, r5, r6, lr}
    ecd6:	2905      	cmp	r1, #5
    ecd8:	b082      	sub	sp, #8
    ecda:	460d      	mov	r5, r1
    ecdc:	d812      	bhi.n	ed04 <am_hal_gpio_state_write+0x34>
    ecde:	f000 031f 	and.w	r3, r0, #31
    ece2:	2201      	movs	r2, #1
    ece4:	08c0      	lsrs	r0, r0, #3
    ece6:	fa02 f603 	lsl.w	r6, r2, r3
    ecea:	f000 0404 	and.w	r4, r0, #4
    ecee:	f000 f871 	bl	edd4 <am_hal_interrupt_master_disable>
    ecf2:	3d01      	subs	r5, #1
    ecf4:	9001      	str	r0, [sp, #4]
    ecf6:	2d04      	cmp	r5, #4
    ecf8:	d821      	bhi.n	ed3e <am_hal_gpio_state_write+0x6e>
    ecfa:	e8df f005 	tbb	[pc, r5]
    ecfe:	1512      	.short	0x1512
    ed00:	1d1a      	.short	0x1d1a
    ed02:	08          	.byte	0x08
    ed03:	00          	.byte	0x00
    ed04:	2006      	movs	r0, #6
    ed06:	b002      	add	sp, #8
    ed08:	bd70      	pop	{r4, r5, r6, pc}
    ed0a:	2005      	movs	r0, #5
    ed0c:	4770      	bx	lr
    ed0e:	4a0d      	ldr	r2, [pc, #52]	; (ed44 <am_hal_gpio_state_write+0x74>)
    ed10:	58a3      	ldr	r3, [r4, r2]
    ed12:	4073      	eors	r3, r6
    ed14:	50a3      	str	r3, [r4, r2]
    ed16:	9801      	ldr	r0, [sp, #4]
    ed18:	f000 f860 	bl	eddc <am_hal_interrupt_master_set>
    ed1c:	2000      	movs	r0, #0
    ed1e:	b002      	add	sp, #8
    ed20:	bd70      	pop	{r4, r5, r6, pc}
    ed22:	4b09      	ldr	r3, [pc, #36]	; (ed48 <am_hal_gpio_state_write+0x78>)
    ed24:	50e6      	str	r6, [r4, r3]
    ed26:	e7f6      	b.n	ed16 <am_hal_gpio_state_write+0x46>
    ed28:	4a08      	ldr	r2, [pc, #32]	; (ed4c <am_hal_gpio_state_write+0x7c>)
    ed2a:	58a3      	ldr	r3, [r4, r2]
    ed2c:	4073      	eors	r3, r6
    ed2e:	50a3      	str	r3, [r4, r2]
    ed30:	e7f1      	b.n	ed16 <am_hal_gpio_state_write+0x46>
    ed32:	4b04      	ldr	r3, [pc, #16]	; (ed44 <am_hal_gpio_state_write+0x74>)
    ed34:	50e6      	str	r6, [r4, r3]
    ed36:	e7ee      	b.n	ed16 <am_hal_gpio_state_write+0x46>
    ed38:	4b05      	ldr	r3, [pc, #20]	; (ed50 <am_hal_gpio_state_write+0x80>)
    ed3a:	50e6      	str	r6, [r4, r3]
    ed3c:	e7eb      	b.n	ed16 <am_hal_gpio_state_write+0x46>
    ed3e:	4b05      	ldr	r3, [pc, #20]	; (ed54 <am_hal_gpio_state_write+0x84>)
    ed40:	50e6      	str	r6, [r4, r3]
    ed42:	e7e8      	b.n	ed16 <am_hal_gpio_state_write+0x46>
    ed44:	400100b4 	.word	0x400100b4
    ed48:	40010090 	.word	0x40010090
    ed4c:	40010088 	.word	0x40010088
    ed50:	400100a8 	.word	0x400100a8
    ed54:	40010098 	.word	0x40010098

0000ed58 <am_hal_gpio_interrupt_enable>:
    ed58:	b570      	push	{r4, r5, r6, lr}
    ed5a:	0c8c      	lsrs	r4, r1, #18
    ed5c:	04a4      	lsls	r4, r4, #18
    ed5e:	b082      	sub	sp, #8
    ed60:	b9ac      	cbnz	r4, ed8e <am_hal_gpio_interrupt_enable+0x36>
    ed62:	460d      	mov	r5, r1
    ed64:	4606      	mov	r6, r0
    ed66:	f000 f835 	bl	edd4 <am_hal_interrupt_master_disable>
    ed6a:	4b0a      	ldr	r3, [pc, #40]	; (ed94 <am_hal_gpio_interrupt_enable+0x3c>)
    ed6c:	9001      	str	r0, [sp, #4]
    ed6e:	f8d3 0200 	ldr.w	r0, [r3, #512]	; 0x200
    ed72:	4330      	orrs	r0, r6
    ed74:	f8c3 0200 	str.w	r0, [r3, #512]	; 0x200
    ed78:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
    ed7c:	430d      	orrs	r5, r1
    ed7e:	f8c3 5210 	str.w	r5, [r3, #528]	; 0x210
    ed82:	9801      	ldr	r0, [sp, #4]
    ed84:	f000 f82a 	bl	eddc <am_hal_interrupt_master_set>
    ed88:	4620      	mov	r0, r4
    ed8a:	b002      	add	sp, #8
    ed8c:	bd70      	pop	{r4, r5, r6, pc}
    ed8e:	2005      	movs	r0, #5
    ed90:	b002      	add	sp, #8
    ed92:	bd70      	pop	{r4, r5, r6, pc}
    ed94:	40010000 	.word	0x40010000

0000ed98 <am_hal_gpio_interrupt_clear>:
    ed98:	b570      	push	{r4, r5, r6, lr}
    ed9a:	0c8c      	lsrs	r4, r1, #18
    ed9c:	04a4      	lsls	r4, r4, #18
    ed9e:	b082      	sub	sp, #8
    eda0:	b97c      	cbnz	r4, edc2 <am_hal_gpio_interrupt_clear+0x2a>
    eda2:	460d      	mov	r5, r1
    eda4:	4606      	mov	r6, r0
    eda6:	f000 f815 	bl	edd4 <am_hal_interrupt_master_disable>
    edaa:	4b07      	ldr	r3, [pc, #28]	; (edc8 <am_hal_gpio_interrupt_clear+0x30>)
    edac:	9001      	str	r0, [sp, #4]
    edae:	f8c3 6208 	str.w	r6, [r3, #520]	; 0x208
    edb2:	f8c3 5218 	str.w	r5, [r3, #536]	; 0x218
    edb6:	9801      	ldr	r0, [sp, #4]
    edb8:	f000 f810 	bl	eddc <am_hal_interrupt_master_set>
    edbc:	4620      	mov	r0, r4
    edbe:	b002      	add	sp, #8
    edc0:	bd70      	pop	{r4, r5, r6, pc}
    edc2:	2005      	movs	r0, #5
    edc4:	b002      	add	sp, #8
    edc6:	bd70      	pop	{r4, r5, r6, pc}
    edc8:	40010000 	.word	0x40010000

0000edcc <am_hal_interrupt_master_enable>:
    edcc:	f3ef 8010 	mrs	r0, PRIMASK
    edd0:	b662      	cpsie	i
    edd2:	4770      	bx	lr

0000edd4 <am_hal_interrupt_master_disable>:
    edd4:	f3ef 8010 	mrs	r0, PRIMASK
    edd8:	b672      	cpsid	i
    edda:	4770      	bx	lr

0000eddc <am_hal_interrupt_master_set>:
    eddc:	f380 8810 	msr	PRIMASK, r0
    ede0:	4770      	bx	lr
    ede2:	bf00      	nop

0000ede4 <am_hal_mcuctrl_info_get>:
    ede4:	2900      	cmp	r1, #0
    ede6:	f000 808f 	beq.w	ef08 <am_hal_mcuctrl_info_get+0x124>
    edea:	2801      	cmp	r0, #1
    edec:	b430      	push	{r4, r5}
    edee:	d006      	beq.n	edfe <am_hal_mcuctrl_info_get+0x1a>
    edf0:	2802      	cmp	r0, #2
    edf2:	d06d      	beq.n	eed0 <am_hal_mcuctrl_info_get+0xec>
    edf4:	2800      	cmp	r0, #0
    edf6:	d055      	beq.n	eea4 <am_hal_mcuctrl_info_get+0xc0>
    edf8:	2006      	movs	r0, #6
    edfa:	bc30      	pop	{r4, r5}
    edfc:	4770      	bx	lr
    edfe:	4a43      	ldr	r2, [pc, #268]	; (ef0c <am_hal_mcuctrl_info_get+0x128>)
    ee00:	4843      	ldr	r0, [pc, #268]	; (ef10 <am_hal_mcuctrl_info_get+0x12c>)
    ee02:	6813      	ldr	r3, [r2, #0]
    ee04:	600b      	str	r3, [r1, #0]
    ee06:	6854      	ldr	r4, [r2, #4]
    ee08:	604c      	str	r4, [r1, #4]
    ee0a:	6894      	ldr	r4, [r2, #8]
    ee0c:	608c      	str	r4, [r1, #8]
    ee0e:	68d4      	ldr	r4, [r2, #12]
    ee10:	60cc      	str	r4, [r1, #12]
    ee12:	f3c3 5503 	ubfx	r5, r3, #20, #4
    ee16:	6914      	ldr	r4, [r2, #16]
    ee18:	610c      	str	r4, [r1, #16]
    ee1a:	f850 5025 	ldr.w	r5, [r0, r5, lsl #2]
    ee1e:	4c3d      	ldr	r4, [pc, #244]	; (ef14 <am_hal_mcuctrl_info_get+0x130>)
    ee20:	6950      	ldr	r0, [r2, #20]
    ee22:	6148      	str	r0, [r1, #20]
    ee24:	f003 0201 	and.w	r2, r3, #1
    ee28:	f3c3 4303 	ubfx	r3, r3, #16, #4
    ee2c:	e9c1 2506 	strd	r2, r5, [r1, #24]
    ee30:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
    ee34:	4a38      	ldr	r2, [pc, #224]	; (ef18 <am_hal_mcuctrl_info_get+0x134>)
    ee36:	620b      	str	r3, [r1, #32]
    ee38:	f8d2 30e0 	ldr.w	r3, [r2, #224]	; 0xe0
    ee3c:	f8d2 00e4 	ldr.w	r0, [r2, #228]	; 0xe4
    ee40:	b2db      	uxtb	r3, r3
    ee42:	f000 000f 	and.w	r0, r0, #15
    ee46:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
    ee4a:	624b      	str	r3, [r1, #36]	; 0x24
    ee4c:	f8d2 30e4 	ldr.w	r3, [r2, #228]	; 0xe4
    ee50:	f8d2 00e8 	ldr.w	r0, [r2, #232]	; 0xe8
    ee54:	f3c3 1303 	ubfx	r3, r3, #4, #4
    ee58:	f000 000f 	and.w	r0, r0, #15
    ee5c:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
    ee60:	628b      	str	r3, [r1, #40]	; 0x28
    ee62:	f8d2 30e8 	ldr.w	r3, [r2, #232]	; 0xe8
    ee66:	f8d2 00ec 	ldr.w	r0, [r2, #236]	; 0xec
    ee6a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    ee6e:	f3c0 1003 	ubfx	r0, r0, #4, #4
    ee72:	4303      	orrs	r3, r0
    ee74:	62cb      	str	r3, [r1, #44]	; 0x2c
    ee76:	f8d2 40fc 	ldr.w	r4, [r2, #252]	; 0xfc
    ee7a:	f8d2 30f8 	ldr.w	r3, [r2, #248]	; 0xf8
    ee7e:	f8d2 00f4 	ldr.w	r0, [r2, #244]	; 0xf4
    ee82:	f8d2 20f0 	ldr.w	r2, [r2, #240]	; 0xf0
    ee86:	b2db      	uxtb	r3, r3
    ee88:	041b      	lsls	r3, r3, #16
    ee8a:	ea43 6304 	orr.w	r3, r3, r4, lsl #24
    ee8e:	fa5f fc82 	uxtb.w	ip, r2
    ee92:	ea43 030c 	orr.w	r3, r3, ip
    ee96:	b2c2      	uxtb	r2, r0
    ee98:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    ee9c:	630b      	str	r3, [r1, #48]	; 0x30
    ee9e:	2000      	movs	r0, #0
    eea0:	bc30      	pop	{r4, r5}
    eea2:	4770      	bx	lr
    eea4:	4a19      	ldr	r2, [pc, #100]	; (ef0c <am_hal_mcuctrl_info_get+0x128>)
    eea6:	6993      	ldr	r3, [r2, #24]
    eea8:	f3c3 1480 	ubfx	r4, r3, #6, #1
    eeac:	700c      	strb	r4, [r1, #0]
    eeae:	f8d2 41a0 	ldr.w	r4, [r2, #416]	; 0x1a0
    eeb2:	f3c3 0380 	ubfx	r3, r3, #2, #1
    eeb6:	704b      	strb	r3, [r1, #1]
    eeb8:	f3c4 6381 	ubfx	r3, r4, #26, #2
    eebc:	710b      	strb	r3, [r1, #4]
    eebe:	6953      	ldr	r3, [r2, #20]
    eec0:	f3c3 0240 	ubfx	r2, r3, #1, #1
    eec4:	f003 0301 	and.w	r3, r3, #1
    eec8:	bc30      	pop	{r4, r5}
    eeca:	708a      	strb	r2, [r1, #2]
    eecc:	70cb      	strb	r3, [r1, #3]
    eece:	4770      	bx	lr
    eed0:	4a0e      	ldr	r2, [pc, #56]	; (ef0c <am_hal_mcuctrl_info_get+0x128>)
    eed2:	6848      	ldr	r0, [r1, #4]
    eed4:	f8d2 31cc 	ldr.w	r3, [r2, #460]	; 0x1cc
    eed8:	f003 0401 	and.w	r4, r3, #1
    eedc:	700c      	strb	r4, [r1, #0]
    eede:	f3c3 0440 	ubfx	r4, r3, #1, #1
    eee2:	720c      	strb	r4, [r1, #8]
    eee4:	f8d2 41c4 	ldr.w	r4, [r2, #452]	; 0x1c4
    eee8:	60cc      	str	r4, [r1, #12]
    eeea:	f8d2 41c0 	ldr.w	r4, [r2, #448]	; 0x1c0
    eeee:	4320      	orrs	r0, r4
    eef0:	f3c3 0380 	ubfx	r3, r3, #2, #1
    eef4:	6048      	str	r0, [r1, #4]
    eef6:	f8d2 21c8 	ldr.w	r2, [r2, #456]	; 0x1c8
    eefa:	740b      	strb	r3, [r1, #16]
    eefc:	694b      	ldr	r3, [r1, #20]
    eefe:	4313      	orrs	r3, r2
    ef00:	2000      	movs	r0, #0
    ef02:	bc30      	pop	{r4, r5}
    ef04:	614b      	str	r3, [r1, #20]
    ef06:	4770      	bx	lr
    ef08:	2006      	movs	r0, #6
    ef0a:	4770      	bx	lr
    ef0c:	40020000 	.word	0x40020000
    ef10:	000174d0 	.word	0x000174d0
    ef14:	00017510 	.word	0x00017510
    ef18:	f0000f00 	.word	0xf0000f00

0000ef1c <am_hal_pwrctrl_periph_enable>:
    ef1c:	b5f0      	push	{r4, r5, r6, r7, lr}
    ef1e:	b083      	sub	sp, #12
    ef20:	4604      	mov	r4, r0
    ef22:	f7ff ff57 	bl	edd4 <am_hal_interrupt_master_disable>
    ef26:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    ef2a:	4e15      	ldr	r6, [pc, #84]	; (ef80 <am_hal_pwrctrl_periph_enable+0x64>)
    ef2c:	4d15      	ldr	r5, [pc, #84]	; (ef84 <am_hal_pwrctrl_periph_enable+0x68>)
    ef2e:	9000      	str	r0, [sp, #0]
    ef30:	00a4      	lsls	r4, r4, #2
    ef32:	68b3      	ldr	r3, [r6, #8]
    ef34:	592f      	ldr	r7, [r5, r4]
    ef36:	433b      	orrs	r3, r7
    ef38:	60b3      	str	r3, [r6, #8]
    ef3a:	9800      	ldr	r0, [sp, #0]
    ef3c:	442c      	add	r4, r5
    ef3e:	f7ff ff4d 	bl	eddc <am_hal_interrupt_master_set>
    ef42:	20a0      	movs	r0, #160	; 0xa0
    ef44:	f7ff fd3e 	bl	e9c4 <am_hal_flash_delay>
    ef48:	69b3      	ldr	r3, [r6, #24]
    ef4a:	6864      	ldr	r4, [r4, #4]
    ef4c:	4223      	tst	r3, r4
    ef4e:	d103      	bne.n	ef58 <am_hal_pwrctrl_periph_enable+0x3c>
    ef50:	20a0      	movs	r0, #160	; 0xa0
    ef52:	f7ff fd37 	bl	e9c4 <am_hal_flash_delay>
    ef56:	69b3      	ldr	r3, [r6, #24]
    ef58:	4d09      	ldr	r5, [pc, #36]	; (ef80 <am_hal_pwrctrl_periph_enable+0x64>)
    ef5a:	69ab      	ldr	r3, [r5, #24]
    ef5c:	4223      	tst	r3, r4
    ef5e:	d002      	beq.n	ef66 <am_hal_pwrctrl_periph_enable+0x4a>
    ef60:	2000      	movs	r0, #0
    ef62:	b003      	add	sp, #12
    ef64:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ef66:	f7ff ff35 	bl	edd4 <am_hal_interrupt_master_disable>
    ef6a:	9001      	str	r0, [sp, #4]
    ef6c:	68ab      	ldr	r3, [r5, #8]
    ef6e:	ea23 0707 	bic.w	r7, r3, r7
    ef72:	60af      	str	r7, [r5, #8]
    ef74:	9801      	ldr	r0, [sp, #4]
    ef76:	f7ff ff31 	bl	eddc <am_hal_interrupt_master_set>
    ef7a:	2001      	movs	r0, #1
    ef7c:	b003      	add	sp, #12
    ef7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ef80:	40021000 	.word	0x40021000
    ef84:	00017700 	.word	0x00017700

0000ef88 <am_hal_pwrctrl_memory_deepsleep_powerdown>:
    ef88:	2811      	cmp	r0, #17
    ef8a:	d80b      	bhi.n	efa4 <am_hal_pwrctrl_memory_deepsleep_powerdown+0x1c>
    ef8c:	4b06      	ldr	r3, [pc, #24]	; (efa8 <am_hal_pwrctrl_memory_deepsleep_powerdown+0x20>)
    ef8e:	4a07      	ldr	r2, [pc, #28]	; (efac <am_hal_pwrctrl_memory_deepsleep_powerdown+0x24>)
    ef90:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    ef94:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
    ef98:	68d3      	ldr	r3, [r2, #12]
    ef9a:	6941      	ldr	r1, [r0, #20]
    ef9c:	430b      	orrs	r3, r1
    ef9e:	2000      	movs	r0, #0
    efa0:	60d3      	str	r3, [r2, #12]
    efa2:	4770      	bx	lr
    efa4:	2001      	movs	r0, #1
    efa6:	4770      	bx	lr
    efa8:	00017550 	.word	0x00017550
    efac:	40021000 	.word	0x40021000

0000efb0 <am_hal_pwrctrl_memory_deepsleep_retain>:
    efb0:	2811      	cmp	r0, #17
    efb2:	d80c      	bhi.n	efce <am_hal_pwrctrl_memory_deepsleep_retain+0x1e>
    efb4:	4b07      	ldr	r3, [pc, #28]	; (efd4 <am_hal_pwrctrl_memory_deepsleep_retain+0x24>)
    efb6:	4a08      	ldr	r2, [pc, #32]	; (efd8 <am_hal_pwrctrl_memory_deepsleep_retain+0x28>)
    efb8:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    efbc:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
    efc0:	68d3      	ldr	r3, [r2, #12]
    efc2:	6941      	ldr	r1, [r0, #20]
    efc4:	ea23 0301 	bic.w	r3, r3, r1
    efc8:	2000      	movs	r0, #0
    efca:	60d3      	str	r3, [r2, #12]
    efcc:	4770      	bx	lr
    efce:	2001      	movs	r0, #1
    efd0:	4770      	bx	lr
    efd2:	bf00      	nop
    efd4:	00017550 	.word	0x00017550
    efd8:	40021000 	.word	0x40021000

0000efdc <am_hal_pwrctrl_low_power_init>:
    efdc:	b530      	push	{r4, r5, lr}
    efde:	4b5f      	ldr	r3, [pc, #380]	; (f15c <am_hal_pwrctrl_low_power_init+0x180>)
    efe0:	681a      	ldr	r2, [r3, #0]
    efe2:	b085      	sub	sp, #20
    efe4:	b912      	cbnz	r2, efec <am_hal_pwrctrl_low_power_init+0x10>
    efe6:	4a5e      	ldr	r2, [pc, #376]	; (f160 <am_hal_pwrctrl_low_power_init+0x184>)
    efe8:	6812      	ldr	r2, [r2, #0]
    efea:	601a      	str	r2, [r3, #0]
    efec:	4b5d      	ldr	r3, [pc, #372]	; (f164 <am_hal_pwrctrl_low_power_init+0x188>)
    efee:	68db      	ldr	r3, [r3, #12]
    eff0:	b2db      	uxtb	r3, r3
    eff2:	2b12      	cmp	r3, #18
    eff4:	d104      	bne.n	f000 <am_hal_pwrctrl_low_power_init+0x24>
    eff6:	4b5c      	ldr	r3, [pc, #368]	; (f168 <am_hal_pwrctrl_low_power_init+0x18c>)
    eff8:	685b      	ldr	r3, [r3, #4]
    effa:	07da      	lsls	r2, r3, #31
    effc:	f100 8088 	bmi.w	f110 <am_hal_pwrctrl_low_power_init+0x134>
    f000:	4b58      	ldr	r3, [pc, #352]	; (f164 <am_hal_pwrctrl_low_power_init+0x188>)
    f002:	68da      	ldr	r2, [r3, #12]
    f004:	b2d2      	uxtb	r2, r2
    f006:	2a20      	cmp	r2, #32
    f008:	d934      	bls.n	f074 <am_hal_pwrctrl_low_power_init+0x98>
    f00a:	f8d3 2354 	ldr.w	r2, [r3, #852]	; 0x354
    f00e:	2002      	movs	r0, #2
    f010:	f360 4213 	bfi	r2, r0, #16, #4
    f014:	f8c3 2354 	str.w	r2, [r3, #852]	; 0x354
    f018:	f8d3 1354 	ldr.w	r1, [r3, #852]	; 0x354
    f01c:	2203      	movs	r2, #3
    f01e:	f362 5117 	bfi	r1, r2, #20, #4
    f022:	f8c3 1354 	str.w	r1, [r3, #852]	; 0x354
    f026:	f8d3 1358 	ldr.w	r1, [r3, #856]	; 0x358
    f02a:	2405      	movs	r4, #5
    f02c:	f364 0103 	bfi	r1, r4, #0, #4
    f030:	f8c3 1358 	str.w	r1, [r3, #856]	; 0x358
    f034:	f8d3 1358 	ldr.w	r1, [r3, #856]	; 0x358
    f038:	f360 1107 	bfi	r1, r0, #4, #4
    f03c:	f8c3 1358 	str.w	r1, [r3, #856]	; 0x358
    f040:	f8d3 1358 	ldr.w	r1, [r3, #856]	; 0x358
    f044:	2406      	movs	r4, #6
    f046:	f364 210b 	bfi	r1, r4, #8, #4
    f04a:	f8c3 1358 	str.w	r1, [r3, #856]	; 0x358
    f04e:	f8d3 1358 	ldr.w	r1, [r3, #856]	; 0x358
    f052:	2001      	movs	r0, #1
    f054:	f360 310f 	bfi	r1, r0, #12, #4
    f058:	f8c3 1358 	str.w	r1, [r3, #856]	; 0x358
    f05c:	f8d3 1358 	ldr.w	r1, [r3, #856]	; 0x358
    f060:	f362 61de 	bfi	r1, r2, #27, #4
    f064:	f8c3 1358 	str.w	r1, [r3, #856]	; 0x358
    f068:	f8d3 135c 	ldr.w	r1, [r3, #860]	; 0x35c
    f06c:	f362 0103 	bfi	r1, r2, #0, #4
    f070:	f8c3 135c 	str.w	r1, [r3, #860]	; 0x35c
    f074:	4a3b      	ldr	r2, [pc, #236]	; (f164 <am_hal_pwrctrl_low_power_init+0x188>)
    f076:	68d3      	ldr	r3, [r2, #12]
    f078:	b2db      	uxtb	r3, r3
    f07a:	2b11      	cmp	r3, #17
    f07c:	d905      	bls.n	f08a <am_hal_pwrctrl_low_power_init+0xae>
    f07e:	f8d2 335c 	ldr.w	r3, [r2, #860]	; 0x35c
    f082:	f36f 6318 	bfc	r3, #24, #1
    f086:	f8c2 335c 	str.w	r3, [r2, #860]	; 0x35c
    f08a:	2100      	movs	r1, #0
    f08c:	200c      	movs	r0, #12
    f08e:	f7ff fa83 	bl	e598 <am_hal_cachectrl_control>
    f092:	4b35      	ldr	r3, [pc, #212]	; (f168 <am_hal_pwrctrl_low_power_init+0x18c>)
    f094:	699b      	ldr	r3, [r3, #24]
    f096:	f3c3 2500 	ubfx	r5, r3, #8, #1
    f09a:	05db      	lsls	r3, r3, #23
    f09c:	d420      	bmi.n	f0e0 <am_hal_pwrctrl_low_power_init+0x104>
    f09e:	4c31      	ldr	r4, [pc, #196]	; (f164 <am_hal_pwrctrl_low_power_init+0x188>)
    f0a0:	68e3      	ldr	r3, [r4, #12]
    f0a2:	b2db      	uxtb	r3, r3
    f0a4:	2b11      	cmp	r3, #17
    f0a6:	d83a      	bhi.n	f11e <am_hal_pwrctrl_low_power_init+0x142>
    f0a8:	4c2e      	ldr	r4, [pc, #184]	; (f164 <am_hal_pwrctrl_low_power_init+0x188>)
    f0aa:	4930      	ldr	r1, [pc, #192]	; (f16c <am_hal_pwrctrl_low_power_init+0x190>)
    f0ac:	69a2      	ldr	r2, [r4, #24]
    f0ae:	2001      	movs	r0, #1
    f0b0:	4302      	orrs	r2, r0
    f0b2:	2307      	movs	r3, #7
    f0b4:	61a2      	str	r2, [r4, #24]
    f0b6:	9000      	str	r0, [sp, #0]
    f0b8:	461a      	mov	r2, r3
    f0ba:	f242 7010 	movw	r0, #10000	; 0x2710
    f0be:	f7ff fc91 	bl	e9e4 <am_hal_flash_delay_status_check>
    f0c2:	2800      	cmp	r0, #0
    f0c4:	d146      	bne.n	f154 <am_hal_pwrctrl_low_power_init+0x178>
    f0c6:	4b28      	ldr	r3, [pc, #160]	; (f168 <am_hal_pwrctrl_low_power_init+0x18c>)
    f0c8:	681a      	ldr	r2, [r3, #0]
    f0ca:	f042 0201 	orr.w	r2, r2, #1
    f0ce:	601a      	str	r2, [r3, #0]
    f0d0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    f0d2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
    f0d6:	625a      	str	r2, [r3, #36]	; 0x24
    f0d8:	68e3      	ldr	r3, [r4, #12]
    f0da:	b2db      	uxtb	r3, r3
    f0dc:	2b11      	cmp	r3, #17
    f0de:	d002      	beq.n	f0e6 <am_hal_pwrctrl_low_power_init+0x10a>
    f0e0:	2000      	movs	r0, #0
    f0e2:	b005      	add	sp, #20
    f0e4:	bd30      	pop	{r4, r5, pc}
    f0e6:	f8d4 335c 	ldr.w	r3, [r4, #860]	; 0x35c
    f0ea:	f360 5356 	bfi	r3, r0, #21, #2
    f0ee:	f8c4 335c 	str.w	r3, [r4, #860]	; 0x35c
    f0f2:	f8d4 3368 	ldr.w	r3, [r4, #872]	; 0x368
    f0f6:	220f      	movs	r2, #15
    f0f8:	f362 138b 	bfi	r3, r2, #6, #6
    f0fc:	f8c4 3368 	str.w	r3, [r4, #872]	; 0x368
    f100:	f8d4 3368 	ldr.w	r3, [r4, #872]	; 0x368
    f104:	f362 0305 	bfi	r3, r2, #0, #6
    f108:	f8c4 3368 	str.w	r3, [r4, #872]	; 0x368
    f10c:	b005      	add	sp, #20
    f10e:	bd30      	pop	{r4, r5, pc}
    f110:	200d      	movs	r0, #13
    f112:	f7ff ff03 	bl	ef1c <am_hal_pwrctrl_periph_enable>
    f116:	2800      	cmp	r0, #0
    f118:	f43f af72 	beq.w	f000 <am_hal_pwrctrl_low_power_init+0x24>
    f11c:	e7e1      	b.n	f0e2 <am_hal_pwrctrl_low_power_init+0x106>
    f11e:	f7ff fe59 	bl	edd4 <am_hal_interrupt_master_disable>
    f122:	9003      	str	r0, [sp, #12]
    f124:	f8d4 3368 	ldr.w	r3, [r4, #872]	; 0x368
    f128:	2219      	movs	r2, #25
    f12a:	f362 138b 	bfi	r3, r2, #6, #6
    f12e:	f8c4 3368 	str.w	r3, [r4, #872]	; 0x368
    f132:	f8d4 2368 	ldr.w	r2, [r4, #872]	; 0x368
    f136:	210c      	movs	r1, #12
    f138:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    f13c:	f361 0205 	bfi	r2, r1, #0, #6
    f140:	f8c4 2368 	str.w	r2, [r4, #872]	; 0x368
    f144:	6bda      	ldr	r2, [r3, #60]	; 0x3c
    f146:	f365 5296 	bfi	r2, r5, #22, #1
    f14a:	63da      	str	r2, [r3, #60]	; 0x3c
    f14c:	9803      	ldr	r0, [sp, #12]
    f14e:	f7ff fe45 	bl	eddc <am_hal_interrupt_master_set>
    f152:	e7a9      	b.n	f0a8 <am_hal_pwrctrl_low_power_init+0xcc>
    f154:	2004      	movs	r0, #4
    f156:	b005      	add	sp, #20
    f158:	bd30      	pop	{r4, r5, pc}
    f15a:	bf00      	nop
    f15c:	10052614 	.word	0x10052614
    f160:	4ffff000 	.word	0x4ffff000
    f164:	40020000 	.word	0x40020000
    f168:	40021000 	.word	0x40021000
    f16c:	40020018 	.word	0x40020018

0000f170 <am_hal_rtc_osc_disable>:
    f170:	4a02      	ldr	r2, [pc, #8]	; (f17c <am_hal_rtc_osc_disable+0xc>)
    f172:	6d13      	ldr	r3, [r2, #80]	; 0x50
    f174:	f043 0310 	orr.w	r3, r3, #16
    f178:	6513      	str	r3, [r2, #80]	; 0x50
    f17a:	4770      	bx	lr
    f17c:	40004200 	.word	0x40004200

0000f180 <am_hal_stimer_counter_get>:
    f180:	b500      	push	{lr}
    f182:	b085      	sub	sp, #20
    f184:	4805      	ldr	r0, [pc, #20]	; (f19c <am_hal_stimer_counter_get+0x1c>)
    f186:	a901      	add	r1, sp, #4
    f188:	f000 f8d8 	bl	f33c <am_hal_triple_read>
    f18c:	e9dd 3001 	ldrd	r3, r0, [sp, #4]
    f190:	4283      	cmp	r3, r0
    f192:	bf18      	it	ne
    f194:	9803      	ldrne	r0, [sp, #12]
    f196:	b005      	add	sp, #20
    f198:	f85d fb04 	ldr.w	pc, [sp], #4
    f19c:	40008144 	.word	0x40008144

0000f1a0 <am_hal_stimer_compare_delta_set>:
    f1a0:	2807      	cmp	r0, #7
    f1a2:	d900      	bls.n	f1a6 <am_hal_stimer_compare_delta_set+0x6>
    f1a4:	4770      	bx	lr
    f1a6:	b530      	push	{r4, r5, lr}
    f1a8:	b083      	sub	sp, #12
    f1aa:	460c      	mov	r4, r1
    f1ac:	4605      	mov	r5, r0
    f1ae:	f7ff fe11 	bl	edd4 <am_hal_interrupt_master_disable>
    f1b2:	4a27      	ldr	r2, [pc, #156]	; (f250 <am_hal_stimer_compare_delta_set+0xb0>)
    f1b4:	9001      	str	r0, [sp, #4]
    f1b6:	4b27      	ldr	r3, [pc, #156]	; (f254 <am_hal_stimer_compare_delta_set+0xb4>)
    f1b8:	f8d2 1140 	ldr.w	r1, [r2, #320]	; 0x140
    f1bc:	f8d2 0140 	ldr.w	r0, [r2, #320]	; 0x140
    f1c0:	f44f 7c80 	mov.w	ip, #256	; 0x100
    f1c4:	442b      	add	r3, r5
    f1c6:	fa0c f505 	lsl.w	r5, ip, r5
    f1ca:	009b      	lsls	r3, r3, #2
    f1cc:	ea20 0005 	bic.w	r0, r0, r5
    f1d0:	f8c2 0140 	str.w	r0, [r2, #320]	; 0x140
    f1d4:	f8d2 2144 	ldr.w	r2, [r2, #324]	; 0x144
    f1d8:	601c      	str	r4, [r3, #0]
    f1da:	6818      	ldr	r0, [r3, #0]
    f1dc:	4422      	add	r2, r4
    f1de:	eba0 0c02 	sub.w	ip, r0, r2
    f1e2:	f1bc 0f00 	cmp.w	ip, #0
    f1e6:	db03      	blt.n	f1f0 <am_hal_stimer_compare_delta_set+0x50>
    f1e8:	320a      	adds	r2, #10
    f1ea:	1a82      	subs	r2, r0, r2
    f1ec:	2a00      	cmp	r2, #0
    f1ee:	dd22      	ble.n	f236 <am_hal_stimer_compare_delta_set+0x96>
    f1f0:	4a17      	ldr	r2, [pc, #92]	; (f250 <am_hal_stimer_compare_delta_set+0xb0>)
    f1f2:	f8d2 2144 	ldr.w	r2, [r2, #324]	; 0x144
    f1f6:	601c      	str	r4, [r3, #0]
    f1f8:	6818      	ldr	r0, [r3, #0]
    f1fa:	4422      	add	r2, r4
    f1fc:	eba0 0c02 	sub.w	ip, r0, r2
    f200:	f1bc 0f00 	cmp.w	ip, #0
    f204:	db03      	blt.n	f20e <am_hal_stimer_compare_delta_set+0x6e>
    f206:	320a      	adds	r2, #10
    f208:	1a82      	subs	r2, r0, r2
    f20a:	2a00      	cmp	r2, #0
    f20c:	dd13      	ble.n	f236 <am_hal_stimer_compare_delta_set+0x96>
    f20e:	4a10      	ldr	r2, [pc, #64]	; (f250 <am_hal_stimer_compare_delta_set+0xb0>)
    f210:	f8d2 2144 	ldr.w	r2, [r2, #324]	; 0x144
    f214:	601c      	str	r4, [r3, #0]
    f216:	6818      	ldr	r0, [r3, #0]
    f218:	4422      	add	r2, r4
    f21a:	eba0 0c02 	sub.w	ip, r0, r2
    f21e:	f1bc 0f00 	cmp.w	ip, #0
    f222:	db03      	blt.n	f22c <am_hal_stimer_compare_delta_set+0x8c>
    f224:	320a      	adds	r2, #10
    f226:	1a82      	subs	r2, r0, r2
    f228:	2a00      	cmp	r2, #0
    f22a:	dd04      	ble.n	f236 <am_hal_stimer_compare_delta_set+0x96>
    f22c:	4a08      	ldr	r2, [pc, #32]	; (f250 <am_hal_stimer_compare_delta_set+0xb0>)
    f22e:	f8d2 2144 	ldr.w	r2, [r2, #324]	; 0x144
    f232:	601c      	str	r4, [r3, #0]
    f234:	681b      	ldr	r3, [r3, #0]
    f236:	4b06      	ldr	r3, [pc, #24]	; (f250 <am_hal_stimer_compare_delta_set+0xb0>)
    f238:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
    f23c:	400d      	ands	r5, r1
    f23e:	4315      	orrs	r5, r2
    f240:	f8c3 5140 	str.w	r5, [r3, #320]	; 0x140
    f244:	9801      	ldr	r0, [sp, #4]
    f246:	b003      	add	sp, #12
    f248:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    f24c:	f7ff bdc6 	b.w	eddc <am_hal_interrupt_master_set>
    f250:	40008000 	.word	0x40008000
    f254:	10002054 	.word	0x10002054

0000f258 <am_hal_stimer_int_clear>:
    f258:	4b01      	ldr	r3, [pc, #4]	; (f260 <am_hal_stimer_int_clear+0x8>)
    f25a:	f8c3 0308 	str.w	r0, [r3, #776]	; 0x308
    f25e:	4770      	bx	lr
    f260:	40008000 	.word	0x40008000

0000f264 <am_hal_stimer_int_status_get>:
    f264:	4a04      	ldr	r2, [pc, #16]	; (f278 <am_hal_stimer_int_status_get+0x14>)
    f266:	f8d2 3304 	ldr.w	r3, [r2, #772]	; 0x304
    f26a:	b110      	cbz	r0, f272 <am_hal_stimer_int_status_get+0xe>
    f26c:	f8d2 2300 	ldr.w	r2, [r2, #768]	; 0x300
    f270:	4013      	ands	r3, r2
    f272:	4618      	mov	r0, r3
    f274:	4770      	bx	lr
    f276:	bf00      	nop
    f278:	40008000 	.word	0x40008000

0000f27c <am_hal_sysctrl_sleep>:
    f27c:	b530      	push	{r4, r5, lr}
    f27e:	b083      	sub	sp, #12
    f280:	4604      	mov	r4, r0
    f282:	f7ff fda7 	bl	edd4 <am_hal_interrupt_master_disable>
    f286:	4a25      	ldr	r2, [pc, #148]	; (f31c <am_hal_sysctrl_sleep+0xa0>)
    f288:	9001      	str	r0, [sp, #4]
    f28a:	6813      	ldr	r3, [r2, #0]
    f28c:	3301      	adds	r3, #1
    f28e:	6013      	str	r3, [r2, #0]
    f290:	b124      	cbz	r4, f29c <am_hal_sysctrl_sleep+0x20>
    f292:	4b23      	ldr	r3, [pc, #140]	; (f320 <am_hal_sysctrl_sleep+0xa4>)
    f294:	f8d3 3250 	ldr.w	r3, [r3, #592]	; 0x250
    f298:	07db      	lsls	r3, r3, #31
    f29a:	d513      	bpl.n	f2c4 <am_hal_sysctrl_sleep+0x48>
    f29c:	4a21      	ldr	r2, [pc, #132]	; (f324 <am_hal_sysctrl_sleep+0xa8>)
    f29e:	6913      	ldr	r3, [r2, #16]
    f2a0:	f023 0304 	bic.w	r3, r3, #4
    f2a4:	6113      	str	r3, [r2, #16]
    f2a6:	f3bf 8f4f 	dsb	sy
    f2aa:	4a1f      	ldr	r2, [pc, #124]	; (f328 <am_hal_sysctrl_sleep+0xac>)
    f2ac:	4b1f      	ldr	r3, [pc, #124]	; (f32c <am_hal_sysctrl_sleep+0xb0>)
    f2ae:	6812      	ldr	r2, [r2, #0]
    f2b0:	601a      	str	r2, [r3, #0]
    f2b2:	bf30      	wfi
    f2b4:	f3bf 8f6f 	isb	sy
    f2b8:	9801      	ldr	r0, [sp, #4]
    f2ba:	b003      	add	sp, #12
    f2bc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    f2c0:	f7ff bd8c 	b.w	eddc <am_hal_interrupt_master_set>
    f2c4:	4b1a      	ldr	r3, [pc, #104]	; (f330 <am_hal_sysctrl_sleep+0xb4>)
    f2c6:	681a      	ldr	r2, [r3, #0]
    f2c8:	b912      	cbnz	r2, f2d0 <am_hal_sysctrl_sleep+0x54>
    f2ca:	4a1a      	ldr	r2, [pc, #104]	; (f334 <am_hal_sysctrl_sleep+0xb8>)
    f2cc:	6812      	ldr	r2, [r2, #0]
    f2ce:	601a      	str	r2, [r3, #0]
    f2d0:	4d13      	ldr	r5, [pc, #76]	; (f320 <am_hal_sysctrl_sleep+0xa4>)
    f2d2:	f8d5 4350 	ldr.w	r4, [r5, #848]	; 0x350
    f2d6:	f3c4 4305 	ubfx	r3, r4, #16, #6
    f2da:	3309      	adds	r3, #9
    f2dc:	2b3f      	cmp	r3, #63	; 0x3f
    f2de:	bf28      	it	cs
    f2e0:	233f      	movcs	r3, #63	; 0x3f
    f2e2:	461a      	mov	r2, r3
    f2e4:	4b14      	ldr	r3, [pc, #80]	; (f338 <am_hal_sysctrl_sleep+0xbc>)
    f2e6:	f3c4 0109 	ubfx	r1, r4, #0, #10
    f2ea:	f240 30ff 	movw	r0, #1023	; 0x3ff
    f2ee:	3118      	adds	r1, #24
    f2f0:	4023      	ands	r3, r4
    f2f2:	4281      	cmp	r1, r0
    f2f4:	bf94      	ite	ls
    f2f6:	430b      	orrls	r3, r1
    f2f8:	4303      	orrhi	r3, r0
    f2fa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
    f2fe:	f8c5 3350 	str.w	r3, [r5, #848]	; 0x350
    f302:	f44f 70a0 	mov.w	r0, #320	; 0x140
    f306:	f7ff fb5d 	bl	e9c4 <am_hal_flash_delay>
    f30a:	4a06      	ldr	r2, [pc, #24]	; (f324 <am_hal_sysctrl_sleep+0xa8>)
    f30c:	f8c5 4350 	str.w	r4, [r5, #848]	; 0x350
    f310:	6913      	ldr	r3, [r2, #16]
    f312:	f043 0304 	orr.w	r3, r3, #4
    f316:	6113      	str	r3, [r2, #16]
    f318:	e7c5      	b.n	f2a6 <am_hal_sysctrl_sleep+0x2a>
    f31a:	bf00      	nop
    f31c:	10052618 	.word	0x10052618
    f320:	40020000 	.word	0x40020000
    f324:	e000ed00 	.word	0xe000ed00
    f328:	5fff0000 	.word	0x5fff0000
    f32c:	1005261c 	.word	0x1005261c
    f330:	10052614 	.word	0x10052614
    f334:	4ffff000 	.word	0x4ffff000
    f338:	ffc0fc00 	.word	0xffc0fc00

0000f33c <am_hal_triple_read>:
    f33c:	b412      	push	{r1, r4}
    f33e:	f3ef 8410 	mrs	r4, PRIMASK
    f342:	b672      	cpsid	i
    f344:	6801      	ldr	r1, [r0, #0]
    f346:	6802      	ldr	r2, [r0, #0]
    f348:	6803      	ldr	r3, [r0, #0]
    f34a:	f384 8810 	msr	PRIMASK, r4
    f34e:	bc11      	pop	{r0, r4}
    f350:	6001      	str	r1, [r0, #0]
    f352:	6042      	str	r2, [r0, #4]
    f354:	6083      	str	r3, [r0, #8]
    f356:	4770      	bx	lr

0000f358 <g_deepsleep_button0>:
    f358:	1003 0000                                   ....

0000f35c <x_p1>:
    f35c:	be0f b853 ec67 b83d 93f0 b816 1263 b7de     ..S.g.=.....c...
    f36c:	0139 b7a7 399c b786 d200 b75d 11c1 b741     9....9....]...A.
    f37c:	cfe0 b73d 720c b740 ac92 b72e 31ce b6eb     ..=..r@......1..
    f38c:	3451 35b3 4d09 378a d320 3809 4084 3824     Q4.5.M.7 ..8.@$8
    f39c:	461c 3803 d327 379a 3e7c 375d 3228 37a9     .F.8'..7|>]7(2.7
    f3ac:	2bff 3812 7148 3849 9c56 385c 582c 384b     .+.8HqI8V.\8,XK8
    f3bc:	a288 382c ba4a 381e b297 3837 b3e6 386c     ..,8J..8..78..l8
    f3cc:	fcc2 3888 2b9c 3885 8d46 3868 d8be 3856     ...8.+.8F.h8..V8
    f3dc:	5301 386e 5e1a 3893 e615 38af 5749 38bd     .Sn8.^.8...8IW.8
    f3ec:	2622 38b8 fbd2 38a9 5674 38a1 f4a9 38a2     "&.8...8tV.8...8
    f3fc:	a2b2 38a3 6f50 3898 dcc4 3888 7f0d 3885     ...8Po.8...8...8
    f40c:	1408 3891 875c 389d 4a7a 389d 1030 3891     ...8\..8zJ.80..8
    f41c:	a30b 3883 7149 3876 16a2 386a 1a3b 3861     ...8Iqv8..j8;.a8
    f42c:	e9a0 3867 8a4e 387f 9fc6 3888 79d1 3883     ..g8N..8...8.y.8
    f43c:	2b7f 385c cbe2 3812 8364 3744 171c b746     .+\8...8d.D7..F.
    f44c:	ccad b7f3 380d b828 7345 b856 3081 b88b     .....8(.EsV..0..
    f45c:	a515 b8b0 8932 b8d3 c5b9 b8ef 1a42 b903     ....2.......B...
    f46c:	82bc b90c 46ba b914 099c b91a e688 b91e     .....F..........
    f47c:	0997 b925 0a65 b92c c2b7 b930 e781 b931     ..%.e.,...0...1.
    f48c:	f8c1 b92f f32d b928 ac36 b91b 51d4 b90e     ../.-.(.6....Q..
    f49c:	aa47 b908 33aa b909 1def b907 9cc6 b8f8     G....3..........
    f4ac:	aeda b8d0 349e b89b 730b b842 3ea8 b7c3     .....4...sB..>..
    f4bc:	35a7 b730 4f96 b6ef d65c b6b5 80bd 354e     .50..O..\.....N5
    f4cc:	0b5e 3725 3614 3795 d8dd 37d3 f65e 3811     ^.%7.6.7...7^..8
    f4dc:	18ad 383c 7cd4 3855 b086 3859 694a 385c     ..<8.|U8..Y8Ji\8
    f4ec:	45d3 3874 55e6 388f 7948 389f 9627 389c     .Et8.U.8Hy.8'..8
    f4fc:	94e4 3883 a9ec 3837 113c 37cc eb73 3738     ...8..78<..7s.87
    f50c:	4793 36c8 add5 36a3 e112 35c1 b884 b6f0     .G.6...6...5....
    f51c:	e5a7 b79d 7986 b7f2 03f1 b810 6561 b813     .....y......ae..
    f52c:	491f b80d 8524 b80c 36d3 b819 5d6b b82b     .I..$....6..k]+.
    f53c:	15ab b839 d5bc b845 178e b851 232b b846     ..9...E...Q.+#F.
    f54c:	fc69 b817 33b8 b7c2 d636 b796 8272 b7b2     i....3..6...r...
    f55c:	db9f b7b1 55c4 b6c7 05f7 37b9 bdc5 3842     .....U.....7..B8
    f56c:	3c16 385d 2f7e 3837 debe 3814 be1e 3823     .<]8~/78...8..#8
    f57c:	6f02 3853 4232 3881 af90 3893 c98a 38a0     .oS82B.8...8...8
    f58c:	449f 38a6 f8dd 38a4 9566 389f d587 3897     .D.8...8f..8...8
    f59c:	f073 3895 e85b 38a6 3407 38c7 4297 38db     s..8[..8.4.8.B.8
    f5ac:	afa2 38cc 90c4 38a6 97fc 3887 ea30 387f     ...8...8...80..8
    f5bc:	f209 3886 42f1 388a aec4 387c a9dd 3848     ...8.B.8..|8..H8
    f5cc:	d555 3814 1c94 380f 1794 3854 f1cb 38a0     U..8...8..T8...8
    f5dc:	3ea3 38c2 45f1 38b5 3e78 3892 6a02 388d     .>.8.E.8x>.8.j.8
    f5ec:	793a 38bf 6361 3902 db3f 390d e594 38e4     :y.8ac.9?..9...8
    f5fc:	7043 387a dde5 377b 1a36 b642 ffb8 372a     Cpz8..{76.B...*7
    f60c:	b67b 3825 555a 3885 4535 3895 621d 388a     {.%8ZU.85E.8.b.8
    f61c:	6977 3871 b711 385a 5d1b 3856 bc91 3861     wiq8..Z8.]V8..a8
    f62c:	f9cf 3879 3d20 388c 2ec5 3897 8ea2 3894     ..y8 =.8...8...8
    f63c:	cb3e 387c 4460 382d 24bf 37ad aee1 3728     >.|8`D-8.$.7..(7
    f64c:	ed33 3793 1f27 3818 d8a1 3846 6e91 382a     3..7'..8..F8.n*8
    f65c:	783d 37cd f58d 3786 b799 37bf 21cb 3809     =x.7...7...7.!.8
    f66c:	014c 37c5 627e b730 9653 b849 25e3 b890     L..7~b0.S.I..%..
    f67c:	1602 b8a8 41f0 b8d2 6e9d b902 5bbb b909     .....A...n...[..
    f68c:	9da1 b8f0 31d2 b8cb e16b b8d5 c514 b908     .....1..k.......
    f69c:	70b9 b922 e3ee b919 1604 b8e9 7910 b8bb     .p"..........y..
    f6ac:	13c9 b8f0 0234 b932 4493 b959 fcf3 b952     ....4.2..DY...R.
    f6bc:	952e b92f 4d67 b90d 62eb b8f7 9d4d b8f0     ../.gM...b..M...
    f6cc:	2b14 b8ee 1c30 b8da b560 b8b1 a9dc b884     .+..0...`.......
    f6dc:	8a55 b84e 69ed b845 45f2 b853 551c b844     U.N..iE..ES..UD.
    f6ec:	e7f0 b80c fe40 b7c0 b0a8 b7d9 b2b1 b81e     ....@...........
    f6fc:	e790 b846 d729 b84f f865 b83a 1ddd b81b     ..F.).O.e.:.....
    f70c:	cd4a b814 22ca b837 0982 b864 3aec b87c     J...."7...d..:|.
    f71c:	b790 b880 6e38 b880 68a9 b882 fcb2 b88e     ....8n...h......
    f72c:	76a9 b8ad e82d b8dd a7a0 b90d c06c b92c     .v..-.......l.,.
    f73c:	8737 b943 9d0b b94f 0f50 b956 e023 b957     7.C...O.P.V.#.W.
    f74c:	6c8e b951 0ec1 b946 4d7b b93f 61da b940     .lQ...F.{M?..a@.
    f75c:	0b06 b943 d986 b93f 57f5 b936 37c7 b92e     ..C...?..W6..7..
    f76c:	6e88 b92f 8fc7 b937 585c b93b a97e b935     .n/...7.\X;.~.5.
    f77c:	02fb b92e 46ee b92b 6b7b b927 5ca5 b916     .....F+.{k'..\..
    f78c:	d17b b8eb f683 b8aa 4d8a b89b 2fa9 b8cf     {........M.../..
    f79c:	ca7f b90a ac00 b911 7a00 b8e8 643f b89c     .........z..?d..
    f7ac:	3f47 b86d ac0a b87d 97d9 b89c 4444 b8b6     G?m...}.....DD..
    f7bc:	42a2 b8c0 9c98 b8ba 7fec b8a6 487a b888     .B..........zH..
    f7cc:	d255 b85c e97c b847 f6f6 b841 57df b82c     U.\.|.G...A..W,.
    f7dc:	acb6 b7fd 98cb b789 9d8a b620 324c 3729     .......... .L2)7
    f7ec:	c492 37ab 76e4 37fb 7b0b 382a ea24 385a     ...7.v.7.{*8$.Z8
    f7fc:	c121 387e b763 3885 00be 3889 e272 3897     !.~8c..8...8r..8
    f80c:	d409 38b4 3e0b 38d2 1421 38e2 dfeb 38e4     ...8.>.8!..8...8
    f81c:	7684 38e6 1378 38ef 577d 38fd c124 3906     .v.8x..8}W.8$..9
    f82c:	6cec 390f 06a8 3918 3e0b 391e 553c 3920     .l.9...9.>.9<U 9
    f83c:	3220 391f 2cbb 391d 7040 391c 5034 391f      2.9.,.9@p.94P.9
    f84c:	153d 3927 6cf2 3930 b977 3934 bc63 3931     =.'9.l09w.49c.19
    f85c:	6dc0 392c 929f 3929 4954 3927 32b5 3921     .m,9..)9TI'9.2!9
    f86c:	d1f3 3917 c941 390f 8780 390b 5f2b 3909     ...9A..9...9+_.9
    f87c:	fc3a 3906 cbbb 3903 380f 3900 0bf3 38f9     :..9...9.8.9...8
    f88c:	72a7 38f1 07cb 38e9 9dba 38dd 31d2 38cc     .r.8...8...8.1.8
    f89c:	eee0 38b3 efdb 3896 c2a9 386e 3ec7 382e     ...8...8..n8.>.8
    f8ac:	5e83 37ed 0735 37af 11ad 37a7 b506 37a9     .^.75..7...7...7
    f8bc:	0010 377c 7a6b 368d b5f3 b690 cc40 b688     ..|7kz.6....@...
    f8cc:	b620 3620 fa24 3708 62d9 3731 26dd 373e      . 6$..7.b17.&>7
    f8dc:	8dbb 373e 06b2 372a 14d3 370a ec11 36e6     ..>7..*7...7...6
    f8ec:	c3dc 36d8 9e30 36ec 6280 3715 ea66 3746     ...60..6.b.7f.F7
    f8fc:	8dc6 3787 e76d 37c5 63f1 381a 77ff 3875     ...7m..7.c.8.wu8
    f90c:	1522 38be 8cdf 390a b9dc 393b f800 396e     "..8...9..;9..n9
    f91c:	3164 3991 34ed 39a9 dad1 39bc 4ca4 39cb     d1.9.4.9...9.L.9
    f92c:	8f21 39d6 1e4f 39e1 dbc5 39eb 184b 39f6     !..9O..9...9K..9
    f93c:	2f1d 39fe 4b4a 3a01 f2f9 3a01 c9ce 3a02     ./.9JK.:...:...:
    f94c:	523e 3a05 8f73 3a08 a709 3a09 20a3 3a07     >R.:s..:...:. .:
    f95c:	1718 3a02 1a83 39f8 6fd6 39ea beda 39da     ...:...9.o.9...9
    f96c:	9a03 39ca 8a2a 39bc d771 39af 897b 399f     ...9*..9q..9{..9
    f97c:	1a77 3988 2e16 395a c488 392c 47ba 3911     w..9..Z9..,9.G.9
    f98c:	0c8f 3904 7eb5 38f0 4a52 38bf b032 3856     ...9.~.8RJ.82.V8
    f99c:	f306 36b2 5f28 b7f8 9956 b841 8449 b855     ...6(_..V.A.I.U.
    f9ac:	280e b86f 2c4e b899 e18d b8cb 456b b8ff     .(o.N,......kE..
    f9bc:	dd71 b912 98f6 b91c 8873 b91d 7036 b91b     q.......s...6p..
    f9cc:	ced3 b91d 808a b925 2bc2 b92b 34ad b928     ......%..++..4(.
    f9dc:	7b6b b91e 19a8 b916 6d4b b915 b193 b91b     k{......Km......
    f9ec:	41ae b922 228e b923 594c b91e f7b0 b918     .A".."#.LY......
    f9fc:	c1f6 b918 8905 b920 bcb0 b92c a988 b933     ...... ...,...3.
    fa0c:	1bf6 b92e 26c4 b91f 67ce b90f c8f2 b903     .....&...g......
    fa1c:	40fa b8f9 fe2a b8f1 49e6 b8ec a801 b8de     .@..*....I......
    fa2c:	a9c5 b8c4 8cde b8a4 6538 b888 212f b86d     ........8e../!m.
    fa3c:	3b9e b863 9972 b870 91ac b882 9612 b884     .;c.r.p.........
    fa4c:	825c b876 42bd b864 b31b b869 c04f b87d     \.v..Bd...i.O.}.
    fa5c:	f9a1 b881 21f5 b874 9385 b86a 79b2 b884     .....!t...j..y..
    fa6c:	a1dd b8a2 6a46 b8b6 5b98 b8b1 73db b8a2     ....Fj...[...s..
    fa7c:	ebee b8a5 e453 b8c8 2186 b8fd 86c9 b913     ....S....!......
    fa8c:	f528 b91a 8459 b916 8500 b90f 7722 b912     (...Y......."w..
    fa9c:	ff5f b925 4966 b943 3ee9 b95c 4df9 b969     _.%.fIC..>\..Mi.
    faac:	7645 b96d f3e1 b96e 9768 b970 0f06 b973     Evm...n.h.p...s.
    fabc:	fa4a b978 aecb b982 8795 b98b d02e b994     J.x.............
    facc:	f1cb b99c 615d b9a3 ce3e b9a7 59b0 b9aa     ....]a..>....Y..
    fadc:	30ec b9ac 15d8 b9af e8d8 b9b3 fe14 b9b8     .0..............
    faec:	ecb8 b9b9 1453 b9b3 b3d4 b9a6 457d b99c     ....S.......}E..
    fafc:	34bf b999 2714 b99c dbb0 b99e 1a7d b99a     .4...'......}...
    fb0c:	6a58 b98b 9472 b974 4fac b964 c5a1 b969     Xj..r.t..Od...i.
    fb1c:	adec b973 b8b0 b972 07a3 b964 3659 b94b     ..s...r...d.Y6K.
    fb2c:	be65 b92f 9dc4 b91b a9f9 b913 9d27 b911     e./.........'...
    fb3c:	66e3 b909 d2b9 b8eb b489 b8b9 e276 b888     .f..........v...
    fb4c:	f425 b834 3106 b7c3 53b1 b722 a124 b693     %.4..1...S".$...
    fb5c:	2847 b6d2 97f1 b739 c212 b72e 8243 360a     G(....9.....C..6
    fb6c:	d816 37bd 6628 3831 9076 386f aadb 388d     ...7(f18v.o8...8
    fb7c:	9c45 389a d68a 38a2 163f 38b0 f9f6 38c6     E..8...8?..8...8
    fb8c:	e25c 38e3 f066 38fc 73ec 3900 9e74 38e5     \..8f..8.s.9t..8
    fb9c:	b1bb 38bd 4e92 38ac e23e 38be d922 38df     ...8.N.8>..8"..8
    fbac:	2b47 38ee 20fe 38db eb4d 38b4 ff1f 3896     G+.8. .8M..8...8
    fbbc:	e7a9 3891 a81d 38a7 a5a5 38d2 a04b 38fc     ...8...8...8K..8
    fbcc:	df75 3901 50dd 38e4 b057 38c4 98f8 38c1     u..9.P.8W..8...8
    fbdc:	3577 38cc ea45 38c6 c055 38a8 8585 3883     w5.8E..8U..8...8
    fbec:	d4e3 3869 117c 3887 af4c 389f 4d1a 389e     ..i8|..8L..8.M.8
    fbfc:	5a68 3881 82bb 3840 e8a1 3821 2645 3833     hZ.8..@8..!8E&38
    fc0c:	a997 3859 0a94 386d ccf7 3866 8ed2 3865     ..Y8..m8..f8..e8
    fc1c:	04e0 387f 5fa8 3893 959e 38a0 cf83 38a2     ...8._.8...8...8
    fc2c:	7de0 38a5 fe36 38b3 685b 38c8 0b02 38d5     .}.86..8[h.8...8
    fc3c:	c4e2 38d5 8c2e 38cf 21e5 38cc 26e1 38d6     ...8...8.!.8.&.8
    fc4c:	d3e5 38e9 b320 38f2 fd50 38e5 051c 38d1     ...8 ..8P..8...8
    fc5c:	b906 38c6 1d32 38cd e088 38dd 4bb8 38ef     ...82..8...8.K.8
    fc6c:	11be 38fc de74 3902 c8af 3908 6d81 3910     ...8t..9...9.m.9
    fc7c:	8722 3914 93f2 390d bc7a 38f8 4e9e 38d8     "..9...9z..8.N.8
    fc8c:	7abf 38cf e2a3 38de e8fb 38f3 cc4a 38fa     .z.8...8...8J..8
    fc9c:	725d 38f1 5f72 38e7 d6db 38e6 d98f 38e5     ]r.8r_.8...8...8
    fcac:	3912 38d8 c012 38c5 a1a1 38bd 52d1 38bc     .9.8...8...8.R.8
    fcbc:	a4b1 38b0 6ade 3897 1c70 3881 10e0 3873     ...8.j.8p..8..s8
    fccc:	a87b 386e 1847 3856 8759 3827 98ab 37e7     {.n8G.V8Y.'8...7
    fcdc:	28e1 3780 b741 363a b4e6 b6f4 476c b748     .(.7A.:6....lGH.
    fcec:	0c73 b73e c213 b712 5abd b71a d707 b78c     s.>......Z......
    fcfc:	d961 b804 4795 b854 d72d b892 8893 b8b7     a....GT.-.......
    fd0c:	f697 b8d5 532b b8ee e134 b900 8de1 b908     ....+S..4.......
    fd1c:	5b18 b90f d446 b917 f7a3 b922 d39e b92c     .[..F....."...,.
    fd2c:	c633 b92f 91bc b92b e9bc b925 5b15 b924     3./...+...%..[$.
    fd3c:	5c00 b928 d131 b92f 803c b936 7fd2 b937     .\(.1./.<.6...7.
    fd4c:	ed2a b92f 21d0 b922 b541 b914 ad19 b90b     *./..!".A.......
    fd5c:	7067 b904 48be b8f5 b0ab b8db 87f8 b8c0     gp...H..........
    fd6c:	15da b8a6 10b6 b88b c676 b85b 86a3 b81f     ........v.[.....
    fd7c:	2139 b7d0 4e9b b76b 4ff5 b6db bfd3 b61b     9!...Nk..O......
    fd8c:	972d 358c e010 36dc febb 375c cea4 3786     -..5...6..\7...7
    fd9c:	5475 375f 0a3e 370e 66ec 36cd 3265 36f8     uT_7>..7.f.6e2.6
    fdac:	52d3 3733 bb17 3773 78d5 3798 3228 37a7     .R37..s7.x.7(2.7
    fdbc:	ca33 378c bddc 3700 9215 b68d 2afb b780     3..7...7.....*..
    fdcc:	1468 b7da 669a b822 f28f b85f 5476 b890     h....f"..._.vT..
    fddc:	9808 b8b2 ff56 b8d5 632d b8f5 82d7 b906     ....V...-c......
    fdec:	7ddd b90f 4400 b917 5613 b91d 42b0 b920     .}...D...V...B .
    fdfc:	c557 b920 1380 b921 01ab b920 cb9a b918     W. ...!... .....
    fe0c:	b8e7 b90a a9ec b8f9 cc4d b8eb b0be b8e6     ........M.......
    fe1c:	c745 b8d8 a1dc b8bc 52c6 b8a2 20bf b899     E........R... ..
    fe2c:	72e3 b898 6eb6 b889 f4cc b843 532d b7cd     .r...n....C.-S..
    fe3c:	9e88 b782 a091 b7ec 0ce7 b84b 4c7e b85f     ..........K.~L_.
    fe4c:	5a49 b819 d200 b752 46fc 35ba 7945 b5a5     IZ....R..F.5Ey..
    fe5c:	8018 b750 ec50 b78d 23b2 b6fe f562 3715     ..P.P....#..b..7
    fe6c:	cb4e 37c3 c0fe 3806 9093 380c 30e7 37dc     N..7...8...8.0.7
    fe7c:	eec7 3785 2f2c 3762 8079 37bf da54 381c     ...7,/b7y..7T..8
    fe8c:	89c5 3851 d785 3878 f0ee 3888 5afe 3889     ..Q8..x8...8.Z.8
    fe9c:	147e 3880 5a3d 3877 8a82 3887 2058 38a0     ~..8=Zw8...8X .8
    feac:	3945 38ba 108b 38ce f5f1 38d9 5c08 38e1     E9.8...8...8.\.8
    febc:	8b4d 38e9 568d 38f5 5832 3903 bdba 390f     M..8.V.82X.9...9
    fecc:	3c10 391e 47f4 392c 4991 393a d38a 3948     .<.9.G,9.I:9..H9
    fedc:	f0c4 3956 f2f3 3966 aace 397d 33c7 398e     ..V9..f9..}9.3.9
    feec:	6126 39a0 72b0 39b3 45c9 39c5 8727 39d4     &a.9.r.9.E.9'..9
    fefc:	b24e 39e0 cfd0 39e9 74c2 39f1 1d34 39f9     N..9...9.t.94..9
    ff0c:	e976 39fe d79f 39ff dc07 39fc 317a 39fa     v..9...9...9z1.9
    ff1c:	5c54 39fa fed6 39fb 33e6 39fb 33a9 39f4     T\.9...9.3.9.3.9
    ff2c:	e6eb 39e6 f585 39d7 eb67 39cb dcf3 39c2     ...9...9g..9...9
    ff3c:	6cb9 39bb ee7b 39b6 733d 39b7 10a6 39bc     .l.9{..9=s.9...9
    ff4c:	4621 39c0 2751 39be 8229 39b3 536c 39a6     !F.9Q'.9)..9lS.9
    ff5c:	12ce 39a0 0716 39a2 56e0 39a2 1850 3998     ...9...9.V.9P..9
    ff6c:	7884 3986 79f9 396f 0ae3 3961 32dd 3959     .x.9.yo9..a9.2Y9
    ff7c:	c572 394c 20a8 393b 2bf4 392c 1c0f 3925     r.L9. ;9.+,9..%9
    ff8c:	6820 3922 1ec8 391c e59c 390b 0819 38df      h"9...9...9...8
    ff9c:	7e7e 3896 caae 3824 1cb0 378f 0baf 36a9     ~~.8..$8...7...6
    ffac:	a45a b6ae bf4e b7db b4e4 b889 a58f b8f2     Z...N...........
    ffbc:	0a25 b922 e56e b92d 675d b922 2ab0 b916     %.".n.-.]g"..*..
    ffcc:	a59f b91c 29ce b935 b55d b94b 6a5e b94e     .....)5.].K.^jN.
    ffdc:	a82a b941 cd8e b939 660d b943 db0e b957     *.A...9..fC...W.
    ffec:	3707 b969 71eb b972 f1ff b978 9135 b981     .7i..qr...x.5...
    fffc:	3ea0 b989 d6b0 b991 56fb b998 b8d1 b99a     .>.......V......
   1000c:	7a0d b99a 872b b99b 0b24 b9a0 b035 b9a6     .z..+...$...5...
   1001c:	2fb3 b9ad 21ea b9b3 9f40 b9b9 f6d9 b9c0     ./...!..@.......
   1002c:	dc53 b9c7 afd9 b9cc 90e0 b9ce 6c3d b9cd     S...........=l..
   1003c:	2063 b9ca 250a b9c6 0605 b9c2 e050 b9bc     c ...%......P...
   1004c:	c839 b9b5 afc3 b9ac 7c6b b9a2 8525 b999     9.......k|..%...
   1005c:	c129 b994 1126 b995 d9e3 b997 a251 b998     )...&.......Q...
   1006c:	27aa b994 c84c b98a a38b b980 5a40 b975     .'..L.......@Zu.
   1007c:	1bb7 b974 27b1 b975 0515 b96f 0022 b962     ..t..'u...o.".b.
   1008c:	0449 b955 67ec b94b 269c b943 b689 b939     I.U..gK..&C...9.
   1009c:	4e08 b92e d3c7 b921 5be9 b916 cadb b90c     .N....!..[......
   100ac:	99f8 b903 2611 b8f3 185a b8e0 0344 b8d3     .....&..Z...D...
   100bc:	f196 b8cd 643b b8cc d023 b8c5 aa01 b8b7     ....;d..#.......
   100cc:	1d7f b8a9 3768 b89f aedb b893 09ed b87d     ....h7........}.
   100dc:	5809 b844 ad48 b80c f389 b7b0 e9be b6ff     .XD.H...........
   100ec:	e5e6 36dc 1b85 379e b164 37e9 7442 3811     ...6...7d..7Bt.8
   100fc:	9d64 3827 8021 3837 9398 384c 073a 3879     d.'8!.78..L8:.y8
   1010c:	275a 389d e2ce 38b9 5579 38c7 c517 38c9     Z'.8...8yU.8...8
   1011c:	24c5 38d0 016b 38e7 22ef 3907 ac62 391a     .$.8k..8.".9b..9
   1012c:	68d3 3921 c1ea 3914 5463 38fa 1bc2 38da     .h!9...9cT.8...8
   1013c:	2114 38df 4910 38fb eede 3905 f158 38fd     .!.8.I.8...9X..8
   1014c:	ba7f 38df 72ce 38ca 914b 38c2 04bf 38bb     ...8.r.8K..8...8
   1015c:	1c9b 38b0 50d4 38ac 06c7 38b5 3946 38c1     ...8.P.8...8F9.8
   1016c:	2c86 38c4 1a4b 38bb 9505 38af 9dd8 38ad     .,.8K..8...8...8
   1017c:	f2ea 38b6 6544 38c0 11d8 38bc 0853 38a6     ...8De.8...8S..8
   1018c:	d408 3887 122e 385e 0571 383c 7fea 3814     ...8..^8q.<8...8
   1019c:	b5df 37b6 1ee0 36d8 e866 b727 0cae b7f6     ...7...6f.'.....
   101ac:	8d01 b842 3713 b854 cfbe b81e 78a5 b766     ..B..7T......xf.
   101bc:	289c 3728 aff9 3796 50c5 3627 264a b7c0     .((7...7.P'6J&..
   101cc:	5642 b818 d873 b80e 2ee4 b7fe 634d b812     BV..s.......Mc..
   101dc:	fe20 b83c 86eb b85a d07a b84f 8f35 b82e      .<...Z.z.O.5...
   101ec:	f556 b82a ad0d b850 0051 b869 d1f6 b844     V.*...P.Q.i...D.
   101fc:	ee9a b7f6 9672 b79c e9ed b7be fffc b80d     ....r...........
   1020c:	396f b818 5b6b b7b8 b9a5 3636 6f79 37bf     o9..k[....66yo.7
   1021c:	122a 37df 2b9d 3771 813d b685 a6ce b7a8     *..7.+q7=.......
   1022c:	fda0 b805 dfb4 b822 0d47 b81d 380b b7cd     ......".G....8..
   1023c:	bdbd b693 6b70 36ec 2f9d b64f 46f8 b7e2     ....pk.6./O..F..
   1024c:	6927 b833 42a4 b825 d323 b7d2 d58e b768     'i3..B%.#.....h.
   1025c:	9851 b73e 688a b772 ad7d b79a 2d0f b7b5     Q.>..hr.}....-..
   1026c:	a088 b7c2 cdc1 b7b5 9e6e b792 f81b b76f     ........n.....o.
   1027c:	e275 b76c 0f7d b76e 8dad b740 80fc b6db     u.l.}.n...@.....
   1028c:	7e8d b5cb 8fbb 35dc ea38 354b 1dc9 b685     .~.....58.K5....
   1029c:	bc32 b703 bf93 b6c2 39cc 3635 717f 374b     2........956.qK7
   102ac:	21af 3753 2ba8 b591 c20f b7a3 d55d b7e4     .!S7.+......]...
   102bc:	09ed b7b9 5301 b77e 5fb4 b772 2f4d b796     .....S~.._r.M/..
   102cc:	ea1a b7a8 c873 b787 3119 b6b7 5f86 3652     ....s....1..._R6
   102dc:	ef52 b3e3 6b06 b734 20e6 b77f 4259 b70b     R....k4.. ..YB..
   102ec:	09db 3666 be49 373e b5da 373d 3007 36a5     ..f6I.>7..=7.0.6
   102fc:	4b6a b605 21a0 b6ab 2200 b699 cabf b630     jK...!..."....0.
   1030c:	15ab b679 143a b76c bf4d b804 82e8 b82b     ..y.:.l.M.....+.
   1031c:	4563 b7f9 cc9d b6b6 6154 3759 79db 371c     cE......TaY7.y.7
   1032c:	a02c b7af ae64 b884 5053 b8c0 e4ee b8c5     ,...d...SP......
   1033c:	0711 b8ad bfa0 b896 3747 b88c 8b79 b881     ........G7..y...
   1034c:	aece b84a b0cb b7d3 265e b69b 7977 b5dc     ..J.....^&..wy..
   1035c:	f175 3741 b6eb 3780 5e6b 37c4 aa40 37ee     u.A7...7k^.7@..7
   1036c:	2d86 37dd 75fe 37b2 fc82 37a7 f422 37ca     .-.7.u.7...7"..7
   1037c:	394f 37ed f04a 37e4 d08b 37d0 708e 37ef     O9.7J..7...7.p.7
   1038c:	e598 3819 2329 3822 50a0 37fd 73b7 37b8     ...8)#"8.P.7.s.7
   1039c:	a36c 37e6 6720 3847 d682 3893 e6cb 38ac     l..7 gG8...8...8
   103ac:	f311 389f cf07 386e b75f 381f 9555 37fb     ...8..n8_..8U..7
   103bc:	ba4e 3807 e160 381d 6ff5 3820 dff5 380a     N..8`..8.o 8...8
   103cc:	fa9a 37f2 9eb7 3807 3a48 382d 85c3 384c     ...7...8H:-8..L8
   103dc:	4d90 3858 a1bd 385d f361 386c d960 3882     .MX8..]8a.l8`..8
   103ec:	0767 388c 3bc8 3889 ca16 386e 3744 383f     g..8.;.8..n8D7?8
   103fc:	afe9 382d e0a1 3859 7f0b 3898 5479 38bb     ..-8..Y8...8yT.8
   1040c:	e574 38bd f7a7 38a3 de31 3886 fe85 3876     t..8...81..8..v8
   1041c:	f8ed 387c dc8e 3879 7aaa 3857 7c7d 381e     ..|8..y8.zW8}|.8
   1042c:	02aa 37d3 e069 37b3 fce0 37fe 60a9 383a     ...7i..7...7.`:8
   1043c:	3dba 3851 8175 3830 1865 37f6 2ae7 37ab     .=Q8u.08e..7.*.7
   1044c:	252c 376b d19f 366c 4f23 b75d d151 b808     ,%k7..l6#O].Q...
   1045c:	28b3 b853 7131 b884 692f b893 d7bc b89e     .(S.1q../i......
   1046c:	684b b8b3 3afc b8d3 05d2 b8f2 296e b901     Kh...:......n)..
   1047c:	6f80 b902 a337 b904 3238 b90e 17fe b91b     .o..7...82......
   1048c:	714c b920 1305 b91b 4da8 b915 780a b919     Lq ......M...x..
   1049c:	aaba b923 e948 b926 3d17 b91d 8b4a b90d     ..#.H.&..=..J...
   104ac:	138a b903 4b82 b902 408a b905 f821 b901     .....K...@..!...
   104bc:	5351 b8eb 718a b8d1 9a84 b8c8 8553 b8cc     QS...q......S...
   104cc:	7966 b8cc 31f4 b8c8 82c0 b8ce c431 b8e2     fy...1......1...
   104dc:	d3ee b8f5 af75 b8f6 af54 b8e2 e8ac b8c8     ....u...T.......
   104ec:	9035 b8b8 6e8b b8ab a80a b890 a7f1 b851     5....n........Q.
   104fc:	a7cd b809 5d07 b7c2 51b1 b7bd afd5 b801     .....]...Q......
   1050c:	a46b b836 8377 b858 61c2 b856 c7e1 b840     k.6.w.X..aV...@.
   1051c:	4a03 b82d 1007 b824 f008 b81a 24c8 b7e6     .J-...$......$..
   1052c:	6333 b6d2 a4e9 379a d86a 3808 6b95 3802     3c.....7j..8.k.8
   1053c:	0980 37b4 155f 3789 8c12 37bb 8c78 3812     ...7_..7...7x..8
   1054c:	e16b 383e a14e 385c 8393 387c 2a7c 388b     k.>8N.\8..|8|*.8
   1055c:	14e8 3881 abc8 382a 4367 3777 3cb8 370c     ...8..*8gCw7.<.7
   1056c:	6120 381c 5423 38b1 b601 38ec 2321 38db      a.8#T.8...8!#.8
   1057c:	3229 389e 85f9 3856 c0b3 382f e5ab 382e     )2.8..V8../8...8
   1058c:	011e 3834 cd6b 3847 91ea 3880 eb1b 38a6     ..48k.G8...8...8
   1059c:	9590 38bd 2180 38b5 1968 3895 d4ff 3871     ...8.!.8h..8..q8
   105ac:	a129 3874 571c 3892 4552 38a2 b38d 38a3     ).t8.W.8RE.8...8
   105bc:	d3d0 38ae f7c6 38cb 38cb 38ea f035 3901     ...8...8.8.85..9
   105cc:	db2a 390d 834f 390f 5eac 38fb 7327 38c6     *..9O..9.^.8's.8
   105dc:	8843 38ab e9d7 38bd 4fb8 38e9 45bb 38fc     C..8...8.O.8.E.8
   105ec:	8abc 38d2 7786 388c 055c 3870 aff0 38b4     ...8.w.8\.p8...8
   105fc:	4858 390c 332c 3935 7c4c 3947 1976 3946     XH.9,359L|G9v.F9
   1060c:	c9bc 393d 8f33 3939 4c46 393b 8389 3940     ..=93.99FL;9..@9
   1061c:	c983 3947 7d03 394d bd8c 3949 59bc 3937     ..G9.}M9..I9.Y79
   1062c:	1bc8 391b 686b 3902 7b0d 38f4 e105 3904     ...9kh.9.{.8...9
   1063c:	1a61 3917 68a0 3921 a1ba 391b 5aeb 3907     a..9.h!9...9.Z.9
   1064c:	fffe 38d8 7b2b 38ad 59cb 389f 7c8e 38aa     ...8+{.8.Y.8.|.8
   1065c:	eb59 38b0 237a 3896 bcf9 3842 a0a2 37fc     Y..8z#.8..B8...7
   1066c:	1792 3820 26f6 3865 0c6b 383d 7446 369c     .. 8.&e8k.=8Ft.6
   1067c:	d31f b7d3 c424 b707 0941 380f 255f 3832     ....$...A..8_%28
   1068c:	d7dd b703 761d b8a6 684c b8f0 8d6f b8ca     .....v..Lh..o...
   1069c:	f76f b886 1fd6 b88d 4048 b8de 2068 b90a     o.......H@..h ..
   106ac:	ad89 b8e0 7d25 b85b 5911 b7ab 2551 b819     ....%}[..Y..Q%..
   106bc:	7bf7 b8a3 e2bd b8e6 1f07 b8fc 9c14 b8f4     .{..............
   106cc:	b915 b8ed 937a b8fa a06e b90b 8add b915     ....z...n.......
   106dc:	abdd b910 82c7 b902 4db2 b8ff a4b1 b917     .........M......
   106ec:	a1ea b93f dc57 b958 7376 b952 908a b93c     ..?.W.X.vsR...<.
   106fc:	5447 b935 8d69 b94c 92c4 b978 3c97 b98d     GT5.i.L...x..<..
   1070c:	1aff b98b e737 b970 9b7b b948 3e28 b930     ....7.p.{.H.(>0.
   1071c:	5438 b928 ed18 b92b c1e9 b92f b041 b929     8T(...+.../.A.).
   1072c:	76f6 b922 c4a0 b928 7faa b937 be7c b93e     .v"...(...7.|.>.
   1073c:	8984 b937 b66f b920 bc70 b900 81a9 b8e0     ..7.o. .p.......
   1074c:	f08d b902 a520 b925 0192 b931 8f3d b917     .... .%...1.=...
   1075c:	63ff b8da 5109 b89b c760 b88e 6ced b8a5     .c...Q..`....l..
   1076c:	6a72 b8b4 cd99 b8a5 1786 b88b ea7b b871     rj..........{.q.
   1077c:	16da b85d aabb b855 8964 b87c af0a b8b6     ..]...U.d.|.....
   1078c:	2983 b8fe d437 b90c f067 b8dc 183b b84f     .)..7...g...;.O.
   1079c:	ebab b74d 22e0 b7cb daa5 b880 de8c b898     ..M.."..........
   107ac:	7bbe b83a f640 b745 1d17 b708 722b b7d8     .{:.@.E.....+r..
   107bc:	3e2d b810 7919 b796 bae7 3737 4620 37e5     ->...y....77 F.7
   107cc:	5cb0 37aa 5881 360e 9221 b6f3 7c13 3579     .\.7.X.6!....|y5
   107dc:	d804 37a9 fafa 381a e206 382b 3a4a 3811     ...7...8..+8J:.8
   107ec:	c139 3801 8551 382a 1d14 3881 e7a3 38ac     9..8Q.*8...8...8
   107fc:	6f2c 38c9 a0ff 38dc c941 38f1 25af 3903     ,o.8...8A..8.%.9
   1080c:	a8ae 3907 f121 3905 1808 3903 6394 3903     ...9!..9...9.c.9
   1081c:	9293 3907 2a3e 390f fe1c 3919 1331 3927     ...9>*.9...91.'9
   1082c:	fcb3 3932 770f 3938 34d8 3935 1055 392f     ..29.w89.459U./9
   1083c:	8c1f 3930 ec72 393c b7a2 394a fb09 394c     ..09r.<9..J9..L9
   1084c:	942d 3940 e51e 392f 8cc9 3929 7226 3930     -.@9../9..)9&r09
   1085c:	279d 3936 6fcd 392b 424e 3914 1273 3903     .'69.o+9NB.9s..9
   1086c:	f844 3901 9a27 3908 5ab8 3908 a87e 38f8     D..9'..9.Z.9~..8
   1087c:	40fd 38d7 7500 38bf 0a00 38b9 61da 38c1     .@.8.u.8...8.a.8
   1088c:	31cc 38d2 55d6 38e3 3dcd 38eb c83a 38e1     .1.8.U.8.=.8:..8
   1089c:	3c4b 38c3 e118 3893 88ad 3844 b8d6 37fc     K<.8...8..D8...7
   108ac:	8f88 37bb 3702 3798 270c 3733 138c b5de     ...7.7.7.'37....
   108bc:	8e5f b770 1bd2 b7bc 074a b7e0 b426 b807     _.p.....J...&...
   108cc:	b620 b831 c5be b865 c6fa b887 180a b88d      .1...e.........
   108dc:	dc18 b87e 7339 b856 ca8d b84f c35b b87e     ..~.9sV...O.[.~.
   108ec:	922d b8a0 7e67 b8b4 6aca b8b8 c455 b8ba     -...g~...j..U...
   108fc:	6489 b8c8 cb8b b8e0 7b74 b8f4 2ca7 b8f1     .d......t{...,..
   1090c:	d63e b8d5 4612 b8b6 ea08 b8a9 f4fe b8ba     >....F..........
   1091c:	ad27 b8df 4c65 b8fe 5efc b900 3845 b8ea     '...eL...^..E8..
   1092c:	736b b8d1 bd4b b8c5 a8ac b8c4 0ebf b8c7     ks..K...........
   1093c:	df8c b8c8 70b1 b8c4 fa2f b8b3 705b b898     .....p../...[p..
   1094c:	4b4a b86c 9b08 b81c a4a7 b78a 9ad8 362f     JKl.........../6
   1095c:	a269 377b 9617 3783 bfa1 363c 5303 b79b     i.{7...7..<6.S..
   1096c:	5569 b820 922e b84d ff18 b84e 4a00 b82d     iU ...M...N..J-.
   1097c:	2d34 b800 1add b7cb 31fa b7c1 1981 b7b0     4-.......1......
   1098c:	a29d b785 249c b744 67e0 b6f9 d564 367b     .....$D..g..d.{6
   1099c:	0a77 37c0 101e 382e 50fe 3855 0f92 384e     w..7...8.PU8..N8
   109ac:	3cc2 382e d75e 381a 1a61 3828 a8e3 3840     .<.8^..8a.(8..@8
   109bc:	40f4 383b fe01 380a a6a7 37a0 09c8 376f     .@;8...8...7..o7
   109cc:	4fe7 37bf 7b65 3818 f4a4 382d a6f2 3816     .O.7e{.8..-8...8
   109dc:	429b 3804 ab5c 3820 6e02 385e fc1f 3889     .B.8\. 8.n^8...8
   109ec:	19d2 3892 2332 3885 97cb 3856 a924 381f     ...82#.8..V8$..8
   109fc:	4d99 37eb b83d 37da 629d 381e e95c 387d     .M.7=..7.b.8\.}8
   10a0c:	2dce 38a9 855f 38b1 4fe5 3895 d6ed 3859     .-.8_..8.O.8..Y8
   10a1c:	b3de 3837 a861 3872 80e2 38b8 04ae 38eb     ..78a.r8...8...8
   10a2c:	f88a 38eb df0e 38c5 dbc8 38a2 322a 389f     ...8...8...8*2.8
   10a3c:	aa92 38b3 8413 38c3 ad68 38b7 8b7d 3890     ...8...8h..8}..8
   10a4c:	1750 3849 94c5 381f 936f 383f 3397 3887     P.I8...8o.?8.3.8
   10a5c:	35df 38a3 fd11 3894 f397 3841 3f4c 37bf     .5.8...8..A8L?.7
   10a6c:	83e4 378c eb00 37c7 590f 37f4 0710 37da     ...7...7.Y.7...7
   10a7c:	4bd1 3796 16a1 371a b73e 3564 460d b704     .K.7...7>.d5.F..
   10a8c:	c429 b797 3b5d b7f9 e8bc b82d 9443 b85a     )...];....-.C.Z.
   10a9c:	afd4 b87e 48ed b88b 9a62 b890 f03d b88f     ..~..H..b...=...
   10aac:	025a b88c fe53 b88c f3b6 b898 fd01 b8a5     Z...S...........
   10abc:	9339 b8a3 5003 b892 3451 b883 5a58 b884     9....P..Q4..XZ..
   10acc:	e998 b898 ee01 b8ba 6e1d b8e0 a7df b901     .........n......
   10adc:	e796 b90e 8326 b911 71d3 b907 7b5b b8f7     ....&....q..[{..
   10aec:	3da4 b8f9 8f87 b90b c926 b91b a798 b91d     .=......&.......
   10afc:	ff79 b90c 3e9a b8ed b6b4 b8da c133 b8f5     y....>......3...
   10b0c:	d495 b919 958f b936 afc6 b939 f0dd b91d     ......6...9.....
   10b1c:	6c02 b8f1 9211 b8ca cceb b8db 8d0c b908     .l..............
   10b2c:	2bf6 b920 a3bd b922 b5cd b90e 4f9b b8e9     .+ ..."......O..
   10b3c:	3240 b8cd 1113 b8d2 ff31 b8e4 9128 b8f0     @2......1...(...
   10b4c:	b76c b8f4 cf43 b900 7050 b90c 99bc b910     l...C...Pp......
   10b5c:	5613 b902 0a95 b8ce 4dbe b89d 673a b88a     .V.......M..:g..
   10b6c:	09cd b894 9a35 b8a3 f0f8 b8a6 71e1 b89d     ....5........q..
   10b7c:	099e b881 7594 b800 c3d7 3767 aaf3 3856     .....u....g7..V8
   10b8c:	a453 3889 c1af 3881 8d67 386e 7954 3880     S..8...8g.n8Ty.8
   10b9c:	c2cb 388f 69c9 3885 73a2 3835 9533 37c5     ...8.i.8.s583..7
   10bac:	731d 37c2 f5e6 3835 be8e 3890 586d 38b6     .s.7..58...8mX.8
   10bbc:	4ec2 38c9 1d4f 38d0 794d 38cd 3ceb 38cd     .N.8O..8My.8.<.8
   10bcc:	0f10 38e3 3f5d 3905 b3bf 3911 2430 390f     ...8]?.9...90$.9
   10bdc:	eac1 3907 701b 3907 2bd2 390c b6ae 390b     ...9.p.9.+.9...9
   10bec:	af33 38fc f9cf 38d3 0be3 38bf b764 38cb     3..8...8...8d..8
   10bfc:	0e0e 38e2 c698 38e8 ceeb 38e0 ffdd 38d9     ...8...8...8...8
   10c0c:	4bb5 38e1 4f80 38f0 82b5 38ee 3d13 38d7     .K.8.O.8...8.=.8
   10c1c:	96b5 38c9 9a4b 38dc 9b0d 38ff c0cb 3908     ...8K..8...8...9
   10c2c:	b1f8 3901 9093 38e6 dd36 38dc e3e1 38ef     ...9...86..8...8
   10c3c:	7043 3901 319b 38f9 59ee 38d7 31dd 38b8     Cp.9.1.8.Y.8.1.8
   10c4c:	51d6 38b5 bb09 38d5 c118 3902 fa92 3913     .Q.8...8...9...9
   10c5c:	2bf6 3919 d968 3914 5955 3909 9af0 38f2     .+.9h..9UY.9...8
   10c6c:	ce58 38d9 762d 38df 26fa 3904 7d0e 391d     X..8-v.8.&.9.}.9
   10c7c:	7740 392e 5ce0 3936 af5c 393a 2db9 393f     @w.9.\69\.:9.-?9
   10c8c:	3a23 3945 c1fb 3948 0bf1 3943 1ee1 3937     #:E9..H9..C9..79
   10c9c:	14a5 3930 045d 3930 5b6b 392e 260c 3927     ..09].09k[.9.&'9
   10cac:	7e30 391e 003e 3918 2280 3916 729c 391b     0~.9>..9.".9.r.9
   10cbc:	66ef 3924 b524 3927 9217 3920 52e1 3913     .f$9$.'9.. 9.R.9
   10ccc:	cd72 3908 cfff 3906 0c3d 390a 7b22 3908     r..9...9=..9"{.9
   10cdc:	274d 38f9 7811 38d9 62af 38cb ed1a 38d9     M'.8.x.8.b.8...8
   10cec:	66d9 38f4 e993 38ff e1b4 38ef 2087 38c9     .f.8...8...8. .8
   10cfc:	77c1 3898 5f24 3856 ce61 380d fd02 37a2     .w.8$_V8a..8...7
   10d0c:	8078 36f3 eec5 b622 957f b751 d4f9 b7e0     x..6.."...Q.....
   10d1c:	73bd b83a 2ef9 b87e 34ca b896 8e87 b8a2     .s:...~..4......
   10d2c:	8db2 b8a9 a546 b8b1 e594 b8c0 12c2 b8de     ....F...........
   10d3c:	5c48 b905 0668 b91c 64ba b926 3edf b920     H\..h....d&..> .
   10d4c:	9549 b914 b03c b911 35ad b91a a9a4 b926     I...<....5....&.
   10d5c:	79b2 b930 b991 b935 c793 b936 53ca b936     .y0...5...6..S6.
   10d6c:	c363 b938 0de4 b940 531e b94a b0cd b954     c.8...@..SJ...T.
   10d7c:	f3fa b95c 9b90 b961 c797 b962 1df7 b963     ..\...a...b...c.
   10d8c:	7f4e b966 e529 b96e b951 b97a 61c1 b983     N.f.).n.Q.z..a..
   10d9c:	4cf7 b988 7a0e b98b a9c6 b98c a563 b98b     .L...z......c...
   10dac:	24dd b988 3fc1 b983 9107 b97f be0e b97d     .$...?........}.
   10dbc:	3449 b97c 27ac b977 d8b3 b971 ef4c b96f     I4|..'w...q.L.o.
   10dcc:	7596 b96f fe8a b96d 14e4 b96e fdf6 b972     .uo...m...n...r.
   10ddc:	6329 b97a dbfb b97d dd93 b979 c1c9 b970     )cz...}...y...p.
   10dec:	3a7d b966 091b b95a 9c88 b949 7228 b934     }:f...Z...I.(r4.
   10dfc:	5a02 b91c ed1b b904 4c7f b8e7 c43c b8d6     .Z.......L..<...
   10e0c:	ac1c b8d0 4b37 b8c9 29d2 b8bc 9c72 b8aa     ....7K...)..r...
   10e1c:	8eed b898 4d41 b88b 41d8 b884 5900 b880     ....AM...A...Y..
   10e2c:	55e0 b87e 001d b884 8196 b88d 5213 b88f     .U~..........R..
   10e3c:	33dd b871 9f9a b811 25fc b754 1717 b6b3     .3q......%T.....
   10e4c:	b10b b744 6ac1 b783 158c b628 973d 37d7     ..D..j....(.=..7
   10e5c:	03e7 3857 e0cb 3874 cec1 3847 e713 3801     ..W8..t8..G8...8
   10e6c:	1a49 379a 7673 3765 1b74 3795 1258 3800     I..7sve7t..7X..8
   10e7c:	0b60 3849 fcbd 3876 75d3 3860 305c 3819     `.I8..v8.u`8\0.8
   10e8c:	d15c 37c0 625c 37bd 183f 3816 d85e 386e     \..7\b.7?..8^.n8
   10e9c:	aa78 389c bb1b 38a9 68ff 38aa 1da0 38b6     x..8...8.h.8...8
   10eac:	1388 38d0 53c8 38e8 52dc 38ef 6f78 38e1     ...8.S.8.R.8xo.8
   10ebc:	3f30 38cd cdcd 38cb 212d 38e5 4472 3903     0?.8...8-!.8rD.9
   10ecc:	05f8 390e 12b5 3911 99ac 390f 4e01 3911     ...9...9...9.N.9
   10edc:	663a 3921 9bfc 3942 1db7 3968 ad93 397f     :f!9..B9..h9...9
   10eec:	930f 397f 184e 396e 69c9 3960 c8ee 396b     ...9N.n9.i`9..k9
   10efc:	e208 3988 693c 399e 3078 39a9 3a2b 39a5     ...9<i.9x0.9+:.9
   10f0c:	c53b 399b e837 3999 9b15 39a2 28bf 39ac     ;..97..9...9.(.9
   10f1c:	ff12 39aa c1df 399c c661 3989 f5c3 397a     ...9...9a..9..z9
   10f2c:	9ef1 3978 8ced 3980 e31f 3981 c629 397b     ..x9...9...9).{9
   10f3c:	4b3b 396e 9b70 3960 2240 3956 20f0 3951     ;Kn9p.`9@"V9. Q9
   10f4c:	8e90 3950 8b10 3950 857c 394c 5e85 393f     ..P9..P9|.L9.^?9
   10f5c:	b076 3925 448d 3904 5e07 38d1 7314 38ba     v.%9.D.9.^.8.s.8
   10f6c:	1fb6 38be 7ff6 38c8 15fa 38c9 96a3 38b5     ...8...8...8...8
   10f7c:	73ae 388d 76fc 3838 50c3 37ce 0071 3797     .s.8.v88.P.7q..7
   10f8c:	03e4 37dd 5073 3820 91e8 3828 e59d 380a     ...7sP 8..(8...8
   10f9c:	6040 37c6 74a7 3709 5ed4 b7ac cba0 b875     @`.7.t.7.^....u.
   10fac:	3cac b8bd 8fb6 b8ce dc7d b8a5 1283 b854     .<......}.....T.
   10fbc:	ef99 b83c b1de b8a5 09d2 b90c fbe2 b931     ..<...........1.
   10fcc:	ad66 b92d 3659 b90f a8d6 b8f9 165e b90f     f.-.Y6......^...
   10fdc:	5d5b b93c 4800 b963 ff1c b968 7559 b950     []<..Hc...h.YuP.
   10fec:	7fe0 b935 694c b932 8656 b94a e8da b96a     ..5.Li2.V.J...j.
   10ffc:	b81f b97c baca b977 edff b965 3ff7 b957     ..|...w...e..?W.
   1100c:	889f b951 9d4b b94c c230 b940 d862 b935     ..Q.K.L.0.@.b.5.
   1101c:	8fbc b93a 5b38 b94e dad9 b960 00e3 b966     ..:.8[N...`...f.
   1102c:	f6d0 b95f e14d b957 4e7d b954 dc40 b953     .._.M.W.}NT.@.S.
   1103c:	09e7 b94f 7fdf b941 c627 b92d 3033 b916     ..O...A.'.-.30..
   1104c:	e868 b8f9 f138 b8d9 34d0 b8e2 978f b900     h...8....4......
   1105c:	e6d3 b905 4ade b8f0 f31d b8c2 f85b b8a4     .....J......[...
   1106c:	1454 b8ac a5a9 b8d1 816b b8f1 c7f1 b8e7     T.......k.......
   1107c:	2c57 b8b6 0aaa b881 1f6a b84b 03c1 b842     W,......j.K...B.
   1108c:	0e8e b845 44cf b846 14bf b849 38ca b848     ..E..DF...I..8H.
   1109c:	7376 b834 cd07 b809 47dc b7b8 4114 b79b     vs4......G...A..
   110ac:	04aa b7df 8802 b827 cda2 b845 2fa2 b837     ......'...E../7.
   110bc:	80ec b811 7bae b7e9 b5b3 b7db c08d b7e4     .....{..........
   110cc:	339e b7e6 8f5d b7de 2573 b7dc 703f b7d6     .3..]...s%..?p..
   110dc:	5f95 b7af 4334 b734 5055 35f5 b618 3749     ._..4C4.UP.5..I7
   110ec:	4d9e 379d 8867 37d6 9178 3814 e304 3845     .M.7g..7x..8..E8
   110fc:	9bda 3877 c205 3894 4ee7 38ab 7839 38b9     ..w8...8.N.89x.8
   1110c:	f462 38be 1ca0 38c4 2736 38d2 236a 38ea     b..8...86'.8j#.8
   1111c:	7fdb 3900 392d 3904 677f 3900 8bb5 38fb     ...9-9.9.g.9...8
   1112c:	3f38 3905 0b53 3919 4485 3932 bf2e 3942     8?.9S..9.D29..B9
   1113c:	4229 3940 5d51 3930 12bb 3923 677c 3921     )B@9Q]09..#9|g!9
   1114c:	000d 3927 cddb 392c dae2 3931 7312 3935     ..'9..,9..19.s59
   1115c:	c375 3930 0ab9 391e 694b 3902 312d 38d7     u.09...9Ki.9-1.8
   1116c:	960c 38c8 6be8 38d6 528b 38ec 67fa 38fb     ...8.k.8.R.8.g.8
   1117c:	d738 3901 6c76 3904 dced 3906 12ff 390c     8..9vl.9...9...9
   1118c:	55fb 3912 d0b4 390d 1b6a 38eb 1539 38a4     .U.9...9j..89..8
   1119c:	8e8b 3852 761a 3821 713d 383a 5ec3 386f     ..R8.v!8=q:8.^o8
   111ac:	4b26 386c 838e 3818 0542 3765 f6bd b50b     &Kl8...8B.e7....
   111bc:	23e0 b756 ea72 b7c8 db51 b7d6 00e3 b7cc     .#V.r...Q.......
   111cc:	bf55 b810 063c b857 e2b1 b880 2faa b88d     U...<.W....../..
   111dc:	ab91 b8a2 e657 b8c4 2e07 b8e8 b32c b8ec     ....W.......,...
   111ec:	a150 b8b9 92e2 b86b 0993 b868 ee13 b8d1     P.....k...h.....
   111fc:	8bc6 b925 2263 b93b 3f24 b913 916e b898     ..%.c";.$?..n...
   1120c:	5389 b805 1d5a b855 017b b8ea c4f0 b92c     .S..Z.U.{.....,.
   1121c:	57f5 b935 0006 b910 f9e0 b8be ddcd b88a     .W5.............
   1122c:	7f1d b88a 3469 b893 04c2 b884 3b4a b856     ....i4......J;V.
   1123c:	fc02 b850 f773 b868 5b92 b84e deca b7eb     ..P.s.h..[N.....
   1124c:	427c b746 5ef2 b76d 33df b7f3 db50 b832     |BF..^m..3..P.2.
   1125c:	72ef b846 f5a5 b83c d3d7 b836 478b b841     .rF...<...6..GA.
   1126c:	19b2 b846 b936 b830 48fc b80b 3258 b7dd     ..F.6.0..H..X2..
   1127c:	97ae b7d6 1ee9 b7fe f1df b80e 1705 b7f6     ................
   1128c:	ecf6 b78a b60c b6a2 2617 b5af f19c b687     .........&......
   1129c:	984d b6e6 028c b6f5 aa51 b705 3d2a b725     M.......Q...*=%.
   112ac:	b0b0 b6c6 ef5d 374f 8777 3826 fa70 386f     ....].O7w.&8p.o8
   112bc:	6301 3865 9d6d 382c d9b4 37fa f21c 37d8     .ce8m.,8...7...7
   112cc:	9b15 37f6 070f 3824 58b3 3851 824a 3871     ...7..$8.XQ8J.q8
   112dc:	4bea 3885 9379 3894 90a3 38a5 c34e 38b2     .K.8y..8...8N..8
   112ec:	5ec9 38b9 485a 38bb 6954 38bb 8e28 38ba     .^.8ZH.8Ti.8(..8
   112fc:	16d8 38b8 451b 38b0 0b3b 389d 50b9 3884     ...8.E.8;..8.P.8
   1130c:	cd08 387e 6c0e 38a0 aa94 38d1 c743 38e4     ..~8.l.8...8C..8
   1131c:	7f08 38c3 7c89 3880 0df0 3807 0264 37d9     ...8.|.8...8d..7
   1132c:	bc2e 384c 726b 38a7 f996 38b6 44f2 3887     ..L8kr.8...8.D.8
   1133c:	c7d3 380c 4a88 3795 7e0f 37c7 eab6 3827     ...8.J.7.~.7..'8
   1134c:	9a3a 3842 9fcb 380e 750a 3787 3ee5 373b     :.B8...8.u.7.>;7

0001135c <x_p2>:
   1135c:	e419 386a a0bf 3804 d5ab 3766 4bd0 37cc     ..j8...8..f7.K.7
   1136c:	a8c6 387c 5254 38bb 03d7 38a3 5595 37e9     ..|8TR.8...8.U.7
   1137c:	9636 b7a0 8e61 b7dc 6fa9 b399 c0cd 37b4     6...a....o.....7
   1138c:	c9ab 375c 9d3f b75e 8bba b7c6 88e7 355d     ..\7?.^.......]5
   1139c:	54ed 381b a7e5 381f 22a9 b73a 6a19 b899     .T.8...8.":..j..
   113ac:	624d b8db 29e9 b8ce 37e0 b89b f79b b860     Mb...)...7....`.
   113bc:	92c5 b84e 4324 b873 1e47 b892 5a4f b8ac     ..N.$Cs.G...OZ..
   113cc:	4df6 b8d0 ac5b b8f3 1ece b8fe fc2e b8ea     .M..[...........
   113dc:	1056 b8d2 0c54 b8cd 39bb b8de b271 b8f1     V...T....9..q...
   113ec:	6b3e b8ef 4ccc b8cd 2f9b b89b 0713 b872     >k...L.../....r.
   113fc:	ebaa b866 7a4f b86c a359 b85b 5d5b b83f     ..f.Ozl.Y.[.[]?.
   1140c:	e15a b828 efd4 b804 6f87 b759 62af 3761     Z.(......oY..ba7
   1141c:	1e10 3807 a754 37e7 d2c0 3632 60db b7a9     ...8T..7..26.`..
   1142c:	2ab2 b7b6 4b66 b637 d02e 37ab 6a9f 37f4     .*..fK7....7.j.7
   1143c:	5e49 3769 1e9e b78f a608 b832 14fa b837     I^i7......2...7.
   1144c:	b613 b792 9e60 378c 1dff 3800 5562 3760     ....`..7...8bU`7
   1145c:	ba71 b78b 8aa9 b80a 02fc b7be 8f9e 3701     q..............7
   1146c:	4bd1 3811 0348 381a 42b6 37a4 aa6c 3727     .K.8H..8.B.7l.'7
   1147c:	c350 37af 9b69 3818 2ec8 3805 430c 33e8     P..7i..8...8.C.3
   1148c:	6e57 b828 bffb b880 614c b867 9828 b820     Wn(.....Lag.(. .
   1149c:	c42f b7ee 537e b800 14ea b841 524b b898     /...~S....A.KR..
   114ac:	cc2a b8cb 5062 b8db 58fe b8bf 8bd9 b886     *...bP...X......
   114bc:	f3c5 b817 3751 b7d8 8fb1 b847 bc72 b8c3     ....Q7....G.r...
   114cc:	2c86 b907 b757 b902 1614 b8b6 1406 b85a     .,..W.........Z.
   114dc:	c048 b856 1d7d b8ac d10a b8f3 e2c5 b907     H.V.}...........
   114ec:	453e b8fa 2261 b8cb a9ad b89b b644 b87b     >E..a"......D.{.
   114fc:	1cd0 b876 0419 b888 d034 b881 f601 b80f     ..v.....4.......
   1150c:	ae33 3795 6674 38a1 8199 38fa 875a 390e     3..7tf.8...8Z..9
   1151c:	f079 3912 d2a0 391f 745d 393d 07f1 3966     y..9...9]t=9..f9
   1152c:	b724 3984 a630 398a 4e0d 3985 467e 3980     $..90..9.N.9~F.9
   1153c:	07d4 3983 32dd 3989 ffbe 398b 156b 398a     ...9.2.9...9k..9
   1154c:	df2d 3986 5e26 3986 abc3 3986 3350 3981     -..9&^.9...9P3.9
   1155c:	57d5 396e 4363 3966 8640 3970 d880 3976     .Wn9cCf9@.p9..v9
   1156c:	4dc1 3964 778d 3940 45fa 3927 ecb3 392d     .Md9.w@9.E'9..-9
   1157c:	7584 394b f954 3958 b5f9 3937 e5ea 38f2     .uK9T.X9..79...8
   1158c:	d7a9 38a0 456f 38b2 b384 3905 29a3 3933     ...8oE.8...9.)39
   1159c:	8ab3 3942 3cb1 392c 516b 3906 495c 38d9     ..B9.<,9kQ.9\I.8
   115ac:	b7ca 38c9 8253 38c7 2c34 38c3 b291 38b9     ...8S..84,.8...8
   115bc:	a773 38a8 bb96 388e 7e28 385c c18b 3820     s..8...8(~\8.. 8
   115cc:	dcb7 3811 308b 384b e37f 3893 766c 38a8     ...8.0K8...8lv.8
   115dc:	d25b 3889 d5c1 381c 36a7 379d 417f 37b2     [..8...8.6.7.A.7
   115ec:	4f75 3812 d844 3836 d9df 3837 e602 3833     uO.8D.68..78..38
   115fc:	5c8d 3834 e1f1 381e a584 37e1 8c8e 37a2     .\48...8...7...7
   1160c:	6510 37a5 ff2e 37a8 69fa 374d ba67 b5ca     .e.7...7.iM7g...
   1161c:	ee89 b722 4947 b6d4 5ea9 b637 a05c b791     ..".GI...^7.\...
   1162c:	64e6 b858 9396 b8b2 302a b8cc 7dd6 b8b8     .dX.....*0...}..
   1163c:	5ada b8a1 9ede b8b1 42a5 b8eb eee3 b913     .Z.......B......
   1164c:	d89a b91e 3396 b912 268c b8fe 813c b8f3     .....3...&..<...
   1165c:	b06c b901 a2ac b907 a307 b906 2690 b905     l............&..
   1166c:	a30e b908 6f13 b915 8fb4 b929 b7d7 b934     .....o....)...4.
   1167c:	72b8 b929 768b b912 9910 b908 7faf b917     .r)..v..........
   1168c:	b518 b92f d2a6 b933 6227 b918 cd4e b8e2     ../...3.'b..N...
   1169c:	0420 b8b3 e4f2 b8ac 063f b8b6 0a61 b8b0      .......?...a...
   116ac:	296e b895 e0a4 b880 29c7 b88e 0993 b8aa     n).......)......
   116bc:	5756 b8a2 c6f0 b84a 7d84 b777 4438 b6d5     VW....J..}w.8D..
   116cc:	c6ca b7e9 bca8 b854 2a0b b83d 5288 b776     ......T..*=..Rv.
   116dc:	6940 36fc 9eee b6d5 ecda b855 5a33 b8c0     @i.6......U.3Z..
   116ec:	7adf b8cc 6a7c b891 885c b816 d555 b7df     .z..|j..\...U...
   116fc:	cf8e b849 b997 b8a4 61d7 b8b9 a42c b88e     ..I......a..,...
   1170c:	a0d6 b80f c131 b75d 3256 b7a0 5c24 b837     ....1.].V2..$\7.
   1171c:	f30a b889 b352 b897 e417 b88d e7f0 b881     ....R...........
   1172c:	d417 b877 2369 b86c 40fe b851 0766 b826     ..w.i#l..@Q.f.&.
   1173c:	e329 b7f7 792c b7d2 ab3a b7d8 e153 b7cc     )...,y..:...S...
   1174c:	4ba8 b786 f1d2 b6a3 0d50 35f7 c8aa 35c6     .K......P..5...5
   1175c:	05b9 b6a1 f668 b752 a1f6 b764 6320 b51e     ....h.R...d. c..
   1176c:	4ec8 37d1 7aaf 384c 5534 3860 ed9d 381d     .N.7.zL84U`8...8
   1177c:	c088 3799 f407 371a b27f 36c9 cdc7 b5a3     ...7...7...6....
   1178c:	e71f b748 1e8f b79b 4eca b78c 5bd7 b721     ..H......N...[!.
   1179c:	0676 b649 373f 34b9 7cb2 35f0 2fe8 35a5     v.I.?7.4.|.5./.5
   117ac:	a456 b6a1 3e45 b792 5163 b80a 703f b83f     V...E>..cQ..?p?.
   117bc:	7933 b850 3d1d b83c 86a3 b826 a733 b82b     3yP..=<...&.3.+.
   117cc:	ccf3 b82c f955 b7ea 406a b62b 3c1b 37b5     ..,.U...j@+..<.7
   117dc:	4a79 3815 c5ed 382c 7b69 3837 6d1c 3842     yJ.8..,8i{78.mB8
   117ec:	ab20 3849 1168 3842 edc1 3834 e647 383f      .I8h.B8..48G.?8
   117fc:	97bc 386a aa83 388c e6b5 389a b5a0 38a1     ..j8...8...8...8
   1180c:	5751 38a3 74b2 389e 675d 3897 1b96 3894     QW.8.t.8]g.8...8
   1181c:	bd22 388f c256 3883 d43e 386f fcdd 386d     "..8V..8>.o8..m8
   1182c:	9dd5 3877 0953 3873 32d3 385e 7bdb 384f     ..w8S.s8.2^8.{O8
   1183c:	7fdd 3858 f78a 3872 e992 3884 c8fd 3887     ..X8..r8...8...8
   1184c:	5617 3884 a6a3 3881 e9f5 3882 8efc 3883     .V.8...8...8...8
   1185c:	a01b 387d 1396 3871 6b84 3875 1b87 388c     ..}8..q8.ku8...8
   1186c:	c7b8 38a7 713f 38b9 2566 38ab 2197 3880     ...8?q.8f%.8.!.8
   1187c:	4993 3831 b995 3823 8dc9 3853 8740 3887     .I18..#8..S8@..8
   1188c:	a036 3897 b961 3899 1d63 3896 5fa6 3890     6..8a..8c..8._.8
   1189c:	cfa5 3888 2e20 3880 30ff 3867 3abf 383e     ...8 ..8.0g8.:>8
   118ac:	5c97 380e 8c93 37d1 43cb 3799 56cb 3724     .\.8...7.C.7.V$7
   118bc:	f4c4 b637 6e19 b796 92cf b809 cf8f b83f     ..7..n........?.
   118cc:	6adc b873 4fc2 b897 bca8 b8b9 5c7a b8dd     .js..O......z\..
   118dc:	a653 b8fd 92d6 b90c a52a b91a 3baf b92d     S.......*....;-.
   118ec:	54a2 b943 0e87 b955 b19c b95c b2dc b95f     .TC...U...\..._.
   118fc:	7de0 b969 dde5 b97b 6bc3 b985 0bd2 b986     .}i...{..k......
   1190c:	fe2c b981 b1fd b97e c1d7 b980 f728 b982     ,.....~.....(...
   1191c:	aee7 b980 dd61 b971 7ae9 b961 70c9 b95a     ....a.q..za..pZ.
   1192c:	5f8b b95b a3c6 b959 0265 b94c 5f9e b934     ._[...Y.e.L.._4.
   1193c:	75ef b921 f21d b920 355f b92e 00fc b937     .u!... ._5....7.
   1194c:	400c b931 5549 b924 6105 b91d 34a7 b920     .@1.IU$..a...4 .
   1195c:	fd1b b924 54f0 b922 3aea b917 ecef b90a     ..$..T"..:......
   1196c:	03ea b905 e8b1 b906 edf5 b90b fd90 b90d     ................
   1197c:	6985 b90a 4173 b904 073e b902 7662 b907     .i..sA..>...bv..
   1198c:	4ea5 b911 1e4e b918 b936 b917 cd29 b912     .N..N...6...)...
   1199c:	5404 b90e dd3f b90c 70a5 b90f 0fd3 b915     .T..?....p......
   119ac:	f629 b917 c5c2 b911 5f2d b903 bef9 b8e8     ).......-_......
   119bc:	741c b8d6 eab8 b8cf b35d b8cb 81a5 b8c1     .t......].......
   119cc:	5111 b8b0 a271 b89b 5627 b886 23a5 b862     .Q..q...'V...#b.
   119dc:	e586 b835 7907 b806 0e78 b7b1 5791 b757     ..5..y..x....WW.
   119ec:	a862 b6f0 4041 3516 1c4c 3773 787f 3802     b...A@.5L.s7.x.8
   119fc:	9379 382f 87dd 3836 6190 382f 98a7 383a     y./8..68.a/8..:8
   11a0c:	46cb 3863 1cda 388f 4818 38ad a451 38c7     .Fc8...8.H.8Q..8
   11a1c:	1ef9 38de dca4 38f1 edca 3901 c157 390a     ...8...8...9W..9
   11a2c:	dac1 3913 ff93 391c d2fb 3925 16c1 392d     ...9...9..%9..-9
   11a3c:	3ada 392f 8ebb 3929 02ba 3920 30ab 391b     .:/9..)9.. 9.0.9
   11a4c:	24de 391f aca6 3927 35f5 392e 8dda 3930     .$.9..'9.5.9..09
   11a5c:	7925 3931 1e40 3934 c4b8 3938 4173 393f     %y19@.49..89sA?9
   11a6c:	17aa 3949 6ba9 3955 2aed 395f f28e 3963     ..I9.kU9.*_9..c9
   11a7c:	a078 3967 4579 396d 476e 3973 3db9 3979     x.g9yEm9nGs9.=y9
   11a8c:	20d2 3981 8c74 3987 ddd3 398d 2b88 3992     . .9t..9...9.+.9
   11a9c:	2e0b 3995 133f 399a 4f8b 39a3 01a8 39af     ...9?..9.O.9...9
   11aac:	324a 39b8 76a8 39bc f069 39bd d4b7 39bf     J2.9.v.9i..9...9
   11abc:	e18d 39c3 e472 39c9 e88b 39ce 13c5 39cf     ...9r..9...9...9
   11acc:	736b 39ca aa9c 39c5 058c 39c5 afed 39c8     ks.9...9...9...9
   11adc:	3590 39cd 3d8a 39ce da5e 39c9 f7dd 39c1     .5.9.=.9^..9...9
   11aec:	1014 39ba 3829 39b4 0a52 39b0 8741 39aa     ...9)8.9R..9A..9
   11afc:	4209 39a0 95ac 3991 26d0 3983 df27 3972     .B.9...9.&.9'.r9
   11b0c:	6b01 3969 167f 3961 e63d 394e dea1 3930     .ki9..a9=.N9..09
   11b1c:	7047 390e 3c24 38da 34ff 389b 4d26 384b     Gp.9$<.8.4.8&MK8
   11b2c:	a94f 37fc a1ae 377d 43d3 b60f 8152 b7c1     O..7..}7.C..R...
   11b3c:	ca35 b840 a695 b88a 19df b8a7 bcb9 b8c1     5.@.............
   11b4c:	1d66 b8f2 8efc b91e 1001 b946 394f b960     f.........F.O9`.
   11b5c:	2c21 b969 c123 b96e 8172 b97f dce7 b98b     !,i.#.n.r.......
   11b6c:	2f58 b994 a01f b994 1927 b990 5ba3 b98d     X/......'....[..
   11b7c:	b328 b98f a4b9 b993 fb08 b992 ab8a b989     (...............
   11b8c:	c952 b975 5081 b965 d76b b973 ec9b b989     R.u..Pe.k.s.....
   11b9c:	425b b993 0e32 b98e 743b b97d 7c3e b95e     [B..2...;t}.>|^.
   11bac:	a223 b94b 0773 b941 a05a b934 bb68 b925     #.K.s.A.Z.4.h.%.
   11bbc:	d28d b91b 3246 b91a f43f b91d 861e b923     ....F2..?.....#.
   11bcc:	85a5 b925 7dbf b91d ecf5 b90b bf53 b8ee     ..%..}......S...
   11bdc:	69d5 b8cb 936d b8bc bd45 b8ce 747f b8f4     .i..m...E....t..
   11bec:	a367 b906 8def b903 0669 b8e9 abad b8c7     g.......i.......
   11bfc:	1951 b8b3 1476 b8a7 106a b898 b849 b88c     Q...v...j...I...
   11c0c:	8da2 b890 114d b894 03fd b86d 5333 b7c5     ....M.....m.3S..
   11c1c:	24fe 3701 5cd7 36f7 14e3 b800 d30e b89d     .$.7.\.6........
   11c2c:	4975 b8bd 38bb b895 883a b82f 5f56 b7c2     uI...8..:./.V_..
   11c3c:	a325 b79a d4da b7a6 56dc b790 9cf9 b70e     %........V......
   11c4c:	f3f9 b6ae 8ced b75c 115f b790 ebe1 b5f5     ......\._.......
   11c5c:	1ca6 37d3 187a 3829 d9c1 37c8 dd49 b7b7     ...7z.)8...7I...
   11c6c:	6568 b887 1eca b88f 403b b821 4e11 b77a     he......;@!..Nz.
   11c7c:	99cb b7aa 4dfe b823 afb6 b82e cca2 b78e     .....M#.........
   11c8c:	d21e 3787 4d9c 37ce 3b99 b611 eda6 b815     ...7.M.7.;......
   11c9c:	1dd8 b831 300d b7b1 dbe1 b529 e343 b62b     ..1..0....).C.+.
   11cac:	7a93 b7b9 609f b81b ccb6 b7e6 a167 3701     .z...`......g..7
   11cbc:	a01c 3837 323b 3842 d030 371d 2dec b804     ..78;2B80..7.-..
   11ccc:	01ca b812 a493 36e0 ebc4 387a 9349 38a7     .......6..z8I..8
   11cdc:	ce5c 3858 94fd 3656 270d b7d6 459e b7a9     \.X8..V6.'...E..
   11cec:	0d33 369c 93c8 37e7 8300 381a f55e 37f1     3..6...7...8^..7
   11cfc:	8eee 369b 8623 b7c6 110f b808 b952 b716     ...6#.......R...
   11d0c:	5627 37f4 5bcc 3854 deee 3832 b857 376a     'V.7.[T8..28W.j7
   11d1c:	44ec b7cc f815 b885 3800 b8bc 4d97 b8b1     .D.......8...M..
   11d2c:	0d89 b836 41eb 377d 99db 3859 3298 3815     ..6..A}7..Y8.2.8
   11d3c:	f0d3 b7a9 e17d b884 157d b877 c246 b7d3     ....}...}.w.F...
   11d4c:	a151 b6ae b6f3 b787 de01 b81f 6c57 b82b     Q...........Wl+.
   11d5c:	0d28 b762 c44f 37ea fc38 3866 31f0 385c     (.b.O..78.f8.1\8
   11d6c:	f238 37ec 23ea b4e9 8462 b79f ba43 b787     8..7.#..b...C...
   11d7c:	928d 3734 6ad8 3852 bc7a 38ad 93bf 38c6     ..47.jR8z..8...8
   11d8c:	e6fd 38b4 fb5d 3895 d8af 3886 fb2b 388f     ...8]..8...8+..8
   11d9c:	6918 38a6 20af 38b4 2600 38ac ac0e 3895     .i.8. .8.&.8...8
   11dac:	d90a 386a 6220 3810 57bd 3798 25f1 37e8     ..j8 b.8.W.7.%.7
   11dbc:	507a 3876 45f6 389f 21d8 3867 df03 3789     zPv8.E.8.!g8...7
   11dcc:	bf91 3653 87cb 3808 7b76 389b 6c02 38a3     ..S6...8v{.8.l.8
   11ddc:	2936 37ea 2cd9 b81c 889c b88a 20e0 b84b     6).7.,....... K.
   11dec:	d040 b781 02b0 3682 bdc3 36fb d392 362a     @......6...6..*6
   11dfc:	3940 b780 845a b846 a38d b891 bb67 b84b     @9..Z.F.....g.K.
   11e0c:	da9d 37a8 9e80 38d7 2773 3919 4654 38ef     ...7...8s'.9TF.8
   11e1c:	9910 37e7 a61a b845 856a b887 ee1f b81f     ...7..E.j.......
   11e2c:	8fc1 b6e3 c163 36fc e452 3690 ed35 b725     ....c..6R..65.%.
   11e3c:	8e6d b7df 10de b81a 51b3 b819 937e b7f2     m........Q..~...
   11e4c:	d6ac b760 05ff 3761 171f 3835 3dfd 3869     ..`...a7..58.=i8
   11e5c:	13f3 3828 66c8 36e6 6492 b7ae 5b7b b7a5     ..(8.f.6.d..{[..
   11e6c:	1ea1 3721 9d5c 37f1 a38e 3651 9e19 b83e     ..!7\..7..Q6..>.
   11e7c:	39d2 b888 1b40 b834 e546 b72e 7c0e 36dc     .9..@.4.F....|.6
   11e8c:	1dec 36a0 70df b725 99b4 b7f2 05c5 b845     ...6.p%.......E.
   11e9c:	54d5 b886 2a90 b894 61f1 b849 2caf b6b3     .T...*...aI..,..
   11eac:	edf6 3707 f3d4 b830 b2fb b904 448b b93d     ...7..0......D=.
   11ebc:	8b94 b933 b15a b900 709c b8b6 8cc4 b8c6     ..3.Z....p......
   11ecc:	f684 b902 c9ed b905 5eb7 b8ad f994 b7c8     .........^......
   11edc:	3c3a 36a5 458d 359c bac5 b648 de1e 3792     :<.6.E.5..H....7
   11eec:	22bc 3863 9f1d 38a1 152c 3898 bb41 387e     ."c8...8,..8A.~8
   11efc:	037b 388e ad64 38c2 acf7 38f0 2ced 38f4     {..8d..8...8.,.8
   11f0c:	f2d2 38cf 898b 38a9 577a 38a2 8677 38b3     ...8...8zW.8w..8
   11f1c:	0381 38c4 45ca 38d1 8ca3 38e0 3411 38dd     ...8.E.8...8.4.8
   11f2c:	a761 38ae 5ddc 3851 0175 3813 a35f 3878     a..8.]Q8u..8_.x8
   11f3c:	6efc 38dd 6252 3904 2540 38b8 549c 3723     .n.8Rb.9@%.8.T#7
   11f4c:	a2b4 b846 c7d7 b81f 7483 379e c8cf 3870     ..F......t.7..p8
   11f5c:	8d77 3821 56fb b700 4f07 b7db e869 34ee     w.!8.V...O..i..4
   11f6c:	fa36 383d c0b6 3894 b348 387e 1caa 37fc     6.=8...8H.~8...7
   11f7c:	fcef 371d 9c88 3747 97da 37c6 e049 3800     ...7..G7...7I..8
   11f8c:	d9f0 3821 cdbe 3865 8f76 3892 5133 3892     ..!8..e8v..83Q.8
   11f9c:	92b6 3863 8da1 3819 ce51 380f 5fcc 3875     ..c8...8Q..8._u8
   11fac:	6c79 38d2 7d0b 3907 9f9c 38f9 2376 38a4     yl.8.}.9...8v#.8
   11fbc:	5759 383b 2937 3846 3d23 38a3 1116 38d5     YW;87)F8#=.8...8
   11fcc:	f8b3 38c9 3eb0 38a3 061e 38a0 2e85 38bf     ...8.>.8...8...8
   11fdc:	a399 38c1 6dc2 388a d4f8 3800 2420 3688     ...8.m.8...8 $.6
   11fec:	c46c b78a 8aa8 b80c 8506 b818 2280 b7a4     l............"..
   11ffc:	e370 3686 28c0 3787 dedb 3717 9203 b74e     p..6.(.7...7..N.
   1200c:	4126 b80b d9c5 b81e 0a41 b7e3 80f2 b794     &A......A.......
   1201c:	ec30 b7a9 f8e3 b7fc deae b82f d9b8 b866     0........./...f.
   1202c:	0795 b887 d83f b87e 3755 b83d 795d b7f7     ....?.~.U7=.]y..
   1203c:	6525 b7b7 539b b7c8 5f66 b821 ecda b880     %e...S..f_!.....
   1204c:	6236 b89e 4450 b88d 97f1 b832 d3f4 b7a9     6b..PD....2.....
   1205c:	f630 b7a9 9e01 b849 4468 b8b5 427a b8e9     0.....I.hD..zB..
   1206c:	4d1c b8f1 f542 b8e7 cced b8ee b804 b903     .M..B...........
   1207c:	7a57 b90a b9ca b902 2844 b8e0 8ba8 b8ae     Wz......D(......
   1208c:	44a9 b881 5d51 b87a e2e1 b8b5 6b75 b904     .D..Q]z.....uk..
   1209c:	8685 b91c 3a53 b914 8ca7 b8f5 e1b4 b8e2     ....S:..........
   120ac:	03ff b907 5c53 b920 df42 b915 f809 b8cd     ....S\ .B.......
   120bc:	105b b870 2cf4 b84f 6219 b884 2619 b88c     [.p..,O..b...&..
   120cc:	4a1f b852 6d61 b80f a65d b82a 4403 b873     .JR.am..].*..Ds.
   120dc:	9788 b848 e770 36d5 bb21 3886 1089 3888     ..H.p..6!..8...8
   120ec:	067b b561 1210 b8a7 d5a7 b8f2 ca0b b8cb     {.a.............
   120fc:	9d71 b84f 92a8 b703 5844 36af ad28 b755     q.O.....DX.6(.U.
   1210c:	ee28 b846 6207 b8a4 25ae b8c8 9411 b8dc     (.F..b...%......
   1211c:	cd07 b8f2 2e61 b902 3d06 b902 1b10 b8f9     ....a....=......
   1212c:	2d9d b8fa 6931 b90a 1f2e b916 0f29 b90a     .-..1i......)...
   1213c:	ca48 b8d7 48d1 b8bd e308 b8ee fb54 b921     H....H......T.!.
   1214c:	b2de b936 207f b924 4ba4 b8fd b52b b8cd     ..6.. $..K..+...
   1215c:	c4b8 b8c6 5ff8 b8bb e4e5 b88b b636 b830     ....._......6.0.
   1216c:	c194 b821 def1 b848 9325 b818 fc96 372e     ..!...H.%......7
   1217c:	343c 3890 2a70 38d7 ba6c 38c6 08ec 3881     <4.8p*.8l..8...8
   1218c:	2dd2 383c aaea 389e 6951 3913 3545 394c     .-<8...8Qi.9E5L9
   1219c:	e33e 3957 ed4c 393f 152a 392c 8aef 3939     >.W9L.?9*.,9..99
   121ac:	8da5 395f 0720 3978 2aab 3963 55b8 392b     .._9 .x9.*c9.U+9
   121bc:	060a 3900 40c1 3903 ceb4 3927 11ca 3945     ...9.@.9..'9..E9
   121cc:	c4e9 393a 1958 3905 2b27 3880 2187 3798     ..:9X..9'+.8.!.7
   121dc:	e3d7 378c 5235 384f 12dd 38c1 5569 38f6     ...75RO8...8iU.8
   121ec:	6db5 38ee 20af 38ba fa72 384d 584e b6ba     .m.8. .8r.M8NX..
   121fc:	77fd b871 8343 b898 737a b832 d4f2 b622     .wq.C...zs2...".
   1220c:	66fe 3692 b2b4 b7fd 42cf b891 da73 b882     .f.6.....B..s...
   1221c:	1ac8 b68f 43a8 384c ddb1 3831 38ab b772     .....CL8..18.8r.
   1222c:	9896 b895 ca4a b8bc a404 b88b e2be b7b6     ....J...........
   1223c:	c581 37b2 b6f1 3853 bdee 3864 857d 37bd     ...7..S8..d8}..7
   1224c:	bcca b804 acbd b893 6ddf b88f 8b8e b7d9     .........m......
   1225c:	ab35 3829 7b8f 38c2 bb8b 38ad 39aa b605     5.)8.{.8...8.9..
   1226c:	a57f b8f4 681d b945 4323 b932 6e62 b8a7     .....hE.#C2.bn..
   1227c:	b031 36fb 59b4 3799 a1bb b867 48da b91e     1..6.Y.7..g..H..
   1228c:	b32c b959 e926 b962 39e6 b948 5d6a b910     ,.Y.&.b..9H.j]..
   1229c:	c4c5 b8ad 6dea b896 cca4 b8e1 d390 b90c     .....m..........
   122ac:	9b81 b8ca 1c8c 3657 20e9 38d9 6ab5 3905     ......W6. .8.j.9
   122bc:	628f 3879 0310 b78d f819 b6c1 7c1b 38c0     .by8.........|.8
   122cc:	430b 394c 608f 3976 a78f 3950 eaab 3904     .CL9.`v9..P9...9
   122dc:	3d5b 38c6 27c4 391e 39e1 3985 3cf1 39a2     [=.8.'.9.9.9.<.9
   122ec:	e077 398b 47eb 392c 45a8 38b5 9b48 38b8     w..9.G,9.E.8H..8
   122fc:	a808 391f c32a 396a 7806 398d 7701 3995     ...9*.j9.x.9.w.9
   1230c:	0389 398a 6b0d 3957 cb69 391a 9a99 390e     ...9.kW9i..9...9
   1231c:	ede5 3935 0a05 3964 a587 3971 be5e 3965     ..59..d9..q9^.e9
   1232c:	624c 3969 fe95 3988 31e1 399f 2a0b 399f     Lbi9...9.1.9.*.9
   1233c:	0ba4 3988 5187 3954 7d66 3919 866b 38bc     ...9.QT9f}.9k..8
   1234c:	02b4 3847 c103 382f e0f9 38a7 b5f4 3914     ..G8../8...8...9
   1235c:	963c b8ba f04b b797 6ab7 38a9 9891 3905     <...K....j.8...9
   1236c:	0572 38c7 401d 37b4 fd9b b82c 4c7d b882     r..8.@.7..,.}L..
   1237c:	e788 b801 0c8c 3817 f806 38c7 367c 38d8     .......8...8|6.8
   1238c:	d137 384e cbca b7e6 5923 b887 f87e b803     7.N8....#Y..~...
   1239c:	1ca2 381f 2750 38a5 f5cb 3858 c7a1 b7d7     ...8P'.8..X8....
   123ac:	b2d6 b8c2 83eb b8d6 e7ae b889 f982 b803     ................
   123bc:	67e4 b807 74d3 b88c 7952 b8e1 fdc6 b8f2     .g...t..Ry......
   123cc:	f6a4 b89d a29a b73e 68b8 37e8 6ab0 3747     ......>..h.7.jG7
   123dc:	ea54 b83a 10e5 b8c3 b484 b8c6 41c3 b87a     T.:..........Az.
   123ec:	d0a0 b80a 22c9 b845 89cd b8bb 54e3 b8f3     ....."E......T..
   123fc:	ff51 b8c9 4e7d b85c 3bb3 b80f 3926 b863     Q...}N\..;..&9c.
   1240c:	7f94 b89e 5984 b86c e20a 3735 880a 38be     .....Yl...57...8
   1241c:	3f6e 3904 bbec 38af 4e75 b6b4 6d3f b890     n?.9...8uN..?m..
   1242c:	60ac b877 aa74 36eb 55f7 3888 5107 3874     .`w.t..6.U.8.Qt8
   1243c:	d1cf b741 db2c b8a8 359d b8a6 31da b625     ..A.,....5...1%.
   1244c:	8891 38a3 9f77 38a9 50e3 327f 8299 b8c2     ...8w..8.P.2....
   1245c:	0087 b902 9cb9 b8b0 0b33 b7e6 ba29 b73f     ........3...).?.
   1246c:	175e b810 2a64 b83b 6488 b763 407e 37ea     ^...d*;..dc.~@.7
   1247c:	1546 37d8 b04a b813 c413 b8dc b257 b8fd     F..7J.......W...
   1248c:	f117 b8b2 4074 b880 be9d b8af 7797 b907     ....t@.......w..
   1249c:	b1cb b92c 0f2e b93b a917 b92b 5a49 b8f7     ..,...;...+.IZ..
   124ac:	9e20 b862 988e b585 516e 36ef ad61 b81b      .b.....nQ.6a...
   124bc:	7ef3 b8c5 46cc b8f8 e0c0 b8e5 04a4 b8d0     .~...F..........
   124cc:	11d7 b8dd 4bb9 b8fe 3076 b906 97ed b8e9     .....K..v0......
   124dc:	2efe b89c 1e30 b816 d5ca b756 12d2 b72a     ....0.....V...*.
   124ec:	7149 b7b3 1aff b806 07e9 b7ce 08fb 3659     Iq............Y6
   124fc:	1caa 3808 fd1a 3848 9eb7 3872 bc2f 3897     ...8..H8..r8/..8
   1250c:	b823 38a6 c032 3889 2296 3849 865c 3884     #..82..8."I8\..8
   1251c:	228d 3903 2e46 3950 8c8d 3969 5ce4 3932     .".9F.P9..i9.\29
   1252c:	bb14 38ad e92a 3818 17c2 3886 4a64 3903     ...8*..8...8dJ.9
   1253c:	af10 3924 71f6 3918 b682 390a 2941 3923     ..$9.q.9...9A)#9
   1254c:	404a 3955 f82d 396f f63f 394f a306 3907     J@U9-.o9?.O9...9
   1255c:	a163 38ad 9ae3 38d8 7770 3930 ceab 395b     c..8...8pw09..[9
   1256c:	37f0 3943 1adf 3901 96cb 38a0 c1c8 389e     .7C9...9...8...8
   1257c:	1a82 38de 7f74 3908 209f 38fb 8b60 38a3     ...8t..9. .8`..8
   1258c:	4a25 381b c14f 37d6 9c71 383e c1db 38a5     %J.8O..7q.>8...8
   1259c:	8735 38df 1d95 38ee ea64 38cb fc90 3895     5..8...8d..8...8
   125ac:	00fc 386d c3a1 3881 15dd 38a9 b46c 38c5     ..m8...8...8l..8
   125bc:	c02d 38b6 6189 3882 8dc5 3821 e2d9 3801     -..8.a.8..!8...8
   125cc:	0d70 3825 1021 386f d978 38a5 6a54 38dc     p.%8!.o8x..8Tj.8
   125dc:	217f 390e 2453 3924 bf31 3912 e0f0 38ad     .!.9S$$91..9...8
   125ec:	d587 37f1 4615 379d b548 3828 cafd 385a     ...7.F.7H.(8..Z8
   125fc:	3c91 383a 83c1 3849 00cc 38c3 a7ce 392e     .<:8..I8...8...9
   1260c:	d7d7 3960 a820 3949 3494 38fa 37f1 3864     ..`9 .I9.4.8.7d8
   1261c:	f1af 37c1 8fb1 36a9 3d0f b790 6b94 b828     ...7...6.=...k(.
   1262c:	15bc b866 d35e b857 1c34 b805 0c43 b7bc     ..f.^.W.4...C...
   1263c:	ba54 b836 8bbc b89f 00ec b8bc 634d b8a3     T.6.........Mc..
   1264c:	0849 b857 d25a b7d1 bb2c b78a 651d b80a     I.W.Z...,....e..
   1265c:	01ac b884 0d9c b8b3 b008 b8be 6753 b8c7     ............Sg..
   1266c:	8a3c b8ed 4f56 b906 12d5 b8ec 7141 b89d     <...VO......Aq..
   1267c:	0316 b84b 268e b837 62db b81c 1b84 b5c4     ..K..&7..b......
   1268c:	a54d 387c 1c0b 38e6 6dba 38e6 0035 388d     M.|8...8.m.85..8
   1269c:	d39b 3816 3e27 388a 4a4d 3917 dac7 3955     ...8'>.8MJ.9..U9
   126ac:	e34a 3949 6444 38fd 2b22 3850 f5d7 3829     J.I9Dd.8"+P8..)8
   126bc:	facd 38dd bd28 394e b9f1 3983 c037 397e     ...8(.N9...97.~9
   126cc:	76de 3948 ae92 390e 18ba 38e9 e3f7 38f1     .vH9...9...8...8
   126dc:	9167 38fb fa12 38ea 07d6 38e4 2b74 3908     g..8...8...8t+.9
   126ec:	03af 393a 62c4 396e fa0d 3975 7708 393a     ..:9.bn9..u9.w:9
   126fc:	ce23 38ce 902d 387b 5019 38a0 516c 38ea     #..8-.{8.P.8lQ.8
   1270c:	923d 3905 b2c3 38f4 c361 38d5 7005 38d4     =..9...8a..8.p.8
   1271c:	bd3b 38db 0c8b 38ca 8589 38ae 4088 38ae     ;..8...8...8.@.8
   1272c:	a8b1 38c9 2406 38d9 0773 38b7 0321 384f     ...8.$.8s..8!.O8
   1273c:	80d0 374c 4e19 b679 3109 3561 0e8b 375e     ..L7.Ny..1a5..^7
   1274c:	ccb9 37da 5710 3811 8252 3816 4dab 3817     ...7.W.8R..8.M.8
   1275c:	ed88 3821 b2fa 3814 0ec1 3805 47c0 383c     ..!8...8...8.G<8
   1276c:	cf73 3884 99e9 385f 3924 3747 fc9f b800     s..8.._8$9G7....
   1277c:	3ee0 b844 12ff b7c9 c174 37b1 a93d 381e     .>D.....t..7=..8
   1278c:	7e67 b6fa a240 b8ac d58c b903 6c4f b8ef     g~..@.......Ol..
   1279c:	ebbb b89d 8d17 b874 f083 b8bf eed0 b920     ......t....... .
   127ac:	3cc2 b949 3d05 b937 8e77 b8ee 5f0e b84c     .<I..=7.w...._L.
   127bc:	9f2d b7a3 778d b82b ab2d b8c7 8fba b91c     -....w+.-.......
   127cc:	cd09 b937 1082 b92b 2142 b905 2807 b8c9     ..7...+.B!...(..
   127dc:	57d8 b8c1 e337 b8f3 4f9e b91b dae7 b92a     .W..7....O....*.
   127ec:	c734 b922 e19a b915 d79d b916 b792 b927     4."...........'.
   127fc:	2967 b940 ee54 b94f ce8a b942 3ff5 b918     g)@.T.O...B..?..
   1280c:	d590 b8db 3b61 b8c9 438e b905 1550 b940     ....a;...C..P.@.
   1281c:	c301 b975 86a5 b984 70e8 b979 7702 b962     ..u......py..wb.
   1282c:	8a4b b955 4dce b947 ebff b92b c9ee b90b     K.U..MG...+.....
   1283c:	3a0b b8e6 ad16 b8cf cdc3 b8e2 760a b90e     .:...........v..
   1284c:	19f6 b926 0254 b91c 9489 b8e7 1d47 b8a8     ..&.T.......G...
   1285c:	aacd b8c1 e515 b90e 5429 b923 1f4f b8e6     ........)T#.O...
   1286c:	49a3 b808 1ee7 b6d1 d461 b887 51d6 b91d     .I......a....Q..
   1287c:	6ee8 b937 94ce b8ea 92ac b781 2196 3801     .n7..........!.8
   1288c:	3953 b6bf dd87 b8a2 7089 b8f3 c88f b8d7     S9.......p......
   1289c:	a7de b895 0f9a b86c b802 b884 73c6 b898     ......l......s..
   128ac:	c449 b885 a3f7 b830 d3c0 b816 9156 b873     I.....0.....V.s.
   128bc:	e137 b8b3 e5fa b8b2 b1ee b835 b6ff 37a7     7.........5....7
   128cc:	4c8b 3872 e961 380d 238d b81d 2046 b8e2     .Lr8a..8.#..F ..
   128dc:	8b37 b919 6ce4 b91e 75ff b904 08d4 b8ae     7....l...u......
   128ec:	2c3a b841 d370 b81f 3b32 b880 b649 b8d0     :,A.p...2;..I...
   128fc:	955e b908 3dc2 b90e fa3e b8f8 b6b3 b8d4     ^....=..>.......
   1290c:	e249 b8d4 16a7 b8f5 e44d b909 9773 b906     I.......M...s...
   1291c:	e205 b8d4 0768 b88b 2a1f b85a 8405 b89a     ....h....*Z.....
   1292c:	0db1 b8e9 447a b900 6e9f b8af 4a31 b7b2     ....zD...n..1J..
   1293c:	99e9 36cb 6d98 b807 a40f b8d6 886f b915     ...6.m......o...
   1294c:	7c6b b904 9662 b8a3 3217 b839 9fc8 b865     k|..b....29...e.
   1295c:	18fe b8cc b3a9 b903 2bad b8d4 50f5 b7ff     .........+...P..
   1296c:	168d 3813 e4b2 3823 4fa0 b7d4 0f6f b8d7     ...8..#8.O..o...
   1297c:	18d9 b902 a5a6 b894 7439 3729 12cf 3850     ........9t)7..P8
   1298c:	af59 37b8 c2cc b809 0bbd b871 36d1 b815     Y..7......q..6..
   1299c:	9c4c 3680 439d 37d8 d1f2 379f 05d9 b66d     L..6.C.7...7..m.
   129ac:	f1f1 b7a9 c8e5 b78d c07b 3699 afa3 3801     ........{..6...8
   129bc:	f277 3851 11a1 3877 de50 3884 2a01 3895     w.Q8..w8P..8.*.8
   129cc:	9651 38a3 88d5 388a 8c15 37ee 694a b731     Q..8...8...7Ji1.
   129dc:	5720 b77e 9647 37d1 a7c9 38ab 4ccf 38e7      W~.G..7...8.L.8
   129ec:	6f58 38ba 6d51 3839 c386 37c0 8ba6 3833     Xo.8Qm98...7..38
   129fc:	be6b 38af ed0f 38f6 250f 3908 e69b 3902     k..8...8.%.9...9
   12a0c:	fd96 3901 7e78 3915 d94f 392b cd38 3920     ...9x~.9O.+98. 9
   12a1c:	72a9 38df 3d9e 3883 6970 3881 d276 38de     .r.8.=.8pi.8v..8
   12a2c:	2be7 392b 457a 3949 c8bf 3938 c696 3911     .++9zEI9..89...9
   12a3c:	e490 38f6 6e70 3906 ebdb 3927 0531 394c     ...8pn.9..'91.L9
   12a4c:	3ed1 3963 a12d 3967 3120 395a b673 393f     .>c9-.g9 1Z9s.?9
   12a5c:	bcac 3926 b059 3923 6580 3938 5a7d 394e     ..&9Y.#9.e89}ZN9
   12a6c:	d8e1 3954 26b2 3954 b9c8 395b 1611 396c     ..T9.&T9..[9..l9
   12a7c:	c034 3977 67df 3974 29b2 3968 abb1 3961     4.w9.gt9.)h9..a9
   12a8c:	35e1 3964 74d5 3966 37a2 3964 b65f 3964     .5d9.tf9.7d9_.d9
   12a9c:	fdc4 396d a73c 3977 72f9 396e ab9f 394d     ..m9<.w9.rn9..M9
   12aac:	eae8 392e 0a70 392e 5180 3944 bdfa 3950     ...9p..9.QD9..P9
   12abc:	4582 393d e2ec 3913 700d 38ea 9060 38f0     .E=9...9.p.8`..8
   12acc:	791f 390f 3643 3917 b509 3902 b0ab 38d8     .y.9C6.9...9...8
   12adc:	d04b 38e6 1642 3914 f7a1 3927 3555 390d     K..8B..9..'9U5.9
   12aec:	72a0 389b 49e7 37d7 18eb 37f9 825c 38b0     .r.8.I.7...7\..8
   12afc:	f1bf 3919 5734 392c 34ee 38f2 64ce 381e     ...94W,9.4.8.d.8
   12b0c:	2d2a b6ab 4192 3720 f410 383a 252e 385b     *-...A 7..:8.%[8
   12b1c:	a652 37dd 6523 3609 3623 371f 574d 3815     R..7#e.6#6.7MW.8
   12b2c:	160a 3817 bf2a b76c 4c25 b8ba 713e b910     ...8*.l.%L..>q..
   12b3c:	cd4a b914 06a6 b908 e468 b90b c68d b91f     J.......h.......
   12b4c:	0a1e b934 d6f4 b946 ac5b b95c 9747 b973     ..4...F.[.\.G.s.
   12b5c:	6a78 b983 178a b989 a60d b98a 389b b98a     xj...........8..
   12b6c:	e570 b986 a72d b979 7428 b95b cf57 b943     p...-.y.(t[.W.C.
   12b7c:	34f9 b940 7563 b94f 2af4 b963 1f60 b96c     .4@.cuO..*c.`.l.
   12b8c:	08cc b967 5927 b95c 51db b955 e8d2 b950     ..g.'Y\..QU...P.
   12b9c:	bde2 b944 3b5a b92d 52c1 b914 f012 b900     ..D.Z;-..R......
   12bac:	9725 b8dc 6cdf b8b6 c98b b89f 49a0 b89a     %....l.......I..
   12bbc:	8d03 b88f b6d2 b868 3cc0 b829 462b b7fa     ......h..<).+F..
   12bcc:	ca71 b7fb ebaa b832 a333 b85e c2bb b835     q.....2.3.^...5.
   12bdc:	60a2 b7a6 050e b609 baa4 36d1 9c20 3715     .`.........6 ..7
   12bec:	db41 358e a683 b78e d995 b800 b72d b7f5     A..5........-...
   12bfc:	916c b787 85d8 b5e8 1505 35f0 c3ce b750     l..........5..P.
   12c0c:	ec2e b814 eba2 b858 3917 b87d 68ca b895     ......X..9}..h..
   12c1c:	2449 b8a5 f5c1 b886 5405 b7ea 8b65 36c1     I$.......T..e..6
   12c2c:	806f 378e 5484 3756 aac8 3776 5968 3800     o..7.TV7..v7hY.8
   12c3c:	5d1f 3837 c47d 3808 b3ac b597 b650 b7ed     .]78}..8....P...
   12c4c:	4e91 b796 fd78 37db 288a 3873 a537 380f     .N..x..7.(s87..8
   12c5c:	71eb b819 36c1 b8d7 9a0a b8ee 546e b87e     .q...6......nT~.
   12c6c:	f53d 3732 3c29 3809 1d6a b77d 80fd b8b9     =.27)<.8j.}.....
   12c7c:	d125 b907 9288 b8e9 3f31 b83d f8f2 37d2     %.......1?=....7
   12c8c:	18c8 384a 58d6 374a e808 b835 670d b891     ..J8.XJ7..5..g..
   12c9c:	5eca b85d acb2 b799 4097 3644 82aa 36d8     .^]......@D6...6
   12cac:	7f5a 378a e20a 3848 a3e7 389d c08e 3878     Z..7..H8...8..x8
   12cbc:	a354 34ff df1c b867 8a84 b886 8b9a b7d5     T..4..g.........
   12ccc:	257d 37f1 5f57 3892 7845 38b7 87bc 38a6     }%.7W_.8Ex.8...8
   12cdc:	fe0f 383c 31f9 b5e0 1113 b7e2 a8e3 b595     ..<8.1..........
   12cec:	ad0a 388f 6dc8 390b 3dfb 390f f6a7 3891     ...8.m.9.=.9...8
   12cfc:	f853 b76b 9f22 b841 d205 b738 5be5 384e     S.k.".A...8..[N8
   12d0c:	4506 38b8 76fa 38c7 053f 38ba 4e7d 38b5     .E.8.v.8?..8}N.8
   12d1c:	5585 38cd eb1c 38ff b5e3 390f 2a7f 38ed     .U.8...8...9.*.8
   12d2c:	49c2 384d d96d b7a5 f464 b851 39cd b79c     .IM8m...d.Q..9..
   12d3c:	71d2 3877 a8df 3903 3c9f 3909 105e 38b7     .qw8...9.<.9^..8
   12d4c:	8a20 383a e0b2 37dc 91b9 37eb c122 3836      .:8...7...7".68
   12d5c:	5a23 3881 20aa 388c ba30 386f d130 3823     #Z.8. .80.o80.#8
   12d6c:	779a 3790 8551 36a4 93e0 3773 f1c9 3816     .w.7Q..6..s7...8
   12d7c:	5c99 3850 33fb 3849 d71f 3805 9b03 36e7     .\P8.3I8...8...6
   12d8c:	959a b783 c069 b7db 5870 b7b7 5d37 b5e0     ....i...pX..7]..
   12d9c:	17c3 3806 d254 3882 59af 3886 cb8d 3804     ...8T..8.Y.8...8
   12dac:	8331 b707 d347 b7d8 8b1a b7b0 d0e2 b765     1...G.........e.
   12dbc:	633f b757 da73 b6ca abbf 3771 81d6 37e6     ?cW.s.....q7...7
   12dcc:	65eb 363a 5d5c b869 1cca b8ce bdc8 b8a3     .e:6\]i.........
   12ddc:	de23 b6e4 a044 3877 2d54 38b3 5649 38ae     #...D.w8T-.8IV.8
   12dec:	23a4 3899 2ece 3879 12d7 3802 1969 b782     .#.8..y8...8i...
   12dfc:	85b7 b83c 3e04 b6eb a1ed 38bc 70fc 3931     ..<..>.....8.p19
   12e0c:	f30e 392d 1a91 38b5 2f72 b63f 9069 b7d0     ..-9...8r/?.i...
   12e1c:	0d1f 3827 3a3b 3905 5081 3925 2339 38f3     ..'8;:.9.P%99#.8
   12e2c:	0649 3829 2e45 b7d3 d647 b852 9a77 b7d4     I.)8E...G.R.w...
   12e3c:	dffc 380e ab24 38cc a925 390a d37e 38eb     ...8$..8%..9~..8
   12e4c:	c8e0 382c 10ca b82c 208c b8b1 49e0 b887     ..,8..,.. ...I..
   12e5c:	3b5b 370a 93d5 38b6 e643 38e0 884f 384b     [;.7...8C..8O.K8
   12e6c:	2f69 b7cd a099 b7dc 0ee8 3844 eab9 38e3     i/........D8...8
   12e7c:	3eeb 38a5 aa13 b805 a512 b90f 6e12 b931     .>.8.........n1.
   12e8c:	2c52 b910 042c b8c6 7d40 b89d d892 b898     R,..,...@}......
   12e9c:	2cd4 b880 8941 b820 b21c b833 67e6 b8d7     .,..A. ...3..g..
   12eac:	1c78 b93f fafd b95e 13f5 b932 c9cf b8d1     x.?...^...2.....
   12ebc:	920b b8a0 1a34 b90e 08ed b978 3ab0 b99a     ....4.....x..:..
   12ecc:	6e8e b989 096e b936 21f7 b8d3 9d3f b8c2     .n..n.6..!..?...
   12edc:	e95a b915 516f b950 7e93 b95e b712 b93a     Z...oQP..~^...:.
   12eec:	b63c b901 7893 b8b3 8d6d b8be 22f1 b90b     <....x..m...."..
   12efc:	055c b92d f881 b918 004e b8b1 7ad9 b7ea     \.-.....N....z..
   12f0c:	ae9d b70d 53af b792 6de4 b7e0 9099 b787     .....S...m......
   12f1c:	8503 36fa 8d7b 36f1 c8ea b832 a2bc b8dd     ...6{..6..2.....
   12f2c:	5945 b8e7 1105 b80b 6c04 388f e230 38dc     EY.......l.80..8
   12f3c:	98cf 3822 20cf b893 78fa b8e3 c772 b80a     .."8. ...x..r...
   12f4c:	0adf 38a2 6ac5 38e6 e205 381d 0433 b879     ...8.j.8...83.y.
   12f5c:	84aa b8a9 27e3 b6e3 a34b 38c1 ed0e 390e     .....'..K..8...9
   12f6c:	b51e 38de 0a1c 3842 a347 37aa 5a49 3859     ...8..B8G..7IZY8
   12f7c:	94c1 38c8 52c3 38c4 69c0 384f 729c 37a1     ...8.R.8.iO8.r.7
   12f8c:	d532 3840 3ea2 38fe 1d38 3946 71ce 3947     2.@8.>.88.F9.qG9
   12f9c:	dc4f 3904 df7e 3882 372d 3854 0279 38ae     O..9~..8-7T8y..8
   12fac:	ce44 38ee dec6 38ee ddde 38cd a2c3 38dc     D..8...8...8...8
   12fbc:	3536 3917 2873 393b e83f 3938 59b9 391c     65.9s(;9?.89.Y.9
   12fcc:	fab5 38f3 a6d3 389e bd48 3810 f07b 37c1     ...8...8H..8{..7
   12fdc:	0513 3858 f521 38c2 bd5a 38f8 8177 3901     ..X8!..8Z..8w..9
   12fec:	9cb5 38fb ad28 38ec 955d 38b4 88bc 37f1     ...8(..8]..8...7
   12ffc:	70d4 b807 a43b b849 4b2c 36a6 6f8e 38cc     .p..;.I.,K.6.o.8
   1300c:	30db 392e c4a1 392d 233e 38d8 32fb 379d     .0.9..-9>#.8.2.7
   1301c:	900c b83a 3c54 b85d fd56 3691 f870 38bf     ..:.T<].V..6p..8
   1302c:	d49b 3913 1681 38e2 6a35 374d cf8d b89e     ...9...85jM7....
   1303c:	2b6e b8c2 baeb b807 9dc5 383a 57d4 3880     n+........:8.W.8
   1304c:	85c5 b601 3969 b8c2 f12f b918 35ac b90e     ....i9../....5..
   1305c:	9081 b89e 7e57 b69e f224 3807 e354 37a9     ....W~..$..8T..7
   1306c:	59b9 b781 9baf b826 73ca b81d 2f11 b744     .Y....&..s.../D.
   1307c:	b618 37ca 5556 385d 49c0 3885 4641 384f     ...7VU]8.I.8AFO8
   1308c:	eae8 36d1 04bb b846 8543 b89a 7f42 b87a     ...6..F.C...B.z.
   1309c:	3ef4 b803 2147 b7a9 98c4 b801 f413 b817     .>..G!..........
   130ac:	527e b6a2 89d4 3858 be11 38a1 6a66 381f     ~R....X8...8fj.8
   130bc:	f256 b80c d880 b8a8 62ab b8ac bbaf b885     V........b......
   130cc:	9719 b863 14cc b856 0bfa b811 7834 b6a2     ..c...V.....4x..
   130dc:	33ff 3770 01a6 b2a5 2993 b836 d373 b8a2     .3p7.....)6.s...
   130ec:	1934 b88a 7d74 b799 7b8c 37b7 4e33 3803     4...t}...{.73N.8
   130fc:	2208 373a 7c4d b831 69b2 b901 6f24 b94a     .":7M|1..i..$oJ.
   1310c:	f31b b95e ff3b b940 c0f7 b907 52b4 b88a     ..^.;.@......R..
   1311c:	5ccc b79f bab3 b78a 1ab3 b857 65ba b8a9     .\........W..e..
   1312c:	f401 b899 2918 b81d 9cde b707 aa90 b75a     .....)........Z.
   1313c:	dd6c b839 f836 b883 fd2a b822 1c62 3782     l.9.6...*.".b..7
   1314c:	e4ac 3874 f274 3886 797e 3845 8270 37fd     ..t8t..8~yE8p..7
   1315c:	ba6f 3752 d8ee b788 1afa b834 041b b834     o.R7......4...4.
   1316c:	8e5a b773 6dbf 37b5 1607 3832 5e27 381b     Z.s..m.7..28'^.8
   1317c:	d8ac 378c 7de2 36ea 5fdb 37ad 4b3b 384e     ...7.}.6._.7;KN8
   1318c:	1b08 38a1 af50 38c7 81be 38de 8492 38f6     ...8P..8...8...8
   1319c:	a35f 390f 4759 3925 1cb9 391e 43d0 38c0     _..9YG%9...9.C.8
   131ac:	8e87 35de ee1b b868 d45f b805 cf9e 386e     ...5..h._.....n8
   131bc:	af6d 3912 41bc 391b bcc4 38a6 32e4 3484     m..9.A.9...8.2.4
   131cc:	bf00 b807 0046 b7dd 3fcd b7cb 8321 b851     ....F....?..!.Q.
   131dc:	7b07 b8d0 d432 b91f 9c61 b93f ae61 b937     .{..2...a.?.a.7.
   131ec:	2774 b912 04ba b8cf 8be2 b88b 0e81 b82d     t'............-.
   131fc:	5a5c b7c3 8b32 b7d0 9e36 b85e 0eae b8c0     \Z..2...6.^.....
   1320c:	54a2 b8ef 9239 b8e9 ad50 b8cb b2ee b8c4     .T..9...P.......
   1321c:	f427 b8df 686a b8ed efb6 b8c5 fbf2 b892     '...jh..........
   1322c:	1841 b89d b93f b8e7 de74 b912 8a77 b905     A...?...t...w...
   1323c:	36e6 b89c 380a b792 f8fb 3776 0dfa 37bc     .6...8....v7...7
   1324c:	14ee 379e afad 3717 b801 b79c d189 b8af     ...7...7........
   1325c:	b776 b931 4e7a b954 9232 b907 c982 370b     v.1.zNT.2......7
   1326c:	de93 38f5 6130 3917 f938 38d5 514f 3819     ...80a.98..8OQ.8
   1327c:	283c b73c 2658 b7e9 b3e5 b792 03d9 377b     <(<.X&........{7
   1328c:	26ba 3875 8cc8 38b2 8186 388d 613e 373b     .&u8...8...8>a;7
   1329c:	e46c b816 eb2d b7b3 e568 385f 5062 38f1     l...-...h._8bP.8
   132ac:	bc6e 38ae 28df b7ea 6a11 b8cd 033f b7b7     n..8.(...j..?...
   132bc:	32a5 3929 3ecf 3999 0a8e 3984 3669 38a4     .2)9.>.9...9i6.8
   132cc:	60af b8b5 597b b912 df6a b8af fc1e 3735     .`..{Y..j.....57
   132dc:	bbe5 38a5 b780 38d0 2dc9 389e 2175 3712     ...8...8.-.8u!.7
   132ec:	d281 b888 ed12 b8a2 d694 b7b8 ac43 37f6     ............C..7
   132fc:	7451 382d b059 3844 cd60 387c 13b7 3876     Qt-8Y.D8`.|8..v8
   1330c:	bdaa 37ea 81d0 b809 d1ad b8dc 3ac9 b90c     ...7.........:..
   1331c:	09b0 b89a 1610 3830 53a4 3905 41b2 3909     ......08.S.9.A.9
   1332c:	36fc 389a 7f6e 378e 1150 377a 52c3 388d     .6.8n..7P.z7.R.8
   1333c:	081c 38e8 fa5a 38ac 3035 35fb e989 b85e     ...8Z..850.5..^.
   1334c:	e911 b80a 3bbb 383c 8676 38ea d1ba 38c7     .....;<8v..8...8

0001335c <x_p3>:
   1335c:	031e 3838 19b2 383d d0b6 383d 9a0e 3837     ..88..=8..=8..78
   1336c:	e0f3 3832 8d0c 3837 aefd 383f fb90 3841     ..28..78..?8..A8
   1337c:	3523 3840 9e3d 383f 1b3a 383d 5e32 3834     #5@8=.?8:.=82^48
   1338c:	5e6c 382a 66cb 3826 9a1c 3826 9867 3823     l^*8.f&8..&8g.#8
   1339c:	c1fc 381b 75a0 3812 328b 3805 8936 37d9     ...8.u.8.2.86..7
   133ac:	5dc4 379b fe03 376c e518 3781 8ba0 37a4     .].7..l7...7...7
   133bc:	8823 37b4 642f 37a6 d561 378e b503 3784     #..7/d.7a..7...7
   133cc:	20e4 3790 b651 37ad 4cad 37d3 eae4 37f1     . .7Q..7.L.7...7
   133dc:	24ed 3800 8fa4 3804 c1d5 3810 329f 3824     .$.8...8...8.2$8
   133ec:	de3e 3830 b083 382f dca5 382b 2fce 3830     >.08../8..+8./08
   133fc:	3244 3835 ecac 382e d9ab 3822 ae2c 3821     D258...8.."8,.!8
   1340c:	5c69 3830 bdda 3843 fbf1 3850 5cc5 3857     i\08..C8..P8.\W8
   1341c:	4f05 3859 e774 3856 bfb4 3853 977e 3857     .OY8t.V8..S8~.W8
   1342c:	bc07 3861 c445 3865 bc27 385c de1d 384e     ..a8E.e8'.\8..N8
   1343c:	9ba7 3844 a875 383a 2c9a 382d a823 3821     ..D8u.:8.,-8#.!8
   1344c:	5b2c 381c cbcc 3815 f3bb 3803 82a9 37d3     ,[.8...8...8...7
   1345c:	15f8 37ab eb81 379c 674f 3796 0a98 3783     ...7...7Og.7...7
   1346c:	b27a 3757 3605 3747 38ab 374d 4ea5 374b     z.W7.6G7.8M7.NK7
   1347c:	adf7 373e 2cab 3732 a7cc 3721 a7d5 370f     ..>7.,27..!7...7
   1348c:	a165 3715 37dc 373f 487a 376d 5e3b 3778     e..7.7?7zHm7;^x7
   1349c:	0b44 3765 f090 3758 5509 3758 055d 3738     D.e7..X7.UX7].87
   134ac:	2362 36d0 fa96 35d3 96a5 b4e6 317c b5ed     b#.6...5....|1..
   134bc:	8eef b6c2 0822 b756 5dab b7a9 a01b b7d9     ....".V..]......
   134cc:	0485 b7f4 f036 b7f6 efd0 b7e8 621c b7d9     ....6........b..
   134dc:	4a1a b7d2 e5d9 b7c8 1e7a b7aa 4d0f b774     .J......z....Mt.
   134ec:	7b2a b72a 76d6 b711 a12b b704 d7db b6cf     *{*..v..+.......
   134fc:	564a b6be ac47 b712 5601 b763 3415 b785     JV..G....Vc..4..
   1350c:	dda0 b76f 0ce3 b738 36e2 b706 44f1 b6b5     ..o...8..6...D..
   1351c:	ccd4 b64d 248b b612 6502 b64b 4fe0 b66f     ..M..$...eK..Oo.
   1352c:	4272 b617 079e b4d9 daaa 34f2 b277 355f     rB.........4w._5
   1353c:	6ec7 3548 0793 b609 945c b70f 949f b786     .nH5....\.......
   1354c:	558f b7b2 7018 b7cd dde9 b7ec 038a b80b     .U...p..........
   1355c:	0144 b81d 07bf b829 9aeb b835 46c2 b845     D.....)...5..FE.
   1356c:	e606 b84d 4565 b847 5579 b838 9a40 b82b     ..M.eEG.yU8.@.+.
   1357c:	f441 b820 4f87 b814 595f b807 48ec b7f7     A. ..O.._Y...H..
   1358c:	20d1 b7d9 459a b7ae c32b b784 0e8c b763     . ...E..+.....c.
   1359c:	c2c5 b76a d885 b77b 537f b785 9b07 b79b     ..j...{..S......
   135ac:	84e6 b7c2 ab34 b7da c3c5 b7cb 5cd8 b7a8     ....4........\..
   135bc:	ba1d b792 87a4 b792 b730 b796 4163 b78e     ........0...cA..
   135cc:	254c b764 1dd7 b70b 8a1e b643 a134 b46a     L%d.......C.4.j.
   135dc:	2300 b5f7 4a11 b6d6 7cfc b730 c220 b75b     .#...J...|0. .[.
   135ec:	8b94 b78a 58eb b7b9 5562 b7e2 22d2 b7f1     .....X..bU..."..
   135fc:	5184 b7fb a991 b80e 9403 b823 5112 b828     .Q........#..Q(.
   1360c:	e2e3 b818 c02e b803 cfc6 b7ea a6a3 b7dd     ................
   1361c:	a01c b7da e66a b7de 9c05 b7e0 32f0 b7d0     ....j........2..
   1362c:	3830 b7af 7585 b796 7468 b798 6a1a b7ad     08...u..ht...j..
   1363c:	eb72 b7c8 a903 b7ee d542 b80f 2fb7 b823     r.......B..../#.
   1364c:	6f0d b825 57b7 b818 1303 b808 8a74 b7f7     .o%..W......t...
   1365c:	a4cc b7e1 91c0 b7ca 5231 b7bb d70e b7b6     ........1R......
   1366c:	1a3e b7af 8849 b79d 20fc b792 e400 b797     >...I.... ......
   1367c:	c6f8 b7a0 351d b7a0 785e b7a1 33cb b7b0     .....5..^x...3..
   1368c:	d1f1 b7bf 13c2 b7bd d4c7 b7a9 e135 b796     ............5...
   1369c:	99cd b788 f4da b765 868e b727 e15e b6ee     ......e...'.^...
   136ac:	daaf b6c1 c4f1 b663 7c80 35e3 0a83 36ed     ......c..|.5...6
   136bc:	8d3c 3724 14e5 3732 a149 3747 4964 376f     <.$7..27I.G7dIo7
   136cc:	04fc 378c d475 379b 1482 37a8 6bd4 37af     ...7u..7...7.k.7
   136dc:	005e 37ae 81e5 37a8 2cee 37aa 1fd4 37ae     ^..7...7.,.7...7
   136ec:	b51b 379d f00d 376b d7b2 372c 5d84 3728     ...7..k7..,7.](7
   136fc:	fa93 3731 2256 3713 04f5 36d0 7edc 36e9     ..17V".7...6.~.6
   1370c:	ee33 3741 6a39 378d 2135 37ad d60d 37c4     3.A79j.75!.7...7
   1371c:	1a60 37dd 894c 37f4 18fe 3805 3585 3811     `..7L..7...8.5.8
   1372c:	bf68 381a a6f9 3816 9554 3802 e58c 37d6     h..8...8T..8...7
   1373c:	4ea1 37b6 9042 3798 1277 3765 ab54 372b     .N.7B..7w.e7T.+7
   1374c:	c564 3731 497e 3763 12b7 377b 885c 3756     d.17~Ic7..{7\.V7
   1375c:	413a 3716 2c42 36ca b472 368d 49eb 364d     :A.7B,.6r..6.IM6
   1376c:	085e 3647 f507 3658 4e42 3598 db55 b690     ^.G6..X6BN.5U...
   1377c:	a024 b72a 7640 b75e 1cb6 b766 3e3c b75a     $.*.@v^...f.<>Z.
   1378c:	147e b73b 1a3b b702 52ce b681 2054 b547     ~.;.;....R..T G.
   1379c:	b9d4 3610 fae2 36d9 e961 3748 47d0 3787     ...6...6a.H7.G.7
   137ac:	6d2c 3799 fa8a 37b0 901e 37d8 2ade 37f5     ,m.7...7...7.*.7
   137bc:	cdec 37e9 d2d8 37bd 88aa 378c 086b 374a     ...7...7...7k.J7
   137cc:	7233 3712 860d 36e8 7c6f 36d9 5948 36d3     3r.7...6o|.6HY.6
   137dc:	6d38 36b0 dc57 3683 1d58 3690 3239 36eb     8m.6W..6X..692.6
   137ec:	6db8 3731 f842 3771 8088 37aa 2404 37f0     .m17B.q7...7.$.7
   137fc:	eddb 3815 44ef 3821 392d 3821 047e 3826     ...8.D!8-9!8~.&8
   1380c:	a282 3831 6b01 3838 6ab6 3833 8d23 3826     ..18.k88.j38#.&8
   1381c:	9a3d 3816 187c 3803 0130 37d8 d65c 37a9     =..8|..80..7\..7
   1382c:	6ee1 3775 5a0a 36f4 ceb6 b5e5 7159 b71a     .nu7.Z.6....Yq..
   1383c:	c933 b75c 088b b782 34a8 b798 17c8 b7a0     3.\......4......
   1384c:	056b b783 d455 b71a 8479 b688 5952 b5f1     k...U...y...RY..
   1385c:	a94e b53f 641d 34c2 d734 342c 684f b616     N.?..d.44.,4Oh..
   1386c:	614d b6b4 cbe9 b706 9917 b743 3df6 b795     Ma........C..=..
   1387c:	9f5c b7d4 5891 b808 16cb b823 da14 b837     \....X....#...7.
   1388c:	4738 b83d e74e b82d 6b13 b812 9f99 b7f3     8G=.N.-..k......
   1389c:	6d87 b7d1 abb5 b7ad 4bf7 b778 809e b70d     .m.......Kx.....
   138ac:	b17a b635 7724 3666 fe33 3729 51af 376d     z.5.$wf63.)7.Qm7
   138bc:	a1a6 3752 0660 36eb 7042 35ca f6ac b623     ..R7`..6Bp.5..#.
   138cc:	fe10 b6d2 bc5b b739 73fd b786 86a2 b7a9     ....[.9..s......
   138dc:	0721 b7c4 d699 b7d0 f378 b7c8 b96f b7b3     !.......x...o...
   138ec:	43f8 b7a3 8106 b797 23cd b773 551a b705     .C.......#s..U..
   138fc:	cd5a b60f 4e82 b529 694b b5e4 6586 b598     Z....N).Ki...e..
   1390c:	fde1 35ec 0a9e 3689 be24 3681 46ea 35f7     ...5...6$..6.F.5
   1391c:	5f84 b53c 2ba4 b654 8316 b69c 2593 b689     ._<..+T......%..
   1392c:	e46a b5fb 1eff b3fa 090a 34b2 7330 357a     j..........40sz5
   1393c:	426a 3622 003a 3650 e58b 361b 12fd 3641     jB"6:.P6...6..A6
   1394c:	cc08 36f0 f0ce 375c 2d07 378c d3f1 378a     ...6..\7.-.7...7
   1395c:	857c 3776 5206 3755 12e0 372a ab54 36e4     |.v7.RU7..*7T..6
   1396c:	a912 3693 52ba 3676 ed01 3623 a8c1 b5bd     ...6.Rv6..#6....
   1397c:	e768 b6e0 32cf b738 dd3f b765 837b b77c     h....28.?.e.{.|.
   1398c:	dff6 b76c 3993 b734 2a39 b6f4 2fed b6d2     ..l..94.9*.../..
   1399c:	6e10 b6ed a677 b6dd 0db0 b663 7265 355e     .n..w.....c.er^5
   139ac:	f94d 3693 1a85 370b 36f6 3759 9ecc 3784     M..6...7.6Y7...7
   139bc:	8005 3775 96f2 373b 8aa3 3715 a29f 3715     ..u7..;7...7...7
   139cc:	deb1 372b c0b6 3750 005c 3783 d2be 379d     ..+7..P7\..7...7
   139dc:	f0d5 37aa 426d 37a7 e5cc 379a 36f9 3787     ...7mB.7...7.6.7
   139ec:	84a2 374c 7b9d 3703 0a75 36c8 747b 36df     ..L7.{.7u..6{t.6
   139fc:	3681 36c3 66d2 3548 efd4 b6b4 54a3 b6fd     .6.6.fH5.....T..
   13a0c:	0261 b6b0 c022 b623 fcca b616 e23a b690     a...".#.....:...
   13a1c:	fe2a b6ed 0bd3 b72a 7d4f b75b 00be b774     *.....*.O}[...t.
   13a2c:	aa15 b76c f0c5 b763 a62c b76d a586 b774     ..l...c.,.m...t.
   13a3c:	52c3 b76d 7142 b76f c1e2 b778 77c8 b753     .Rm.Bqo...x..wS.
   13a4c:	42cc b6c9 f65d 35de 2360 36bf 03ff 36b4     .B..]..5`#.6...6
   13a5c:	3a38 367c 22fc 3654 b47c 3636 fc29 35b9     8:|6."T6|.66)..5
   13a6c:	8f44 34c4 8fcf 351d 8e8c 34b9 1279 b5e4     D..4...5...4y...
   13a7c:	7bd3 b67c 43aa b67c 6bc7 b61a f00e b529     .{|..C|..k....).
   13a8c:	f562 35f9 3bef 36cd cea0 373c ce72 3782     b..5.;.6..<7r..7
   13a9c:	1cc6 379d 9dc2 37b2 6f6c 37c0 ad37 37bc     ...7...7lo.77..7
   13aac:	785b 37af 5a1b 37b4 69f9 37d0 fe1e 37dd     [x.7.Z.7.i.7...7
   13abc:	fb15 37b8 bde2 3757 60b0 3671 ac7d b634     ...7..W7.`q6}.4.
   13acc:	5396 b6c4 24d0 b6e5 10e1 b6e0 9f9e b6d9     .S...$..........
   13adc:	2793 b6df 9ea1 b6c5 6128 b616 1feb 368b     .'......(a.....6
   13aec:	797e 3733 b804 3785 24f5 37b1 f271 37de     ~y37...7.$.7q..7
   13afc:	20b3 37f6 f14b 37e2 2b3a 37b9 4bb9 379a     . .7K..7:+.7.K.7
   13b0c:	4919 3787 bc4f 374c d803 36b7 83ab b5f0     .I.7O.L7...6....
   13b1c:	3b4d b6f2 031c b72c ee3f b731 5ec2 b6fb     M;....,.?.1..^..
   13b2c:	af6b b5e1 40bb 368c 64b2 3712 58ff 3755     k....@.6.d.7.XU7
   13b3c:	cf3e 3783 16d5 3783 0f41 375f 9518 3764     >..7...7A._7..d7
   13b4c:	e210 37a4 1ffa 37eb 423b 3808 fa88 37fe     ...7...7;B.8...7
   13b5c:	cbae 37c9 294a 378a 4691 370d 02a8 34bf     ...7J).7.F.7...4
   13b6c:	4149 b6c5 ed43 b71e 2603 b74f c0c9 b785     IA..C....&O.....
   13b7c:	0765 b79c d8e9 b798 2530 b77f 3719 b735     e.......0%...75.
   13b8c:	fe62 b6a0 2286 3653 fd1e 3740 1456 3797     b...."S6..@7V..7
   13b9c:	6dfb 37bb aad6 37da 7e52 37f8 8357 3803     .m.7...7R~.7W..8
   13bac:	0ca4 3801 a2f1 37fc 0615 3800 40e5 37f6     ...8...7...8.@.7
   13bbc:	3a05 37cb 123c 378e e332 3737 630d 36fa     .:.7<..72.77.c.6
   13bcc:	5aa4 36c0 75ae 36b5 e157 36d8 6767 3709     .Z.6.u.6W..6gg.7
   13bdc:	b08b 3721 8079 3737 3f9d 3757 e527 3770     ..!7y.77.?W7'.p7
   13bec:	c0eb 375b 80e2 3719 2c42 36cf 9bea 36ca     ..[7...7B,.6...6
   13bfc:	8441 36b2 7380 3342 a86b b712 657f b78e     A..6.sB3k....e..
   13c0c:	0403 b7c1 0c30 b7ee c3e7 b80f 4fba b826     ....0........O&.
   13c1c:	c9eb b833 f077 b835 6e06 b82b 1f27 b811     ..3.w.5..n+.'...
   13c2c:	bccc b7d3 b7d7 b781 4be7 b6e5 1c22 35d7     .........K.."..5
   13c3c:	0f6f 3729 c232 3789 dc92 37a4 93c0 37ba     o.)72..7...7...7
   13c4c:	b9e2 37dd bd2d 37ff 60cf 3801 d301 37df     ...7-..7.`.8...7
   13c5c:	03b5 37aa 93ba 3760 5fb4 36c0 91b5 b624     ...7..`7._.6..$.
   13c6c:	c6e6 b714 83dd b74e 41fa b779 f48e b799     ......N..Ay.....
   13c7c:	f8a9 b7b2 fac8 b7b8 98c3 b7b4 ea6f b7b0     ............o...
   13c8c:	5ecc b7a5 29ea b788 3aef b748 a786 b716     .^...)...:H.....
   13c9c:	05fa b6fc fb50 b6ce c0ed b6a7 4296 b6bc     ....P........B..
   13cac:	0ae0 b703 659a b715 296a b709 e740 b71b     .....e..j)..@...
   13cbc:	27ac b784 815f b7da ee37 b813 ef8d b825     .'.._...7.....%.
   13ccc:	f023 b81d a0ea b7fd cac3 b7a4 a1e5 b719     #...............
   13cdc:	2adc b543 abf0 36e1 b498 3781 f705 37d1     .*C....6...7...7
   13cec:	3122 3807 d12f 3815 66cb 381d b297 3820     "1.8/..8.f.8.. 8
   13cfc:	7b09 3811 a7a4 37cc 9777 373c 2d22 35a5     .{.8...7w.<7"-.5
   13d0c:	8c63 b68b 7da4 b707 06fd b75f ea25 b7a5     c....}...._.%...
   13d1c:	a15c b7dd c5be b808 3439 b81d 6ddb b826     \.......94...m&.
   13d2c:	13eb b825 7fcb b821 bc0f b81e 60d9 b817     ..%...!......`..
   13d3c:	a143 b80d 6e55 b80e b758 b81b cc4b b823     C...Un..X...K.#.
   13d4c:	770a b818 ec43 b801 d164 b7e4 4995 b7e0     .w..C...d....I..
   13d5c:	a314 b7e6 e890 b7ea ab93 b7f3 2722 b804     ............"'..
   13d6c:	3217 b80f 9257 b814 cfce b815 0188 b814     .2..W...........
   13d7c:	1f71 b808 863c b7de 75b3 b7a7 2d91 b77a     q...<....u...-z.
   13d8c:	7287 b72c 65f2 b697 0ab0 359e 9067 3691     .r,..e.....5g..6
   13d9c:	2202 3691 178c 360e 6585 b617 d0db b727     .".6...6.e....'.
   13dac:	a4cd b7ab 09f6 b7fd e9f6 b81b 7671 b838     ............qv8.
   13dbc:	785a b860 9da1 b887 8aa2 b89b 20cd b8a9     Zx`.......... ..
   13dcc:	7c28 b8b1 c68a b8b5 0604 b8b7 2ca4 b8b7     (|...........,..
   13ddc:	0ff2 b8b7 c67e b8b3 3e29 b8a9 d9db b898     ....~...)>......
   13dec:	91d8 b889 3925 b87d 79ba b866 bbb2 b848     ....%9}..yf...H.
   13dfc:	9ce7 b82f 2fd2 b826 28b7 b822 e464 b810     ../../&..(".d...
   13e0c:	2d5d b7e1 e04c b79e d0a3 b762 4ef4 b734     ]-..L.....b..N4.
   13e1c:	35c4 b722 fee1 b719 e35b b703 f674 b69c     .5".....[...t...
   13e2c:	4718 b4e3 b945 364a 0b8e 36bf 470f 3723     .G..E.J6...6.G#7
   13e3c:	97f0 3780 00af 37a4 20a0 37b3 2719 37ce     ...7...7. .7.'.7
   13e4c:	21ef 380a 40ea 383a 2a26 3860 d684 3870     .!.8.@:8&*`8..p8
   13e5c:	3131 3875 9fc2 3879 7364 3880 dccd 3884     11u8..y8ds.8...8
   13e6c:	a219 388a e7c9 388f a763 388e e958 3883     ...8...8c..8X..8
   13e7c:	3eb5 3868 0276 3848 00f8 3826 0ead 3802     .>h8v.H8..&8...8
   13e8c:	704b 37cc 1b4e 37b5 b02e 37b1 42c3 37aa     Kp.7N..7...7.B.7
   13e9c:	c820 379b 8128 3798 3f74 37aa 20c0 37c7      ..7(..7t?.7. .7
   13eac:	a45c 37ea bbbb 3810 2cae 3836 9039 3858     \..7...8.,689.X8
   13ebc:	0c7a 386e f5b8 387b 29e9 3885 0028 388c     z.n8..{8.).8(..8
   13ecc:	cd1c 3890 7b71 3894 a33f 3897 4451 3897     ...8q{.8?..8QD.8
   13edc:	6c3c 388f bdfc 3880 8ce1 3861 0579 3847     <l.8...8..a8y.G8
   13eec:	6982 3830 4a9c 381e dd89 3818 06b8 3820     .i08.J.8...8.. 8
   13efc:	8a1a 3823 39f9 3819 a079 380f 5941 381c     ..#8.9.8y..8AY.8
   13f0c:	312c 3840 8929 3868 d534 3882 ad71 388a     ,1@8).h84..8q..8
   13f1c:	b279 388d 29cf 388d cdcf 388a 3d79 3889     y..8.).8...8y=.8
   13f2c:	339e 3888 9b99 3883 0419 3874 02d9 385f     .3.8...8..t8.._8
   13f3c:	15c1 384c a6f3 3832 7c9e 3810 0069 37ec     ..L8..28.|.8i..7
   13f4c:	50de 37e3 7000 37f5 7032 37f9 b336 37df     .P.7.p.72p.76..7
   13f5c:	356c 37b8 2435 3793 e113 3761 c427 3726     l5.75$.7..a7'.&7
   13f6c:	37ed 370f 18c9 371f 43a4 3728 bcb5 3703     .7.7...7.C(7...7
   13f7c:	1d16 3688 c229 353f 425e b609 baaf b693     ...6).?5^B......
   13f8c:	6bc2 b6aa fd15 b675 2384 b638 efe1 b6b0     .k....u..#8.....
   13f9c:	58e2 b732 e2f8 b77e 3368 b78d 70e2 b78c     .X2...~.h3...p..
   13fac:	2647 b787 b0a6 b768 f951 b721 c1f8 b6ce     G&....h.Q.!.....
   13fbc:	e705 b6c8 cd14 b70c f54c b73a 2dc0 b75f     ........L.:..-_.
   13fcc:	9339 b777 d4c2 b77f 7acc b781 202a b793     9.w......z..* ..
   13fdc:	434d b7c4 4c47 b806 6ca8 b829 68ae b845     MC..GL...l)..hE.
   13fec:	c992 b85e 065f b877 b0ea b883 28c3 b888     ..^._.w......(..
   13ffc:	7313 b88f e190 b89b 0d4d b8a5 0e33 b8a2     .s......M...3...
   1400c:	3611 b895 450a b888 d01a b880 f48f b879     .6...E........y.
   1401c:	da7e b871 b3b6 b865 ab79 b853 688f b83a     ~.q...e.y.S..h:.
   1402c:	4ae3 b81e 8abb b808 fa45 b7f6 8300 b7e0     .J......E.......
   1403c:	7ef9 b7cb b7c5 b7ca da10 b7e0 4bc1 b7ed     .~...........K..
   1404c:	ba17 b7d2 8c53 b79b b601 b74c 86d2 b6f5     ....S.....L.....
   1405c:	31d6 b610 4fd1 3694 b4a0 3738 33ca 3789     .1...O.6..87.3.7
   1406c:	d780 37b3 528d 37e1 0896 3800 4784 3800     ...7.R.7...8.G.8
   1407c:	5989 37ec d7ba 37d0 8680 37ab 01a4 3778     .Y.7...7...7..x7
   1408c:	aa7f 3721 dd28 36cb 47c6 3633 d232 b622     ..!7(..6.G362.".
   1409c:	d745 b712 5376 b76e 0796 b798 8e52 b7b6     E...vSn.....R...
   140ac:	d342 b7d1 8acd b7d4 30c0 b7b7 e82f b792     B........0../...
   140bc:	4888 b77d 0067 b763 b596 b733 7e8f b6e4     .H}.g.c...3..~..
   140cc:	f5e7 b63c 66e3 35e2 bf9e 36fa de4e 3766     ..<..f.5...6N.f7
   140dc:	e1ca 379b 9549 37ad ccba 37a9 4d17 3793     ...7I..7...7.M.7
   140ec:	4448 3759 16c5 370f bd00 3700 402f 3731     HDY7...7...7/@17
   140fc:	3795 3758 43b5 3742 47f2 371d 7c9d 3735     .7X7.CB7.G.7.|57
   1410c:	0455 3787 b225 37b6 4cbb 37d8 8423 37f0     U..7%..7.L.7#..7
   1411c:	e054 3801 710d 3805 d911 3800 01d6 37f1     T..8.q.8...8...7
   1412c:	7c7d 37df fe18 37c4 bf4d 379a 66d5 374c     }|.7...7M..7.fL7
   1413c:	ef40 3690 a215 b6e8 3f78 b7aa d18c b7fe     @..6....x?......
   1414c:	9d6a b80d d3bc b80a d96b b80a af08 b811     j.......k.......
   1415c:	f6c3 b812 2b0d b805 a24b b7d8 e21a b79f     .....+..K.......
   1416c:	de70 b743 5672 b684 05d6 361a 5b8f 36c9     p.C.rV.....6.[.6
   1417c:	0dfc 370e 6499 3731 8b87 373b c955 3727     ...7.d17..;7U.'7
   1418c:	25e0 3719 9f1e 3723 9914 3726 21b0 36fb     .%.7..#7..&7.!.6
   1419c:	ea78 3668 9151 3575 e1fa 3556 5574 35c2     x.h6Q.u5..V5tU.5
   141ac:	9856 361b 99a1 36bf 0031 3756 4b43 37ab     V..6...61.V7CK.7
   141bc:	43dd 37d3 6be5 37e6 a1c6 37fb bf3e 380e     .C.7.k.7...7>..8
   141cc:	9fb7 3824 c37e 383d 7d7d 3856 7d30 3865     ..$8~.=8}}V80}e8
   141dc:	e5e1 3861 5927 384e 89d2 3837 383b 3824     ..a8'YN8..78;8$8
   141ec:	d0f4 380e 27af 37e8 a8b5 37b6 7a6b 378e     ...8.'.7...7kz.7
   141fc:	8873 3734 58dd 35f0 c576 b6e1 c5dd b738     s.47.X.5v.....8.
   1420c:	9bb8 b73d 0767 b72f 1cbc b726 8aa8 b71a     ..=.g./...&.....
   1421c:	3bdf b708 0369 b6fc 52b3 b6fe 785e b6ed     .;..i....R..^x..
   1422c:	b315 b6c0 5607 b6b7 e1ce b6f5 c108 b728     .....V........(.
   1423c:	2cf4 b75b fa39 b793 8898 b7c2 7b8b b7db     .,[.9........{..
   1424c:	a9a1 b7d3 ffa1 b7ca e035 b7e6 de9e b813     ........5.......
   1425c:	d155 b838 1eba b858 d183 b871 b09d b883     U.8...X...q.....
   1426c:	de9f b88a 3b20 b88e 70cf b891 db3c b896     .... ;...p..<...
   1427c:	3a13 b89b fd69 b89a 6ead b897 ca84 b891     .:..i....n......
   1428c:	adab b886 28c6 b868 d60a b83e 9992 b820     .....(h...>... .
   1429c:	8e61 b80f e546 b801 e412 b7e3 f7e0 b7c7     a...F...........
   142ac:	4b9d b7b5 e536 b7a2 735a b793 1af6 b7a0     .K..6...Zs......
   142bc:	80d8 b7d4 8c18 b80b c962 b823 2b14 b82f     ........b.#..+/.
   142cc:	c5a1 b82f 3a0d b823 79a8 b807 1ece b7c6     ../..:#..y......
   142dc:	e50c b781 4785 b717 5628 b671 f81b 357f     .....G..(Vq....5
   142ec:	7784 3680 adf1 36b6 4a9e 36ff 88bd 3725     .w.6...6.J.6..%7
   142fc:	82e0 370d 17f3 35bb 56d3 b6f5 c350 b746     ...7...5.V..P.F.
   1430c:	1b69 b734 edca b6e7 6fd6 b65b 3080 b501     i.4......o[..0..
   1431c:	a029 35db 01fa 3646 d475 367c cf77 36ab     )..5..F6u.|6w..6
   1432c:	4420 36f0 41c3 3712 62a4 3722 0c43 3743      D.6.A.7.b"7C.C7
   1433c:	3a4a 3775 17a9 378a dd3b 378f 29dd 37aa     J:u7...7;..7.).7
   1434c:	dc75 37e7 70cf 3815 7dbe 3826 c3f7 3826     u..7.p.8.}&8..&8
   1435c:	e6b4 37f7 9028 37c4 7101 3791 3c19 3759     ...7(..7.q.7.<Y7
   1436c:	0534 3724 e076 36ee 1cc4 36c0 b2ea 36bc     4.$7v..6...6...6
   1437c:	1a61 369d 357d 35d8 ef7e b5ca a6ad b60a     a..6}5.5~.......
   1438c:	1979 b581 e014 b5d9 5fc6 b6b8 7564 b732     y........_..du2.
   1439c:	161d b779 5a90 b798 9e7c b7b3 5ff1 b7cb     ..y..Z..|...._..
   143ac:	2349 b7dc a48d b7ec 8608 b7fe ee56 b801     I#..........V...
   143bc:	b9ce b7f4 9a83 b7de e0fb b7cf fd2c b7c3     ............,...
   143cc:	23d4 b7af 20e8 b791 9de5 b766 c2a9 b731     .#... ....f...1.
   143dc:	5cf9 b6ec 5739 b651 4917 b527 ce57 b49e     .\..9WQ..I'.W...
   143ec:	1bbb 3402 f9dc 3631 9485 36ca f533 3709     ...4..16...63..7
   143fc:	31f4 3721 2118 3745 6a2a 3778 6607 3796     .1!7.!E7*jx7.f.7
   1440c:	d100 37af 2583 37cd 7999 37ed 0784 3804     ...7.%.7.y.7...8
   1441c:	42ca 380d 9e21 3816 5a23 381f d6c5 381d     .B.8!..8#Z.8...8
   1442c:	31d0 380e b0b8 37f6 2f25 37e1 23b1 37d7     .1.8...7%/.7.#.7
   1443c:	e974 37c8 fbb6 37b5 6625 37a7 6a23 379d     t..7...7%f.7#j.7
   1444c:	e161 3790 5211 3782 bb95 3777 cf7f 3780     a..7.R.7..w7...7
   1445c:	79a0 3785 ff92 3780 5a5f 377a 5295 3787     .y.7...7_Zz7.R.7
   1446c:	89b5 379c f62b 37b3 7dfa 37ce 519d 37ea     ...7+..7.}.7.Q.7
   1447c:	0832 37f6 a53e 37e6 8a72 37cf 8f5a 37cd     2..7>..7r..7Z..7
   1448c:	51d9 37e0 410d 37ec b4e9 37df 026f 37c4     .Q.7.A.7...7o..7
   1449c:	a798 37a8 7688 378e 9e7f 3761 b040 372b     ...7.v.7..a7@.+7
   144ac:	68ff 370b fd56 36f0 e0cb 36d0 e8ae 36cf     .h.7V..6...6...6
   144bc:	b933 36fa ec63 3710 54a6 3710 b15b 3709     3..6c..7.T.7[..7
   144cc:	7658 370d 382b 3711 b8f5 36ff f326 36b0     Xv.7+8.7...6&..6
   144dc:	04a5 3644 d63c 35bf b272 3486 323c b529     ..D6<..5r..4<2).
   144ec:	a4c2 3507 580b 368d 9bea 3703 0292 3716     ...5.X.6...7...7
   144fc:	a191 370e 7e4a 3712 afb7 3724 b440 3734     ...7J~.7..$7@.47
   1450c:	f3cb 3743 95e0 3762 5a36 3789 dde2 37a0     ..C7..b76Z.7...7
   1451c:	75b4 37b2 6b90 37c4 5450 37d7 6c2b 37dc     .u.7.k.7PT.7+l.7
   1452c:	cf57 37cf c9c2 37c7 f2c1 37d3 12be 37e3     W..7...7...7...7
   1453c:	e950 37dc 30fa 37c1 e58a 379f 3d35 3783     P..7.0.7...75=.7
   1454c:	0283 3755 72b7 3726 86f6 3700 1019 36d2     ..U7.r&7...7...6
   1455c:	be14 36af 9dbd 368d c15a 3680 5a81 368a     ...6...6Z..6.Z.6
   1456c:	8992 3666 2d9f 3572 a139 b5e6 097c b635     ..f6.-r59...|.5.
   1457c:	6748 b646 7893 b684 2b2b b6a4 a56e b692     HgF..x..++..n...
   1458c:	7895 b658 46c1 b67a 765b b6d8 d489 b723     .xX..Fz.[v....#.
   1459c:	4d7a b751 0dad b77c 1ac3 b791 acd6 b792     zMQ...|.........
   145ac:	3bca b77a fe77 b748 0a6c b73a e191 b743     .;z.w.H.l.:...C.
   145bc:	8a91 b74a abb6 b749 09fb b743 2a00 b72c     ..J...I...C..*,.
   145cc:	fc5a b708 1667 b6f3 b791 b714 4c1c b744     Z...g........LD.
   145dc:	09b7 b75c 9a53 b755 b9f7 b75b 3f3b b784     ..\.S.U...[.;?..
   145ec:	bd8a b79c 4590 b7a3 4b5e b7a0 081c b7a7     .....E..^K......
   145fc:	c0c1 b7b4 0429 b7b8 fbd2 b7ab f60f b79a     ....)...........
   1460c:	6697 b78e e4bb b788 2d52 b78c 86ad b799     .f......R-......
   1461c:	25d3 b7a8 670d b7a7 2200 b795 eedb b783     .%...g..."......
   1462c:	9c78 b77d 8f4e b772 1536 b755 6c01 b746     x.}.N.r.6.U..lF.
   1463c:	8752 b76b a555 b798 8f33 b7af 7736 b7aa     R.k.U...3...6w..
   1464c:	dcc1 b791 b22a b770 059d b752 803d b74e     ....*.p...R.=.N.
   1465c:	f5f2 b768 12d8 b788 e017 b78c 8573 b774     ..h.........s.t.
   1466c:	13d0 b747 42d5 b737 8960 b736 19ce b72c     ..G..B7.`.6...,.
   1467c:	d3f0 b725 8769 b735 e93c b742 4570 b727     ..%.i.5.<.B.pE'.
   1468c:	53a8 b6c1 5bbd b558 e9d2 3676 2ee1 3704     .S...[X...v6...7
   1469c:	d0eb 3743 c0cd 3767 cedb 376c 17ea 377a     ..C7..g7..l7..z7
   146ac:	7edd 3799 32f8 37c4 95ec 37eb c197 3804     .~.7.2.7...7...8
   146bc:	e580 380d eb15 380e 83c5 380b 1bf0 380d     ...8...8...8...8
   146cc:	5906 3816 a938 381e 7298 381d 4324 3815     .Y.88..8.r.8$C.8
   146dc:	6b57 3810 7502 3812 7e28 3812 c3f4 3808     Wk.8.u.8(~.8...8
   146ec:	bc34 37f3 a05c 37d8 bf11 37ba 67c7 3796     4..7\..7...7.g.7
   146fc:	ff85 377c 6bc1 3785 fcd6 37a0 e286 37b6     ..|7.k.7...7...7
   1470c:	b041 37b9 a056 37ad 2740 3799 0537 377e     A..7V..7@'.77.~7
   1471c:	698c 374f 280d 3740 a98d 3748 71b8 373a     .iO7.(@7..H7.q:7
   1472c:	f296 3700 cb72 3684 39bf 3602 84d1 34a0     ...7r..6.9.6...4
   1473c:	979a b643 f079 b6e9 279b b725 a294 b738     ..C.y....'%...8.
   1474c:	af55 b73f bb69 b744 d800 b73e d009 b724     U.?.i.D...>...$.
   1475c:	3aa0 b702 af74 b6d5 5210 b6c7 f6ee b6d8     .:..t....R......
   1476c:	4cf4 b70c f3a1 b738 d033 b74d 5a45 b73c     .L....8.3.M.EZ<.
   1477c:	8e8c b728 41b1 b732 da6b b741 10cb b731     ..(..A2.k.A...1.
   1478c:	5741 b709 ea04 b6e3 db98 b6e7 6f3c b6e8     AW..........<o..
   1479c:	16f6 b6c6 dbbe b6a4 26c1 b6ab 7289 b6c8     .........&...r..
   147ac:	1cee b6e6 576c b70c c337 b732 a36b b74d     ....lW..7.2.k.M.
   147bc:	34ff b753 7663 b761 07ac b788 3a20 b7a6     .4S.cva..... :..
   147cc:	8d46 b7bb a501 b7c4 2897 b7c9 4728 b7ce     F........(..(G..
   147dc:	56d9 b7d1 bd0a b7d3 9ddc b7e1 a9d4 b7fd     .V..............
   147ec:	0c57 b80a 2316 b80b 0e49 b809 32d6 b80d     W....#..I....2..
   147fc:	5c58 b816 e1b2 b81f 1550 b82b 3213 b83a     X\......P.+..2:.
   1480c:	308f b849 5389 b851 9988 b851 2e03 b850     .0I..SQ...Q...P.
   1481c:	29a8 b852 e90f b855 f882 b859 b106 b862     .)R...U...Y...b.
   1482c:	e827 b870 0362 b87c 081e b87f bd38 b880     '.p.b.|.....8...
   1483c:	1fd5 b885 13e1 b88a ac4b b88b ecdd b88a     ........K.......
   1484c:	1365 b88c 6273 b890 3a66 b894 1ee8 b894     e...sb..f:......
   1485c:	3c9e b891 4dbd b88e fbf3 b88a 4e2f b886     .<...M....../N..
   1486c:	ce57 b881 4b31 b87b 4c31 b86c 9e1a b853     W...1K{.1Ll...S.
   1487c:	cd3c b839 8703 b825 8427 b810 c45e b7e5     <.9...%.'...^...
   1488c:	d180 b7a4 4a23 b774 5d88 b75c f98b b758     ....#Jt..]\...X.
   1489c:	3bc3 b73f ffe0 b711 0e7d b6d6 9edc b69d     .;?.....}.......
   148ac:	62b7 b649 9ca9 b5a5 f919 352b 9ce8 3652     .bI.......+5..R6
   148bc:	930c 36bc c0f9 36ce 2767 3698 c1fc 3661     ...6...6g'.6..a6
   148cc:	17a5 36a9 381d 3715 0fe7 3750 40e8 3770     ...6.8.7..P7.@p7
   148dc:	a9e7 3782 ad58 378e 5042 3796 b11a 3797     ...7X..7BP.7...7
   148ec:	464c 37a0 b887 37b5 fa38 37c5 0744 37c2     LF.7...78..7D..7
   148fc:	9a30 37b6 1788 37b9 34fc 37cb e22c 37de     0..7...7.4.7,..7
   1490c:	d2fb 37eb 1dbe 37f6 2830 3801 b003 3806     ...7...70(.8...8
   1491c:	01de 380b 85f7 3811 afb1 381a 40d7 3821     ...8...8...8.@!8
   1492c:	bad2 3825 33a0 3832 b439 3849 ffd2 385e     ..%8.3289.I8..^8
   1493c:	5feb 3865 07c1 3861 a87d 385f 5784 3868     ._e8..a8}._8.Wh8
   1494c:	3c3a 3877 c065 3881 aa0d 3882 3590 3878     :<w8e..8...8.5x8
   1495c:	06a8 385d f559 383c e3cc 3824 3b35 3818     ..]8Y.<8..$85;.8
   1496c:	a105 380d cc66 37fb fabe 37db 9f90 37c7     ...8f..7...7...7
   1497c:	5ec1 37b8 63e9 37aa d82d 37ae aebb 37d1     .^.7.c.7-..7...7
   1498c:	2c9d 37fd b3d7 3807 1171 3802 9ac0 37f6     .,.7...8q..8...7
   1499c:	84f0 37fc db58 3807 5ae2 3810 674f 3817     ...7X..8.Z.8Og.8
   149ac:	b897 381f 1138 3826 75ad 3826 de3d 3823     ...88.&8.u&8=.#8
   149bc:	b89b 3821 4367 381e 2a13 381b 677d 3821     ..!8gC.8.*.8}g!8
   149cc:	8f6d 3834 e0c1 3849 a705 3852 31c8 384c     m.48..I8..R8.1L8
   149dc:	7277 3840 d197 3836 44f2 382b 09fe 3819     wr@8..68.D+8...8
   149ec:	0340 3805 6f4f 37e8 15c0 37c4 e7ff 3795     @..8Oo.7...7...7
   149fc:	c626 375a c753 3734 19ca 3729 ecb4 3710     &.Z7S.47..)7...7
   14a0c:	8364 36be 8224 360e fdf3 b58e 9972 b67a     d..6$..6....r.z.
   14a1c:	afb3 b6be 735c b6d1 41b8 b6c5 f8e7 b6df     ....\s...A......
   14a2c:	03d2 b71e b412 b74b 30d2 b761 8058 b777     ......K..0a.X.w.
   14a3c:	3fea b794 63d5 b7af a19a b7bb 3c2e b7bc     .?...c.......<..
   14a4c:	dbfb b7c5 6090 b7e4 18c3 b807 150f b819     .....`..........
   14a5c:	f98b b823 502c b826 17c9 b81e a47e b80d     ..#.,P&.....~...
   14a6c:	e3d9 b7f9 bfcc b7dc 6cca b7b4 60cd b776     .........l...`v.
   14a7c:	8dc4 b70d 4834 b6a0 4ef5 b5e8 a035 366c     ....4H...N..5.l6
   14a8c:	ca57 372a d413 3779 da99 3786 032f 377d     W.*7..y7...7/.}7
   14a9c:	d929 3764 f527 3749 46ba 372e 46b7 3725     ).d7'.I7.F.7.F%7
   14aac:	ef8b 3732 9a55 3732 9cee 3705 112a 3676     ..27U.27...7*.v6
   14abc:	fb18 b4db a975 b67a 3997 b6be 9b8e b6a5     ....u.z..9......
   14acc:	7354 b5fd 8cf4 3587 f79d 3601 4188 35e4     Ts.....5...6.A.5
   14adc:	005e 3621 da8e 3693 4cf1 36bd 539d 369a     ^.!6...6.L.6.S.6
   14aec:	a2f9 3632 c294 35ea 78bc 35c9 770f 3561     ..26...5.x.5.wa5
   14afc:	e472 3473 3082 349b dc71 3434 2878 b584     r.s4.0.4q.44x(..
   14b0c:	5629 b613 b4cf b5c6 99ef 3608 8def 36fc     )V.........6...6
   14b1c:	3eb3 376c 6906 37b6 00dc 37fb 224d 3819     .>l7.i.7...7M".8
   14b2c:	297b 382a c815 3837 78f5 3846 5295 384e     {)*8..78.xF8.RN8
   14b3c:	9fe0 3848 8d1a 383c 1eb2 3835 761b 3832     ..H8..<8..58.v28
   14b4c:	b0ac 382b 57c3 381a 0b2c 37ff 6938 37c0     ..+8.W.8,..78i.7
   14b5c:	87a3 3782 cff4 3721 ddbd 36dc 2817 36ce     ...7..!7...6.(.6
   14b6c:	13a7 36d5 ea9f 36d2 f466 36f0 b697 371a     ...6...6f..6...7
   14b7c:	4f09 3725 4788 36fa bb4e 3693 53e5 3687     .O%7.G.6N..6.S.6
   14b8c:	e504 36d4 7f62 370e e634 370c fda5 36d5     ...6b..74..7...6
   14b9c:	6142 367a f92c 3594 c5a2 b581 d158 b5c5     Baz6,..5....X...
   14bac:	039a b552 b7f8 b5ca 4650 b69f dc95 b6fb     ..R.....PF......
   14bbc:	58fa b6dc 3978 b613 2a48 3686 3bb0 3744     .X..x9..H*.6.;D7
   14bcc:	d468 37ac e5de 37f3 dda6 3814 7876 3827     h..7...7...8vx'8
   14bdc:	0707 3837 f5a6 3843 5076 3846 dfd8 3839     ..78..C8vPF8..98
   14bec:	1bc7 3827 fe17 3815 2348 3801 64dd 37c3     ..'8...8H#.8.d.7
   14bfc:	96f1 3774 481b 36e5 ce85 34d3 f80d b6ad     ..t7.H.6...4....
   14c0c:	c204 b721 8ca7 b754 d8e4 b774 e097 b782     ..!...T...t.....
   14c1c:	811e b777 e996 b733 6b20 b688 05ac 3631     ..w...3. k....16
   14c2c:	677e 3706 f547 375f b44a 37a2 f0bb 37ca     ~g.7G._7J..7...7
   14c3c:	b788 37d9 390c 37d8 f8b7 37d7 ebb3 37da     ...7.9.7...7...7
   14c4c:	bd54 37d6 6d30 37c6 6996 37ae 1b24 3792     T..70m.7.i.7$..7
   14c5c:	5c5b 3760 ffbc 371a 874c 36df 23bf 36cc     [\`7...7L..6.#.6
   14c6c:	4a93 36bd 32ac 368b 33d7 3663 1002 36ae     .J.6.2.6.3c6...6
   14c7c:	6738 370d 0305 3740 3353 377b 61a3 37a6     8g.7..@7S3{7.a.7
   14c8c:	54a1 37c8 1059 37c9 872d 37a5 fc80 3761     .T.7Y..7-..7..a7
   14c9c:	7acc 36e6 493e b4ce e2f1 b70c 367f b782     .z.6>I.......6..
   14cac:	e289 b7ad 9d21 b7d6 2159 b804 2d1a b81b     ....!...Y!...-..
   14cbc:	bada b827 2b3c b82a 9be6 b825 6055 b818     ..'.<+*...%.U`..
   14ccc:	794c b801 3359 b7ca 5e13 b78f 5f85 b727     Ly..Y3...^..._'.
   14cdc:	3670 b641 1bc5 3633 6013 368f 56c9 35e1     p6A...36.`.6.V.5
   14cec:	9676 b613 7248 b6aa cfcd b708 8cac b75a     v...Hr........Z.
   14cfc:	5e4a b79b 5a29 b7c0 18f0 b7e0 7f08 b801     J^..)Z..........
   14d0c:	21a5 b812 7562 b81d 6927 b824 f21e b82b     .!..bu..'i$...+.
   14d1c:	9cc2 b835 677e b83d 754b b841 81eb b846     ..5.~g=.KuA...F.
   14d2c:	a664 b84e 780b b853 5567 b852 6ea9 b855     d.N..xS.gUR..nU.
   14d3c:	5a07 b866 2334 b880 5a26 b88c 49ab b897     .Zf.4#..&Z...I..
   14d4c:	31c7 b8a4 ae69 b8b3 de5c b8c1 073e b8cb     .1..i...\...>...
   14d5c:	3912 b8cf d7fe b8cf 54fd b8cc 2e5c b8c4     .9.......T..\...
   14d6c:	63b6 b8b9 7f50 b8ad b043 b89f ae77 b891     .c..P...C...w...
   14d7c:	b667 b889 8d69 b88a 2dac b88e a63e b88d     g...i....-..>...
   14d8c:	5d59 b88a 17e4 b88b 10a7 b893 cd44 b89f     Y]..........D...
   14d9c:	cef2 b8ad 8bff b8bb 5560 b8c7 3e5d b8ce     ........`U..]>..
   14dac:	4ffd b8d0 78c6 b8d2 fb7d b8d7 6cf5 b8dd     .O...x..}....l..
   14dbc:	6c2d b8de b573 b8db 72de b8d7 c32b b8d0     -l..s....r..+...
   14dcc:	da30 b8c6 3494 b8bc 52db b8b3 ae08 b8aa     0....4...R......
   14ddc:	bd64 b89e db61 b88f 207d b883 a68d b876     d...a...} ....v.
   14dec:	6e68 b869 f612 b856 6f2c b843 2aa5 b835     hni...V.,oC..*5.
   14dfc:	280c b829 b431 b81a 1c7a b80d 265b b805     .().1...z...[&..
   14e0c:	aa29 b7fe 8649 b7e7 6c3f b7c2 de40 b79d     )...I...?l..@...
   14e1c:	d9fc b784 b218 b762 654b b734 4934 b700     ......b.Ke4.4I..
   14e2c:	2b59 b688 741d 3590 39e8 36f8 b4a3 3751     Y+...t.5.9.6..Q7
   14e3c:	6c35 377f 4629 3791 ad84 37ac 106d 37cc     5l.7)F.7...7m..7
   14e4c:	a800 37df 04e0 37e4 65d4 37e4 e970 37e9     ...7...7.e.7p..7
   14e5c:	bb8c 37f2 7b53 37fd e1a0 3807 801a 3813     ...7S{.7...8...8
   14e6c:	533d 3819 2503 3816 c1f7 3811 c07d 3810     =S.8.%.8...8}..8
   14e7c:	98a6 380b 1c9d 37fc db64 37e7 085a 37f5     ...8...7d..7Z..7
   14e8c:	e184 380d d2ad 381e f480 3825 b243 3828     ...8...8..%8C.(8
   14e9c:	d5f8 382d ab31 3834 bb93 3839 6ba1 383d     ..-81.48..98.k=8
   14eac:	a277 383f 49e3 383c dad2 3834 48e6 3834     w.?8.I<8..48.H48
   14ebc:	ec34 383f 5376 384f d8aa 385a 8b41 3865     4.?8vSO8..Z8A.e8
   14ecc:	774a 3872 45ee 387c 369b 387d 9056 3878     Jwr8.E|8.6}8V.x8
   14edc:	c162 3877 d081 387e cc92 3883 f8e2 3885     b.w8..~8...8...8
   14eec:	fe2a 3886 9a6c 3887 66db 3884 6d9b 3877     *..8l..8.f.8.mw8
   14efc:	e433 3864 a841 385b 16d3 3859 43a8 3854     3.d8A.[8..Y8.CT8
   14f0c:	4a87 384b ad31 3843 ece2 3841 d226 3845     .JK81.C8..A8&.E8
   14f1c:	5f39 384e 4dd0 385c 18bd 386d 53da 3879     9_N8.M\8..m8.Sy8
   14f2c:	5ea5 387e 4f3b 3881 4b2b 3884 d045 3883     .^~8;O.8+K.8E..8
   14f3c:	d9f6 387a e901 386c 6f99 386a d056 3870     ..z8..l8.oj8V.p8
   14f4c:	9306 3873 4490 386d 37d5 3863 bf5c 385b     ..s8.Dm8.7c8\.[8
   14f5c:	5444 3858 8880 3859 d4dc 3860 b899 386a     DTX8..Y8..`8..j8
   14f6c:	c7aa 386e 61f5 386b f1b7 3868 10f4 386b     ..n8.ak8..h8..k8
   14f7c:	9aad 3869 e9c8 3860 75a7 385c 90fc 3866     ..i8..`8.u\8..f8
   14f8c:	b0b0 3877 d93c 387f 6e57 387a 562f 3871     ..w8<..8Wnz8/Vq8
   14f9c:	16c4 386f 9ce8 3873 664e 3878 e826 3879     ..o8..s8Nfx8&.y8
   14fac:	3ffe 3876 e2c2 3868 98f0 3851 e250 3838     .?v8..h8..Q8P.88
   14fbc:	a44d 3823 fb3a 380b 8bca 37dd ec39 37a8     M.#8:..8...79..7
   14fcc:	1663 3789 0b0b 3769 3140 372d 34e1 369d     c..7..i7@1-7.4.6
   14fdc:	2c70 b609 c384 b713 7eb4 b783 3c14 b7bc     p,.......~...<..
   14fec:	dcd6 b7e6 0ae8 b7fd f26c b805 f4c5 b80d     ........l.......
   14ffc:	6c43 b80f 84ec b803 4c6c b7dd 25c9 b7b2     Cl......lL...%..
   1500c:	4346 b78b 4412 b750 88a1 b715 4f32 b6d0     FC...DP.....2O..
   1501c:	4373 b66b ad59 3479 c2df 3692 f346 36db     sCk.Y.y4...6F..6
   1502c:	ab74 36c3 cc02 368c 002c 365a 716d 35f0     t..6...6,.Z6mq.5
   1503c:	cc89 b58a dc73 b641 26b0 b592 c84f 3674     ....s.A..&..O.t6
   1504c:	7d43 370d d952 3746 d14a 3776 c679 3796     C}.7R.F7J.v7y..7
   1505c:	42e7 37b5 cee3 37d5 1440 37f9 e344 380a     .B.7...7@..7D..8
   1506c:	adf5 380c 475e 3800 96b6 37e0 ef62 37c9     ...8^G.8...7b..7
   1507c:	6fac 37b3 015f 3793 2e3a 376c 2de4 3758     .o.7_..7:.l7.-X7
   1508c:	456e 3754 db43 3732 1b8f 36da b529 3613     nET7C.27...6)..6
   1509c:	0904 b52e b040 b618 8856 b64b d169 b60f     ....@...V.K.i...
   150ac:	4277 34ce 5cc8 3619 2b4b 35e4 f0c5 b4e8     wB.4.\.6K+.5....
   150bc:	87e4 b632 f36c b6ae a52f b705 2fb9 b717     ..2.l.../..../..
   150cc:	81a8 b6f5 b812 b69b 0ef4 b66b f25c b693     ..........k.\...
   150dc:	0fe9 b6c0 d0ea b6c7 6111 b6b4 4bd2 b697     .........a...K..
   150ec:	86d6 b61f e87a 35d8 fa13 36c0 2356 370f     ....z..5...6V#.7
   150fc:	da3a 373a 0d2f 3779 0bbc 3799 a208 37a1     :.:7/.y7...7...7
   1510c:	32a0 3797 46b3 3785 4a06 375e ffe6 3720     .2.7.F.7.J^7.. 7
   1511c:	bcd1 36aa 631e 3533 cfb3 b66f 1ca4 b712     ...6.c35..o.....
   1512c:	6c28 b776 5619 b7a2 c8a7 b7b2 f20b b7b8     (lv..V..........
   1513c:	9e3a b7c3 db0b b7cd 0fca b7ce 705d b7ca     :...........]p..
   1514c:	ffc5 b7cf 5d1b b7e1 9e53 b7f8 83a3 b809     .....]..S.......
   1515c:	7f15 b819 959d b82b a5f7 b83b b1f8 b847     ......+...;...G.
   1516c:	71f7 b852 777e b85b 9311 b85c 54c6 b857     .qR.~w[...\..TW.
   1517c:	2af2 b85a b6c3 b86b 91ce b87c 3ac5 b87b     .*Z...k...|..:{.
   1518c:	6c07 b86b 2055 b85e 2c4e b85c ed70 b861     .lk.U ^.N,\.p.a.
   1519c:	55fe b869 eda6 b86f 7223 b873 b9b7 b86f     .Ui...o.#rs...o.
   151ac:	5e10 b865 a45e b85c 57fe b85a a18c b858     .^e.^.\..WZ...X.
   151bc:	dc02 b851 834b b848 84b4 b83d 6f7a b82a     ..Q.K.H...=.zo*.
   151cc:	6baa b80c 6a26 b7d7 55fe b7a6 1a9b b78b     .k..&j...U......
   151dc:	cdaa b774 6924 b752 1276 b732 b508 b71b     ..t.$iR.v.2.....
   151ec:	d36a b704 4387 b6d8 4786 b6dd 580f b718     j....C...G...X..
   151fc:	3a0f b744 82bc b752 29b1 b756 51a8 b76e     .:D...R..)V..Qn.
   1520c:	b649 b78c 6f78 b7a2 0d1e b7b7 80b8 b7d0     I...xo..........
   1521c:	37b2 b7ee 46b9 b803 428f b80c 6ef3 b819     .7...F...B...n..
   1522c:	88fc b82d e097 b83e 81bd b845 91b6 b847     ..-...>...E...G.
   1523c:	44c9 b84d daa8 b852 0164 b851 d920 b849     .DM...R.d.Q. .I.
   1524c:	9119 b844 235b b843 fdba b842 0d45 b843     ..D.[#C...B.E.C.
   1525c:	22b5 b844 17db b845 cb0a b842 af48 b83d     ."D...E...B.H.=.
   1526c:	3132 b83b b3be b83c 80a0 b83a 13ea b82f     21;...<...:.../.
   1527c:	f287 b81f e9bd b811 4648 b7fc 37e4 b7bc     ........HF...7..
   1528c:	711f b767 9ae6 b700 2da9 b6b0 b735 b6a2     .qg......-..5...
   1529c:	7c5a b692 d9be b651 8059 b584 c285 3637     Z|....Q.Y.....76
   152ac:	ff39 36ff a1ff 373a c334 3743 dd13 3737     9..6..:74.C7..77
   152bc:	b800 3733 852e 3729 682d 3712 e4d5 3712     ..37..)7-h.7...7
   152cc:	a511 374a aeee 3795 3969 37c9 3604 37f7     ..J7...7i9.7.6.7
   152dc:	8bfc 3810 a328 3823 b637 3831 8e44 383a     ...8(.#87.18D.:8
   152ec:	8d75 3844 a8c2 3851 6266 3858 ff94 3851     u.D8..Q8fbX8..Q8
   152fc:	f408 3845 2289 383d ad8c 3834 66e5 3826     ..E8."=8..48.f&8
   1530c:	b15b 3814 dbad 3806 c66d 37ff f57e 37fa     [..8...8m..7~..7
   1531c:	a4a8 37fa 7f41 37fe 6bac 3801 c6dc 37ff     ...7A..7.k.8...7
   1532c:	e3c3 37f9 d1e6 3802 464c 3815 0402 382a     ...7...8LF.8..*8
   1533c:	66a5 3837 0ac0 3840 1fbb 3848 f671 384a     .f78..@8..H8q.J8
   1534c:	e728 3843 1ffe 3839 759a 3835 fb96 383a     (.C8..98.u58..:8

0001535c <x_p4>:
   1535c:	b143 374b d270 370e 1ce0 3693 54e3 35a9     C.K7p..7...6.T.5
   1536c:	9319 b551 a062 b679 fd0b b71b 5df1 b785     ..Q.b.y......]..
   1537c:	3549 b7a8 3c2c b7ae 8c98 b79e c281 b762     I5..,<........b.
   1538c:	429e b67a 7f3e 36ec 8523 375f fb1c 376c     .Bz.>..6#._7..l7
   1539c:	3721 3770 3f42 379b 1801 37dc d315 380f     !7p7B?.7...7...8
   153ac:	7314 3826 4bfc 3824 37de 3804 005b 37b1     .s&8.K$8.7.8[..7
   153bc:	543b 3760 c346 3702 04e6 b446 e538 b74a     ;T`7F..7..F.8.J.
   153cc:	4506 b7cb 1509 b801 3b90 b7f1 bfab b7b3     .E.......;......
   153dc:	0811 b782 44c8 b769 8163 b763 0af9 b738     .....Di.c.c...8.
   153ec:	115a b6c7 77ab 355f 0e0f 3711 5d15 377e     Z....w_5...7.]~7
   153fc:	8250 379b 6bd0 37ab f726 37c0 4d1d 37d4     P..7.k.7&..7.M.7
   1540c:	c612 37d5 1401 37c2 5d7e 3798 ed02 3730     ...7...7~].7..07
   1541c:	2229 35f8 ea8f b6a9 fcfa b705 f234 b6fd     )".5........4...
   1542c:	2fad b704 7bbb b74d ab50 b798 db1a b7a8     ./...{M.P.......
   1543c:	ce9e b78c 559e b744 b604 b6df 50e9 34a0     .....UD......P.4
   1544c:	a80b 372b b4e6 37ad 6188 37ef 1cf7 3807     ..+7...7.a.7...8
   1545c:	610a 3805 543f 37ee 911e 37c7 9777 37a1     .a.8?T.7...7w..7
   1546c:	1872 3778 8632 3718 f293 356b 2b5e b723     r.x72..7..k5^+#.
   1547c:	6c3d b7ad 2e3a b7f1 5792 b800 03bd b7cb     =l..:....W......
   1548c:	5e96 b749 ee71 b5d4 7e55 35a6 d90f b45d     .^I.q...U~.5..].
   1549c:	aa74 3636 1596 375f 39f1 37d7 bf63 3803     t.66.._7.9.7c..8
   154ac:	0156 37eb ddb0 37a8 3320 3766 8173 3731     V..7...7 3f7s.17
   154bc:	5aee 370c 531a 364e e1d2 b710 b249 b7d9     .Z.7.SN6....I...
   154cc:	9a0e b831 81a4 b855 6674 b858 8144 b854     ..1...U.tfX.D.T.
   154dc:	3533 b85f 46a1 b877 faf0 b887 4c61 b88e     35_..Fw.....aL..
   154ec:	ee70 b886 ec26 b859 49d6 b811 73bc b7ad     p...&.Y..I...s..
   154fc:	a803 b76b 70d1 b745 bebb b716 6a95 b637     ..k..pE......j7.
   1550c:	9b5e 36e1 ee2b 3782 cb14 37a8 b366 37a7     ^..6+..7...7f..7
   1551c:	cfd0 378d acf2 374f b8e3 3709 2321 36bc     ...7..O7...7!#.6
   1552c:	28bf 367f 8ca3 35fc da51 3509 b2ca 33dd     .(.6...5Q..5...3
   1553c:	0018 b435 4a74 347c faf7 3683 469e 374b     ..5.tJ|4...6.FK7
   1554c:	0f96 37bc 7ed5 3803 a633 381d 6ad1 3831     ...7.~.83..8.j18
   1555c:	c478 3843 f3b0 384f ac2c 384b 888b 3835     x.C8..O8,.K8..58
   1556c:	ce4c 3818 c743 37ff 6533 37d3 1ee8 379b     L..8C..73e.7...7
   1557c:	e700 370f ecad b67c 21cd b768 c8a1 b787     ...7..|..!h.....
   1558c:	5ed1 b72f 0851 b614 a593 362d fd31 3665     .^/.Q.....-61.e6
   1559c:	0156 36b0 9efe 374b 9635 37bc 9d02 3805     V..6..K75..7...8
   155ac:	cb34 3820 518f 3831 8c83 3836 e7a8 3830     4. 8.Q18..68..08
   155bc:	0ff3 3829 720e 3827 9fdf 3829 0f84 3829     ..)8.r'8..)8..)8
   155cc:	e006 3823 4593 3816 7300 37ee 44dc 378c     ..#8.E.8.s.7.D.7
   155dc:	1753 369c 2219 b63a 744f b68f 284c b678     S..6.":.Ot..L(x.
   155ec:	5ff9 b6c1 aef4 b72c 884c b751 1926 b718     ._....,.L.Q.&...
   155fc:	a3d9 b5d1 4b31 36d7 ef8e 374f 2f54 3782     ....1K.6..O7T/.7
   1560c:	35c6 378e 264e 37a8 280f 37e2 db52 3810     .5.7N&.7.(.7R..8
   1561c:	e501 3819 13ce 3805 c855 37cc b9b7 37ab     ...8...8U..7...7
   1562c:	3e32 37b8 df20 37e4 00ad 3803 e6a0 37db     2>.7 ..7...8...7
   1563c:	6587 3722 ce9a b72a 4227 b7b8 a417 b7bd     .e"7..*.'B......
   1564c:	3451 b792 569c b757 90d8 b74d d541 b77d     Q4...VW...M.A.}.
   1565c:	74da b799 732d b7aa 72c5 b7ba bd53 b7be     .t..-s...r..S...
   1566c:	e8f8 b799 5d5f b720 9a4d b5b0 ad81 3668     ...._] .M.....h6
   1567c:	90ed 36ba dab0 36b2 b593 362c 4f78 b52c     ...6...6..,6xO,.
   1568c:	03db b5f9 6379 b5b4 249f b535 e6f8 b5c4     ....yc...$5.....
   1569c:	2a96 b6ce 5901 b77e 421a b7c9 7826 b7e0     .*...Y~..B..&x..
   156ac:	2036 b7b7 7cd8 b755 beb1 b6af 883d b64a     6 ...|U.....=.J.
   156bc:	8bf9 b697 968c b6b6 3dc7 b67f cd73 b50c     .........=..s...
   156cc:	69db 364d dbcd 36be eb83 36d5 0fcf 36d1     .iM6...6...6...6
   156dc:	9c7f 3703 8a2a 3740 61d3 375e 8253 3712     ...7*.@7.a^7S..7
   156ec:	b340 b5b0 ab34 b731 92db b776 e788 b789     @...4.1...v.....
   156fc:	2410 b7b1 d46c b7f3 af86 b815 4589 b81d     .$..l........E..
   1570c:	e28f b814 ae76 b808 fb06 b7fb 8792 b7e7     ....v...........
   1571c:	cc42 b7d4 b93f b7c6 f7e5 b7b3 eb4f b786     B...?.......O...
   1572c:	0a06 b6d2 8153 36c9 57de 378a fed4 37b1     ....S..6.W.7...7
   1573c:	ad1e 379d bb80 375b a538 3749 afb7 37a0     ...7..[78.I7...7
   1574c:	7bca 37ee 6d6e 3804 231f 37ed 211e 37d0     .{.7nm.8.#.7.!.7
   1575c:	f148 37d7 e822 37fb aec1 380d b13d 3811     H..7"..7...8=..8
   1576c:	3745 380c f7aa 3801 9e9f 37ee 0117 37e1     E7.8...8...7...7
   1577c:	1f95 37ce 3dae 379b da63 372c 1431 36e1     ...7.=.7c.,71..6
   1578c:	52a8 3735 58c1 3793 bdf3 379b f39e 371e     .R57.X.7...7...7
   1579c:	0399 b6bd c265 b795 dabf b7bd e8ee b7bd     ....e...........
   157ac:	6537 b7b6 a4c6 b7af 1a8d b7a7 d683 b79a     7e..............
   157bc:	16be b78b 4fc1 b781 a79c b785 196e b785     .....O......n...
   157cc:	78d1 b735 cf66 34c8 444a 3762 c107 37bf     .x5.f..4JDb7...7
   157dc:	a3c0 37dc d74f 37da f7bf 37d5 1325 37d1     ...7O..7...7%..7
   157ec:	d1d9 37bd 4b5f 379b 048c 3762 23d6 36e9     ...7_K.7..b7.#.6
   157fc:	2a5f b554 8530 b6e3 df1a b71a 421a b726     _*T.0........B&.
   1580c:	c9eb b73a 5029 b765 fb6d b791 0ee0 b7b3     ..:.)Pe.m.......
   1581c:	2057 b7c5 5aed b7b9 adf9 b790 f8ca b748     W ...Z........H.
   1582c:	a1fc b72f f621 b75e 96ee b786 a4b5 b77a     ../.!.^.......z.
   1583c:	7769 b744 ebe5 b72f 95fb b742 e71b b743     iwD.../...B...C.
   1584c:	6801 b717 ca00 b6c2 136f b6a0 9908 b6c8     .h......o.......
   1585c:	aaa8 b6fb c766 b707 c2d0 b703 7e9c b6f3     ....f........~..
   1586c:	154d b6ec 8fd1 b702 8479 b711 d951 b708     M.......y...Q...
   1587c:	ae4e b6d7 1263 b6ba 4f7a b6c7 95f1 b697     N...c...zO......
   1588c:	e899 3581 8e3e 36f5 df22 371d ee3b 36d2     ...5>..6"..7;..6
   1589c:	1809 356f 3a4d b65e 2180 b68a c0c3 b5f6     ..o5M:^..!......
   158ac:	6b86 3578 9b49 35c6 7fa3 b5b9 d070 b6cf     .kx5I..5....p...
   158bc:	64ab b719 66c7 b710 54c1 b701 0892 b719     .d...f...T......
   158cc:	5faf b738 6b88 b73a 1ef8 b734 b0bb b73e     ._8..k:...4...>.
   158dc:	5058 b73e 4cf4 b70c 8744 b680 01c2 b602     XP>..L..D.......
   158ec:	b9d8 b687 325e b6e0 cb5f b6d5 3d4e b689     ....^2.._...N=..
   158fc:	3895 b64b dc17 b675 9a99 b687 50f1 b685     .8K...u......P..
   1590c:	cd0a b6a4 ce57 b6da 1b0b b6fa 24f9 b705     ....W........$..
   1591c:	976f b713 2ae3 b72e 86f3 b760 3602 b798     o....*....`..6..
   1592c:	c21d b7c0 79d3 b7cd f455 b7ab 789a b76f     .....y..U....xo.
   1593c:	5e1e b770 f276 b7d2 26f8 b825 4760 b839     .^p.v....&%.`G9.
   1594c:	3532 b811 eb91 b796 703d b6d3 92f5 b6c1     25......=p......
   1595c:	b70a b74e ecd4 b78f 3063 b785 8649 b733     ..N.....c0..I.3.
   1596c:	7265 b6bd 1d05 b61d 3581 b463 e598 3583     er.......5c....5
   1597c:	d1f7 34a4 9a9b b628 2595 b6c5 e5f7 b6f0     ...4..(..%......
   1598c:	1ccd b69a 479d 3560 f991 36be f513 3711     .....G`5...6...7
   1599c:	0690 3746 5b43 3776 0fdf 3760 9b2c 36e3     ..F7C[v7..`7,..6
   159ac:	acaf b49d 3962 b64f 8ae4 b5ce 4ee6 3579     ....b9O......Ny5
   159bc:	d8be 3563 2ff9 b634 a806 b6ee a155 b706     ..c5./4.....U...
   159cc:	ed91 b639 d3cc 36e3 1e3f 3782 1836 37a5     ..9....6?..76..7
   159dc:	508d 37ab 654e 37b3 5a55 37c1 4644 37b9     .P.7Ne.7UZ.7DF.7
   159ec:	b102 3793 96da 3766 d751 375e 65f5 3759     ...7..f7Q.^7.eY7
   159fc:	7785 3710 1710 3601 abda b5b9 f472 35d4     .w.7...6....r..5
   15a0c:	59f4 3708 7f91 3751 9ecd 3733 db12 36ad     .Y.7..Q7..37...6
   15a1c:	41eb 363c d3ec 36c9 e7ac 371a be9e 36d2     .A<6...6...7...6
   15a2c:	62ba b614 023e b71b 0435 b6ff 75ab 3626     .b..>...5....u&6
   15a3c:	a081 3744 5e18 3735 0ef5 354d b1df b70d     ..D7.^57..M5....
   15a4c:	7602 b719 68f6 b64f 3d54 3642 5c6f 3698     .v...hO.T=B6o\.6
   15a5c:	d73d 35c9 d3bc b6a5 fbe6 b74c d02d b78d     =..5......L.-...
   15a6c:	8189 b794 ecb8 b78b 111b b788 f5bd b788     ................
   15a7c:	cd7e b785 b6c8 b772 fe92 b72c 0e3c b5f0     ~.....r...,.<...
   15a8c:	fb74 3707 523b 374f cd6e 371d 8b03 36e0     t..7;RO7n..7...6
   15a9c:	dd1d 372b 7869 3788 6570 3793 3f8b 3760     ..+7ix.7pe.7.?`7
   15aac:	b187 3710 a75f 36e6 c212 36f4 d0e0 36fd     ...7_..6...6...6
   15abc:	6d95 36c8 0a54 3589 f937 b6ff c00a b792     .m.6T..57.......
   15acc:	9994 b7c9 de6e b7c4 dcbb b78b 37ba b726     ....n........7&.
   15adc:	6a6c b707 25c7 b716 1686 b70a 3f14 b6d4     lj...%.......?..
   15aec:	c151 b6c3 4587 b6d1 07c7 b6a2 87e9 b52c     Q....E........,.
   15afc:	bacf 369e 0e62 3717 0a6a 3727 5e73 36ab     ...6b..7j.'7s^.6
   15b0c:	c083 b6c9 e338 b79c 4037 b7d8 f6b2 b7cd     ....8...7@......
   15b1c:	b6f5 b79e 359e b77b f191 b787 6212 b7b0     .....5{......b..
   15b2c:	584c b7c5 66b2 b7a0 fe79 b723 fae5 b5c8     LX...f..y.#.....
   15b3c:	70e1 3609 2680 3618 e751 368c 2e4b 3745     .p.6.&.6Q..6K.E7
   15b4c:	6bcd 37b8 65fe 37e4 6871 37d1 054f 37a9     .k.7.e.7qh.7O..7
   15b5c:	8c53 3789 a173 3748 7ac4 36bb 981f b4aa     S..7s.H7.z.6....
   15b6c:	646b b670 c078 b6a8 e9f0 b6e2 52aa b71e     kdp.x........R..
   15b7c:	2bcd b745 5328 b750 f16b b73e f2e4 b712     .+E.(SP.k.>.....
   15b8c:	94b1 b695 736a 358f 453d 3701 575f 3787     ....js.5=E.7_W.7
   15b9c:	7f23 37d2 3c42 37fc aa0d 37e8 3348 37ae     #..7B<.7...7H3.7
   15bac:	c131 3784 5eb1 378c 67af 37ad 875f 37b5     1..7.^.7.g.7_..7
   15bbc:	51b6 378f f68f 371d 0165 35dc 03f6 b69f     .Q.7...7e..5....
   15bcc:	cdee b701 7b23 b6bb 6a54 3453 1b43 36cb     ....#{..TjS4C..6
   15bdc:	1c00 372e 443e 3769 a1d3 3790 d1a9 37aa     ...7>Di7...7...7
   15bec:	4c5a 37c8 b7a8 37ef b87c 380b 13e6 3813     ZL.7...7|..8...8
   15bfc:	bb31 3807 707a 37e9 2d42 37d9 4812 37e9     1..8zp.7B-.7.H.7
   15c0c:	fba6 37ff d295 37fd 7372 37d7 43a4 3796     ...7...7rs.7.C.7
   15c1c:	1cd0 3722 ce96 367d 199d 359a bf62 b329     .."7..}6...5b.).
   15c2c:	aed2 b62e c7ad b6f2 b164 b72e 0f16 b700     ........d.......
   15c3c:	e07b 3498 0e15 3704 beb9 374b 199d 376d     {..4...7..K7..m7
   15c4c:	067b 377d faaf 378a 3825 37b0 3637 37e9     {.}7...7%8.776.7
   15c5c:	9999 3808 4922 3806 c178 37e0 175a 37a6     ...8"I.8x..7Z..7
   15c6c:	746b 3762 9666 370e 6e98 3699 55b2 3619     ktb7f..7.n.6.U.6
   15c7c:	ad9a 35f3 bd3a 35c8 b740 348b 6127 b447     ...5:..5@..4'aG.
   15c8c:	6d88 35fe ff26 36ba f900 3716 c988 3745     .m.5&..6...7..E7
   15c9c:	5c37 3775 9efb 3790 270c 3791 0183 3759     7\u7...7.'.7..Y7
   15cac:	62b0 36dc 37c7 3643 8f3b 364b 2691 3690     .b.6.7C6;.K6.&.6
   15cbc:	8d7f 368e 46b2 3583 6186 b6eb 860e b799     ...6.F.5.a......
   15ccc:	e465 b7f1 3245 b816 e0af b825 e6de b82f     e...E2....%.../.
   15cdc:	1a92 b836 0ead b830 7f78 b818 3ddb b7ef     ..6...0.x....=..
   15cec:	69f7 b7ad 87a7 b74d dad7 b611 6c8f 3704     .i....M......l.7
   15cfc:	43ce 3775 90ff 3787 1301 375c 9a37 3707     .Cu7...7..\77..7
   15d0c:	d16d 36ac e6d5 36e6 3d69 3729 a8fc 3705     m..6...6i=)7...7
   15d1c:	d75e b5e2 4c38 b766 fc97 b7ba 7d94 b7df     ^...8Lf......}..
   15d2c:	6048 b7f6 5c08 b806 815f b80d 0077 b80b     H`...\.._...w...
   15d3c:	8e1d b802 e757 b7f5 ea34 b7d6 3e1d b784     ....W...4....>..
   15d4c:	1bc8 b52b 4565 3757 ed4a 37a5 6a80 37b8     ..+.eEW7J..7.j.7
   15d5c:	d830 37c7 b51e 37e6 808d 3804 9965 3805     0..7...7...8e..8
   15d6c:	9aac 37d3 b904 3765 2e1a 3625 cfbc b6a1     ...7..e7..%6....
   15d7c:	a960 b70e 12f9 b74f 44fe b7a1 16c8 b7db     `.....O..D......
   15d8c:	ffd6 b7df 7bc8 b7a3 b0b5 b716 f072 34dd     .....{......r..4
   15d9c:	fdc9 36f3 96f6 3740 f4a1 376a 93fd 3794     ...6..@7..j7...7
   15dac:	36a5 37d0 4c97 3808 a0e2 380c 7f41 37c8     .6.7.L.8...8A..7
   15dbc:	a087 3709 3b53 b6aa 8f56 b745 631d b759     ...7S;..V.E..cY.
   15dcc:	23c6 b734 354e b6fd 7a7b b6f1 a0a4 b751     .#4.N5..{z....Q.
   15ddc:	f56f b7b6 91d7 b7f5 8d05 b7f2 aedd b7a3     o...............
   15dec:	399f b6b3 ec42 3704 edf2 378c f192 37ac     .9..B..7...7...7
   15dfc:	2d16 37b3 3b4a 37bb 983e 37cf 5de3 37e1     .-.7J;.7>..7.].7
   15e0c:	fa9d 37e2 da59 37d8 1728 37c9 97cd 37ab     ...7Y..7(..7...7
   15e1c:	ecc2 3769 4eed 36ba e2df b59d a3d3 b6a3     ..i7.N.6........
   15e2c:	0f97 b715 d2fd b786 a182 b7c5 b716 b7dd     ................
   15e3c:	019b b7cb d258 b7a3 747e b75b f8eb b690     ....X...~t[.....
   15e4c:	30de 368e 6468 370e 0bc5 370c d3fe 370c     .0.6hd.7...7...7
   15e5c:	3277 3750 2ee4 37a0 e98d 37c3 fb88 37ae     w2P7...7...7...7
   15e6c:	cfff 373b ac4c b616 012f b76f c026 b7b2     ..;7L.../.o.&...
   15e7c:	91ec b7d2 aa4f b7fc e743 b81a d461 b82f     ....O...C...a./.
   15e8c:	c8f3 b836 dc28 b835 7e02 b82b 247a b80c     ..6.(.5..~+.z$..
   15e9c:	e5ad b7a8 a7df b6bd 26a6 35f9 1068 b562     .........&.5h.b.
   15eac:	9383 b6cd b421 b660 92bf 370f 3598 37b1     ....!.`....7.5.7
   15ebc:	567b 37e1 3c8a 37d3 0932 37a5 9668 3768     {V.7.<.72..7h.h7
   15ecc:	7138 3726 91a2 370c a5c3 36f2 bc7d 365b     8q&7...7...6}.[6
   15edc:	1d3c b673 e4a5 b71d 74dd b72f 8feb b6e8     <.s......t/.....
   15eec:	dc7f b5c2 1f5e 3641 66b2 3688 2727 363f     ....^.A6.f.6''?6
   15efc:	072e 35bb 9f34 350b 5879 b402 fd97 b4e2     ...54..5yX......
   15f0c:	1825 34b0 7cd2 361d da60 367b 67ef 3573     %..4.|.6`.{6.gs5
   15f1c:	a590 b6fd c637 b795 1c62 b7cc 29f0 b7d1     ....7...b....)..
   15f2c:	7b76 b7b6 129c b790 ae23 b741 5a04 b6ae     v{......#.A..Z..
   15f3c:	69e7 b589 029e b5ff 31d8 b6b4 f645 b6a4     .i.......1..E...
   15f4c:	f7bb 362a 43d6 3766 38d1 37be 22ee 37cd     ..*6.Cf7.8.7.".7
   15f5c:	9173 3795 34ad 3704 2d7c 3642 a50d 36bf     s..7.4.7|-B6...6
   15f6c:	2996 372c fbaf 370e 4569 b4b8 8769 b718     .),7...7iE..i...
   15f7c:	34d8 b731 5862 b6b3 99e7 33ba 5d09 35c1     .41.bX.....3.].5
   15f8c:	ac27 3472 e2d9 b3fe ccb7 35c2 6a7f 3691     '.r4.......5.j.6
   15f9c:	70f9 3709 bb77 373f 8c69 3735 6c53 36c4     .p.7w.?7i.57Sl.6
   15fac:	303d 3440 9e1f b677 8c54 b6f2 72f1 b746     =0@4..w.T....rF.
   15fbc:	88ee b789 f452 b7a8 53bf b7c5 73d2 b7d8     ....R....S...s..
   15fcc:	bc15 b7d1 1f61 b7ac 1dde b76a f144 b702     ....a.....j.D...
   15fdc:	966a b68a 2791 b675 caec b6b5 92e7 b6f3     j....'u.........
   15fec:	f50c b6e0 1212 b634 75c8 361d b4bf 365f     ......4..u.6.._6
   15ffc:	71e2 b615 7ed7 b736 2104 b78b 7cd7 b78b     .q...~6..!...|..
   1600c:	c1f4 b751 06d7 b6db 90cf b508 fda0 3667     ..Q...........g6
   1601c:	e3c8 369f 2645 36d6 c4ef 3742 632f 379e     ...6E&.6..B7/c.7
   1602c:	88a9 37be 723f 37ae 4ea8 3794 5f1e 379b     ...7?r.7.N.7._.7
   1603c:	1c4a 37b4 f139 37ae eeb8 3780 cab3 3708     J..79..7...7...7
   1604c:	ceb9 35e6 6e3d b656 bb06 b6df 244e b723     ...5=nV.....N$#.
   1605c:	9c35 b761 fabb b792 fd8d b7ab bd31 b7af     5.a.........1...
   1606c:	8cab b79b 10b8 b776 fe5e b733 be8a b6d0     ......v.^.3.....
   1607c:	6df3 b506 73b1 3695 02dd 36c0 fa31 3665     .m...s.6...61.e6
   1608c:	6bbd 3584 8642 35af 5f4c 3682 6ca2 36ca     .k.5B..5L_.6.l.6
   1609c:	e12d 36cc 6175 3699 9583 3626 e6ef 34a8     -..6ua.6..&6...4
   160ac:	b6fb b5ff 1a23 b692 a0dd b6dd bddf b6db     ....#...........
   160bc:	908c b60a 625a 36b8 1b56 3744 abbe 3763     ....Zb.6V.D7..c7
   160cc:	51f6 3750 f3fd 3746 e1c5 376f 412e 37a0     .QP7..F7..o7.A.7
   160dc:	7018 37c9 b76d 37ea ca1c 3804 7798 3814     .p.7m..7...8.w.8
   160ec:	55cb 3820 4dbb 381f 3b26 3804 f1f3 3796     .U 8.M.8&;.8...7
   160fc:	ae0d 364f d9de b689 6e7a b548 9b16 36e6     ..O6....znH....6
   1610c:	984e 373c bc0c 3749 f0c5 3777 8546 37c0     N.<7..I7..w7F..7
   1611c:	031f 380f 30f8 3838 d2d0 3853 02cb 3862     ...8.088..S8..b8
   1612c:	e425 3865 b1c3 3867 3eb4 386f 6937 3875     %.e8..g8.>o87iu8
   1613c:	7592 3864 0854 3831 8f13 37dd 106c 3781     .ud8T.18...7l..7
   1614c:	5aa8 3744 395b 3717 a3d7 3244 c3ce b77a     .ZD7[9.7..D2..z.
   1615c:	ece0 b7fb 3a8b b82e cb07 b850 82d6 b86c     .....:....P...l.
   1616c:	3587 b883 8b64 b88e d604 b893 6775 b890     .5..d.......ug..
   1617c:	bc82 b888 a2ea b883 1075 b87f e8a1 b866     ........u.....f.
   1618c:	82d8 b839 4677 b806 8044 b7b8 76cc b782     ..9.wF..D....v..
   1619c:	cbed b75e 0832 b766 a131 b75f f565 b732     ..^.2.f.1._.e.2.
   161ac:	4636 b703 92d5 b706 3cf9 b751 aecd b791     6F.......<Q.....
   161bc:	42ec b787 7a3e b70a e1f2 b5ea 2190 b64a     .B..>z.......!J.
   161cc:	2cc6 b710 c45d b720 a114 b5bf 62aa 3741     .,..]. ......bA7
   161dc:	fc3d 37a7 c887 379c 50bd 3736 73a7 3693     =..7...7.P67.s.6
   161ec:	9d98 3687 1198 3709 d849 3730 f200 36c5     ...6...7I.07...6
   161fc:	ddb9 b687 fd92 b744 4b16 b75a 80b9 b74e     ......D..KZ...N.
   1620c:	e978 b781 e762 b7b1 1402 b7ca 07a4 b7c2     x...b...........
   1621c:	f6ab b7b9 5da1 b7c7 5d69 b7e0 88c9 b7f3     .....]..i]......
   1622c:	f2f8 b7f5 a91a b7e0 3a3b b7bd 7f95 b7aa     ........;:......
   1623c:	f3e1 b7be 60f4 b7ed b45d b805 e23d b7f3     .....`..]...=...
   1624c:	b4ad b7ae c523 b75b b2d2 b729 b5ab b72e     ....#.[...).....
   1625c:	afd0 b735 6b2d b72f c6ec b719 aef9 b6c8     ..5.-k/.........
   1626c:	3a62 b56b 138f 3683 d390 36cf 9d4c 36e0     b:k....6...6L..6
   1627c:	29a9 36fd e0bd 3710 3601 3707 0d82 36c3     .).6...7.6.7...6
   1628c:	307f 368b d800 3692 680a 36af 59bf 368e     .0.6...6.h.6.Y.6
   1629c:	d351 34f4 cce9 b681 2e57 b69b d453 3507     Q..4....W...S..5
   162ac:	af28 371c 6a53 3784 2f72 3779 c959 3707     (..7Sj.7r/y7Y..7
   162bc:	6c8d 3613 6000 35e2 72f9 36a8 774b 3706     .l.6.`.5.r.6Kw.7
   162cc:	0ce4 3712 5f8d 3700 4452 36ba c0ec 3646     ...7._.7RD.6..F6
   162dc:	cb6a 35a2 4078 3590 27fd 35d8 a271 361a     j..5x@.5.'.5q..6
   162ec:	8594 3687 8487 36d0 dbdc 36cc cfce 3630     ...6...6...6..06
   162fc:	7add b5ed 4640 b678 4cc6 b618 8eea b43b     .z..@Fx..L....;.
   1630c:	2ee5 338e e374 350b dab7 3694 b0d3 371c     ...3t..5...6...7
   1631c:	ff78 3716 2d1a 35c8 ae89 b70c 5eee b761     x..7.-.5.....^a.
   1632c:	69c4 b727 4e59 b5d0 a38d 3679 2200 353e     .i'.YN....y6.">5
   1633c:	9941 b70d 175b b78f e31d b7a1 7323 b76b     A...[.......#sk.
   1634c:	1c48 b6c4 5c16 b5cb e5a6 b686 d876 b72b     H....\......v.+.
   1635c:	0cb9 36d5 c974 3699 8699 3617 aa0b b527     ...6t..6...6..'.
   1636c:	2a93 b694 0ed7 b70c ffda b712 57fa b638     .*...........W8.
   1637c:	8a1f 36fa 78ab 3797 044a 37e7 1c39 380c     ...6.x.7J..79..8
   1638c:	593d 3807 18a9 37e3 4e17 37dd 3176 380c     =Y.8...7.N.7v1.8
   1639c:	f9bb 382c a2cf 382b 02a2 3802 9255 378d     ..,8..+8...8U..7
   163ac:	123a 36b5 4ed8 3600 daab 36d0 96e3 3728     :..6.N.6...6..(7
   163bc:	f40e 36d4 0182 b52b 99b6 b63b f1e1 b4a9     ...6..+...;.....
   163cc:	1a8f 3559 ddc4 b64d 7243 b741 1de2 b7a8     ..Y5..M.CrA.....
   163dc:	987e b7b6 a1c4 b781 f5ff b703 a66d b688     ~...........m...
   163ec:	f469 b61d 22f3 b5a3 37e2 b60c 1f03 b689     i...."...7......
   163fc:	15c4 b6a1 afab b6ae 0c06 b6f8 7ce1 b735     .............|5.
   1640c:	05da b777 808e b7a0 58b9 b7b2 1958 b790     ..w......X..X...
   1641c:	8544 b713 6189 b67f ad52 b6ff 21a5 b796     D....a..R....!..
   1642c:	d05b b7db 7357 b7d0 0952 b772 af1c b652     [...Ws..R.r...R.
   1643c:	7269 363d cfd3 3692 ef97 369a 2a17 36a3     ir=6...6...6.*.6
   1644c:	17c5 36cc a50f 370f e576 3729 93f0 370f     ...6...7v.)7...7
   1645c:	31c0 368f 346b b5ae d5e0 b6f2 6bd3 b750     .1.6k4.......kP.
   1646c:	8aab b781 4020 b785 54e5 b780 1150 b789     .... @...T..P...
   1647c:	1314 b7a5 fff4 b7bd 4895 b7c2 9816 b7c0     .........H......
   1648c:	d917 b7c7 3e20 b7c1 dae6 b78b e719 b6be     .... >..........
   1649c:	326d 368f aa25 3708 9a35 36c1 f960 3612     m2.6%..75..6`..6
   164ac:	2777 3651 b09a 370e 0920 3744 9271 36ba     w'Q6...7 .D7q..6
   164bc:	516f b733 8d71 b7f5 8b2d b81f 625f b804     oQ3.q...-..._b..
   164cc:	523d b79e 946c b780 8e41 b7dc 5205 b834     =R..l...A....R4.
   164dc:	1a66 b861 3998 b861 9f31 b83d 8e25 b80b     f.a..9a.1.=.%...
   164ec:	63c8 b7cb fae8 b7b9 907c b7c7 56b2 b7b0     .c......|....V..
   164fc:	586b b72c 22ae 368a 2441 3785 df9a 37b7     kX,..".6A$.7...7
   1650c:	76b2 37ba cd31 37a0 96cf 378d 63c5 3799     .v.71..7...7.c.7
   1651c:	4279 37ba 9a7c 37c7 7be6 379b 1cc5 36e7     yB.7|..7.{.7...6
   1652c:	0379 b6a3 aa6b b719 c2c6 b654 f67a 371b     y...k.....T.z..7
   1653c:	5d09 37ad 5d9d 37cb cc62 379b 1b2c 3720     .].7.].7b..7,. 7
   1654c:	1b0e 36d5 2416 375d d17f 37d4 1921 380f     ...6.$]7...7!..8
   1655c:	37aa 3811 0273 37fb 4bb8 37e0 55a7 37e9     .7.8s..7.K.7.U.7
   1656c:	a52a 37fa 5375 37f2 9651 37cf 63bc 37ae     *..7uS.7Q..7.c.7
   1657c:	70b4 37aa 5bf7 37bd 8c58 37bb 6b5a 378d     .p.7.[.7X..7Zk.7
   1658c:	f181 3736 1d07 373d e984 379a cf4c 37e0     ..67..=7...7L..7
   1659c:	91cd 37f8 8e2a 37cb b1e5 3770 5360 36e0     ...7*..7..p7`S.6
   165ac:	3486 36af 53f9 372b ff14 37b0 e9e7 3812     .4.6.S+7...7...8
   165bc:	0925 383c 483d 383b a878 3816 ef00 37cf     %.<8=H;8x..8...7
   165cc:	d9d9 3792 a1b7 3798 f4e6 37d2 9a20 3800     ...7...7...7 ..8
   165dc:	913c 37ec 6cce 3790 7a7c 3609 819e b728     <..7.l.7|z.6..(.
   165ec:	38fc b765 2dd4 b733 75b8 b6dd 69bf b654     .8e..-3..u...iT.
   165fc:	f6fb 342f c6b4 35de eccb 3457 833c b596     ../4...5..W4<...
   1660c:	3f55 3597 7ba1 36c4 7312 3716 d2e4 3703     U?.5.{.6.s.7...7
   1661c:	a317 365c d795 b614 bc95 b6f4 7ad7 b758     ..\6.........zX.
   1662c:	c0b6 b7b4 01dd b815 d463 b85a b962 b87f     ........c.Z.b...
   1663c:	8227 b862 31bd b828 9ed2 b81f 90a2 b868     '.b..1(.......h.
   1664c:	cdf5 b8ac b728 b8d7 ce0d b8de 931c b8c5     ....(...........
   1665c:	87da b8a6 9fe1 b898 5e84 b89b 0b8c b8a3     .........^......
   1666c:	56c9 b8a9 7fa6 b8aa c7ab b8a2 1c37 b896     .V..........7...
   1667c:	3cd5 b88d b909 b888 19cd b883 aa31 b87b     .<..........1.{.
   1668c:	91af b87d aba5 b884 43f0 b888 de0b b883     ..}......C......
   1669c:	7b97 b86b 1776 b845 4fa6 b829 5dcb b824     .{k.v.E..O)..]$.
   166ac:	8d06 b82b 059b b82a 4037 b817 fbb7 b7f9     ..+...*.7@......
   166bc:	f049 b7d2 314d b7c0 2512 b7b1 0bb7 b78f     I...M1...%......
   166cc:	ea70 b71b f9fc 3542 93ac 3714 ed4c 3733     p.....B5...7L.37
   166dc:	5e70 3692 5398 b704 f120 b796 75e7 b785     p^.6.S.. ....u..
   166ec:	1cea 3474 ccb3 37a4 7e71 37f8 259d 37e8     ..t4...7q~.7.%.7
   166fc:	87a3 37a3 33f1 372d 5678 3641 5378 b530     ...7.3-7xVA6xS0.
   1670c:	7d8a 3546 7df9 36a5 5700 36f3 8187 36a1     .}F5.}.6.W.6...6
   1671c:	3726 34a2 69d6 b4b4 55ec 36bf 1729 377f     &7.4.i...U.6)..7
   1672c:	858e 37b3 2b43 379c fde8 3701 0f9b b5ee     ...7C+.7...7....
   1673c:	babe b2ae e4bc 373d 30a4 37a2 4f17 3780     ......=7.0.7.O.7
   1674c:	802f 36b5 c93c 361a c3e3 3721 1893 37a6     /..6<..6..!7...7
   1675c:	16cd 37c7 f19e 379c 7507 3712 070a 35a4     ...7...7.u.7...5
   1676c:	92df 3629 6000 375a d55c 37d4 668e 3801     ..)6.`Z7\..7.f.8
   1677c:	de3b 37f0 99ab 37d5 adb4 37cf e3ec 37c5     ;..7...7...7...7
   1678c:	cb6b 3796 ffac 370d fca0 3580 b240 35ac     k..7...7...5@..5
   1679c:	e68e 36da ada1 36e0 170b b5f4 d2fa b73f     ...6...6......?.
   167ac:	b6a3 b76e 3344 b730 9de2 b6bf f014 b6a0     ..n.D30.........
   167bc:	572a b709 8a16 b723 18e1 b648 c43e 3717     *W....#...H.>..7
   167cc:	97f8 3789 1765 377d 2197 3732 cfbd 372f     ...7e.}7.!27../7
   167dc:	a63c 3792 3011 37e5 57b2 3804 8a9c 37e1     <..7.0.7.W.8...7
   167ec:	8969 379c fb6a 3755 a361 3735 04c3 375f     i..7j.U7a.57.._7
   167fc:	f8d5 379a 978a 37b1 c7a1 379b 5814 3762     ...7...7...7.Xb7
   1680c:	9afc 371e 2279 370b b389 374b 19e2 37b2     ...7y".7..K7...7
   1681c:	4297 37ff 38da 380a bfeb 37e6 e672 37a9     .B.7.8.8...7r..7
   1682c:	49f2 37a7 5125 37f7 f47f 3830 7f59 384d     .I.7%Q.7..08Y.M8
   1683c:	9893 3847 43a5 382d f6ba 380b ddf5 37dd     ..G8.C-8...8...7
   1684c:	1865 37c7 8cb6 37df 6664 380c c8a1 3828     e..7...7df.8..(8
   1685c:	bafa 3831 15c2 3820 fad9 37ff ec99 37c2     ..18.. 8...7...7
   1686c:	4673 3797 919e 3782 531f 3782 491e 3783     sF.7...7.S.7.I.7
   1687c:	719b 3765 e1ad 3724 85b5 36a9 2687 b526     .qe7..$7...6.&&.
   1688c:	a32c b6b5 9afd b6bc 104a b5c0 8cef 361c     ,.......J......6
   1689c:	65b5 366e 8159 3692 c0db 36b0 6595 3690     .en6Y..6...6.e.6
   168ac:	fa77 35cb 6e91 3520 bc05 36c8 dffe 378b     w..5.n 5...6...7
   168bc:	b4fb 37c8 b534 37af 90bc 375a d272 373f     ...74..7..Z7r.?7
   168cc:	aae1 37a4 81a2 37ff 724b 3811 60ca 37f5     ...7...7Kr.8.`.7
   168dc:	be7e 3798 4c53 3706 df1c 367e 333e 36ff     ~..7SL.7..~6>3.6
   168ec:	1d02 3787 dcfb 37bb f3b3 37c3 bc71 37ba     ...7...7...7q..7
   168fc:	8746 37b6 1f41 37a1 0cc0 3742 ce85 3525     F..7A..7..B7..%5
   1690c:	33b3 b714 09ab b753 82ad b71a c81b b62c     .3....S.......,.
   1691c:	fe56 3463 15ee b657 568a b703 6ef4 b70f     V.c4..W..V...n..
   1692c:	7439 b6d0 ca64 b6d3 b0d1 b75a bbad b7bb     9t..d.....Z.....
   1693c:	6695 b7c5 f6e5 b74d 5bb5 3567 28a6 35cd     .f....M..[g5.(.5
   1694c:	6248 b754 e119 b7fa 51f1 b813 d88f b7c3     HbT......Q......
   1695c:	9325 b688 2df2 3715 8e1a 372e 529d 36af     %....-.7...7.R.6
   1696c:	81cb 34ec 8f1f b4cc ff05 35f4 6b7b 368d     ...4.......5{k.6
   1697c:	f4d4 3699 16f3 35c5 9e27 b69f ce84 b722     ...6...5'.....".
   1698c:	2e22 b70c 4354 b5a4 47f5 36cc da99 370f     "...TC...G.6...7
   1699c:	148f 36c1 d606 3609 d8d4 361e fe20 36b6     ...6...6...6 ..6
   169ac:	87d0 36b8 38ed 35ce 9ee6 b507 ddb3 3655     ...6.8.5......U6
   169bc:	caaf 3716 139d 3741 6dd4 372b 3fff 3711     ...7..A7.m+7.?.7
   169cc:	2bfc 371d 7ac2 3734 375d 3721 b9e8 36d3     .+.7.z47]7!7...6
   169dc:	e675 368b 6128 368d 153a 36c2 c3ea 3727     u..6(a.6:..6..'7
   169ec:	21d7 378b 5cad 37ae b41e 37a0 0003 3775     .!.7.\.7...7..u7
   169fc:	3194 373c 6d6f 3713 d975 36c2 a184 3619     .1<7om.7u..6...6
   16a0c:	0316 b605 b2ea b6b4 988c b667 d860 361d     ..........g.`..6
   16a1c:	624e 3633 41a8 b6bd 5842 b767 6400 b759     Nb36.A..BXg..dY.
   16a2c:	176a b652 6674 370b c7f1 3743 b759 3678     j.R.tf.7..C7Y.x6
   16a3c:	b63c b703 2a5c b764 01ba b760 b89e b75a     <...\*d...`...Z.
   16a4c:	7481 b777 bb0b b783 1075 b782 be9c b791     .tw.....u.......
   16a5c:	a639 b7af 0cde b7b3 f0ce b794 f3fb b782     9...............
   16a6c:	2ef4 b79a 131c b7c0 7c86 b7c9 4a00 b7a2     .........|...J..
   16a7c:	fbd0 b720 6c55 3586 3024 36b7 a651 34f4     .. .Ul.5$0.6Q..4
   16a8c:	4223 b70a 5314 b73a b753 b6af af1e 3673     #B...S:.S.....s6
   16a9c:	c2c9 370e bfcd 3708 073c 36db e04d 36d3     ...7...7<..6M..6
   16aac:	f898 36b0 f7d0 3564 a249 b6aa 7f76 b71b     ...6..d5I...v...
   16abc:	0fdc b734 6a16 b717 1173 b66e 5077 364c     ..4..j..s.n.wPL6
   16acc:	8f47 368d cb37 b692 4f50 b78e 3c10 b7a8     G..67...PO...<..
   16adc:	8bb0 b707 67f3 370e 6610 3784 b4a4 3731     .....g.7.f.7..17
   16aec:	c6b8 b561 a575 b72e c678 b75c 8632 b72c     ..a.u...x.\.2.,.
   16afc:	5e23 b70d 9810 b762 dae3 b7c6 1f5a b7f8     #^....b.....Z...
   16b0c:	21de b7c2 6258 b6d7 808d 372e 286a 379c     .!..Xb.....7j(.7
   16b1c:	9f9a 379a 4576 3790 66bf 37ad 142b 37e5     ...7vE.7.f.7+..7
   16b2c:	7a50 3802 498a 37ef ba4a 37bb f41c 379d     Pz.8.I.7J..7...7
   16b3c:	a87d 37a9 6f76 37b9 176b 3796 c698 36d4     }..7vo.7k..7...6
   16b4c:	2386 b6c2 447c b72d 6d70 b6ff 36c0 b6d3     .#..|D-.pm...6..
   16b5c:	83f8 b74e b1c2 b7b5 fd41 b7d3 8462 b79d     ..N.....A...b...
   16b6c:	5af3 b6da 8261 3687 5c54 3726 fe2c 3757     .Z..a..6T\&7,.W7
   16b7c:	1894 376f 17de 3760 c5b7 3722 9252 36a6     ..o7..`7.."7R..6
   16b8c:	d086 3647 a0c9 36d3 3088 3744 b888 373e     ..G6...6.0D7..>7
   16b9c:	f407 3593 37f8 b76b dead b7c9 7889 b7d1     ...5.7k......x..
   16bac:	f342 b7ba 94ce b7bd f10c b7d2 b9ee b7d4     B...............
   16bbc:	0410 b7bb b915 b791 5cd2 b723 1460 359d     .........\#.`..5
   16bcc:	d4b4 373f 86e5 378a 6ae7 3790 c42b 3796     ..?7...7.j.7+..7
   16bdc:	29ed 37ae dbc3 37be a153 379f 4c56 3701     .).7...7S..7VL.7
   16bec:	79cf b6e2 00f0 b789 9ddf b78c 2485 b740     .y...........$@.
   16bfc:	2b6d b70b 4238 b75e 315f b7d6 21af b81d     m+..8B^._1...!..
   16c0c:	54b4 b82a f630 b80a 5e23 b7a6 e444 b6e8     .T*.0...#^..D...
   16c1c:	91fe 35b3 9248 3694 5a2f 36c1 78dd 371e     ...5H..6/Z.6.x.7
   16c2c:	60da 3784 5d41 37ac a67a 379b 7be0 371d     .`.7A].7z..7.{.7
   16c3c:	f4ee b527 37e8 b6b8 abc5 b6e1 f2b8 b714     ..'..7..........
   16c4c:	e96a b74c 348c b780 6e7d b7a3 4817 b7dd     j.L..4..}n...H..
   16c5c:	788c b810 f491 b829 bc05 b832 6580 b82d     .x....)...2..e-.
   16c6c:	cb74 b820 5f27 b80a a37e b7c8 0f31 b767     t. .'_..~...1.g.
   16c7c:	01be b709 2a17 b728 4499 b78f c8c1 b7ba     .....*(..D......
   16c8c:	34fc b797 378c b6bf 35bf 3658 faaf 3404     .4...7...5X6...4
   16c9c:	04ae b748 45a3 b7ca bd1f b800 e90e b807     ..H..E..........
   16cac:	a5b3 b811 0445 b82b a49a b845 9513 b853     ....E.+...E...S.
   16cbc:	04ea b85d 5b28 b862 9beb b849 a8bc b804     ..].([b...I.....
   16ccc:	0af2 b73b a83e 3648 655c 36cd fef4 365b     ..;.>.H6\e.6..[6
   16cdc:	5c7f 3693 d65c 3764 6fc6 37d6 c926 3806     .\.6\.d7.o.7&..8
   16cec:	8e81 37f5 8657 3796 5558 3687 dec2 b6a1     ...7W..7XU.6....
   16cfc:	5272 b6c3 952b b643 cae7 b5ad fb71 b623     rR..+.C.....q.#.
   16d0c:	0a37 b6b1 8653 b714 a828 b745 85d5 b743     7...S...(.E...C.
   16d1c:	e8a2 b705 80f4 b64d 3434 3615 e984 3712     ......M.44.6...7
   16d2c:	3252 3769 286e 3759 84c6 36ed 07da 365b     R2i7n(Y7...6..[6
   16d3c:	8497 36bf cf1c 373e 1f3f 375c a5b9 36d2     ...6..>7?.\7...6
   16d4c:	2d28 b6d4 e341 b78a 346a b7a3 9f04 b792     (-..A...j4......
   16d5c:	7736 b783 6d17 b781 6675 b76a 0708 b70b     6w...m..ufj.....
   16d6c:	64ae 358f ce50 3726 0fb8 3768 0866 373b     .d.5P.&7..h7f.;7
   16d7c:	2b3e 36c2 17aa 36d0 d08c 378e 827b 3807     >+.6...6...7{..8
   16d8c:	7d10 3831 e08a 383a 5523 3836 19ab 3835     .}18..:8#U68..58
   16d9c:	c3f5 3839 ecb8 383b 4f33 382e c462 3806     ..98..;83O.8b..8
   16dac:	6f55 3793 63eb 3698 046e 35d0 c9f1 3719     Uo.7.c.6n..5...7
   16dbc:	b4bf 3790 5199 3789 5f9e 370a f3cf 35d4     ...7.Q.7._.7...5
   16dcc:	96aa 35cf e09c 36d3 958e 3746 9261 3790     ...5...6..F7a..7
   16ddc:	75f5 37cb 4618 3807 03ce 381b 93a0 3812     .u.7.F.8...8...8
   16dec:	125b 37e1 74f2 378c a2ab 3730 895e 373e     [..7.t.7..07^.>7
   16dfc:	3ab1 3780 c2f3 377b 3f67 3710 d802 3542     .:.7..{7g?.7..B5
   16e0c:	8dd8 b674 05ad b652 2638 34f0 d7bd 3682     ..t...R.8&.4...6
   16e1c:	f56d 36a5 ea9b 3618 69a1 b6a8 9664 b76b     m..6...6.i..d.k.
   16e2c:	ccc5 b78d 0e61 b711 7b36 36ce 6c19 3797     ....a...6{.6.l.7
   16e3c:	dac0 37af d662 3777 bb62 3685 ba73 b69a     ...7b.w7b..6s...
   16e4c:	4c40 b6cc cc7c b5d1 f447 3630 e735 3596     @L..|...G.065..5
   16e5c:	d90a b6cd abd7 b781 6744 b7c4 cda2 b7ef     ........Dg......
   16e6c:	aec8 b7fb 2bed b7d5 5701 b781 3910 b70c     .....+...W...9..
   16e7c:	7802 b75a a85e b7e1 ef5d b822 2ccd b829     .xZ.^...]."..,).
   16e8c:	20aa b7fa c65e b752 c78d 358c d36c 362b     . ..^.R....5l.+6
   16e9c:	c45c b6f9 3c3c b79f 22c3 b7a0 dbef b674     \...<<..."....t.
   16eac:	d9c4 3784 4bef 37c5 9757 3788 7c7a 3684     ...7.K.7W..7z|.6
   16ebc:	59fd b658 4d6b b623 2054 35da 9c12 3613     .YX.kM#.T .5...6
   16ecc:	e79e b612 148e b6f0 0fa5 b70f 5a63 b6c7     ............cZ..
   16edc:	9eb3 b607 d117 347c f257 3547 adae 3619     ......|4W.G5...6
   16eec:	4e11 36d9 a20c 374b dd2e 3793 199f 37b8     .N.6..K7...7...7
   16efc:	3306 37ca 7a6f 37c9 1ecd 37c8 e5b9 37d4     .3.7oz.7...7...7
   16f0c:	1050 37d8 c525 37a8 870e 3716 b17e b50f     P..7%..7...7~...
   16f1c:	8497 b598 2f9c 36ff 75ce 3794 1c53 37a5     ...../.6.u.7S..7
   16f2c:	1e1a 3752 8437 366e 9dda b53a 5010 35a6     ..R77.n6..:..P.5
   16f3c:	b808 3714 af5e 37ae 28d5 380b 5751 382e     ...7^..7.(.8QW.8
   16f4c:	f6b0 383c 7682 383c ddc9 382f 0042 381d     ..<8.v<8../8B..8
   16f5c:	7546 380e ee21 3802 c988 37d5 3a2e 3789     Fu.8!..8...7.:.7
   16f6c:	d8d0 372a 6b25 3756 2113 37a9 6030 37b0     ..*7%kV7.!.70`.7
   16f7c:	4e86 3733 0e90 b5e0 dab8 b689 d97f 3688     .N37...........6
   16f8c:	18f4 376e f793 37a2 4fbc 37aa 5afb 37b1     ..n7...7.O.7.Z.7
   16f9c:	e82d 37c6 308a 37d7 1cef 37d0 d991 37b5     -..7.0.7...7...7
   16fac:	9826 3790 f490 3749 0133 36e3 059f 354b     &..7..I73..6..K5
   16fbc:	86d2 b6ec a502 b764 3e2d b766 829d b704     ......d.->f.....
   16fcc:	3de4 b64e 35c2 b691 7c5e b730 f7bc b78d     .=N..5..^|0.....
   16fdc:	0d0b b7a1 6f91 b78c 5a14 b763 99b9 b768     .....o...Zc...h.
   16fec:	14b3 b791 333f b7a6 a03d b795 5b49 b737     ....?3..=...I[7.
   16ffc:	a070 b652 100f b50f c46b b689 8317 b708     p.R.....k.......
   1700c:	e395 b711 e31e b716 41f4 b760 97e6 b7ad     .........A`.....
   1701c:	5a05 b7db 3152 b7e3 b070 b7d8 571b b7d6     .Z..R1..p....W..
   1702c:	9066 b7cc 3286 b79f b6ae b750 ee25 b733     f....2....P.%.3.
   1703c:	e53d b75a b3e9 b76c d487 b74d 2c0a b71d     =.Z...l...M..,..
   1704c:	9faf b6f9 57ae b70b 845c b73b a2f8 b746     .....W..\.;...F.
   1705c:	d108 b70f 4ccd b6a5 dde0 b68e 708f b6c1     .....L.......p..
   1706c:	499b b6c7 7bbe b614 c07c 3621 a73a 3504     .I...{..|.!6:..5
   1707c:	dc7c b726 c7d7 b7b1 0c0d b7d2 add3 b7b3     |.&.............
   1708c:	421d b788 202d b773 23f5 b787 16e2 b795     .B..- s..#......
   1709c:	ecc2 b799 8932 b7a6 74a3 b7bc f9d9 b7c2     ....2....t......
   170ac:	0d89 b7ad b4f7 b786 11e7 b73e 6234 b707     ..........>.4b..
   170bc:	7cf3 b70a 78f7 b745 1652 b780 fc90 b784     .|...xE.R.......
   170cc:	d8fc b761 c6dd b70e 13fa b5a1 c4d4 36bb     ..a............6
   170dc:	ca59 36ee 817a 35f5 0545 b6ef 8873 b784     Y..6z..5E...s...
   170ec:	a8db b7bc 5813 b7de c24c b7d7 f407 b798     .....X..L.......
   170fc:	dc42 b6f4 8a56 b543 f813 b61e cf4f b6ef     B...V.C.....O...
   1710c:	ca81 b704 94bb b687 691b 3583 4981 36e4     .........i.5.I.6
   1711c:	137f 377f 15f0 37cb 4ff3 37f3 4c65 37ec     ...7...7.O.7eL.7
   1712c:	bb4a 37d6 0110 37d5 cf3e 37e1 23a8 37e3     J..7...7>..7.#.7
   1713c:	6b4e 37d4 79ad 37c2 8794 37ab b9ac 3773     Nk.7.y.7...7..s7
   1714c:	a923 3680 f815 b70e 6d63 b78b 7b62 b79b     #..6....cm..b{..
   1715c:	d377 b796 040e b7a1 ae00 b7c5 fc42 b7ef     w...........B...
   1716c:	1a79 b7ea 235a b792 6c97 b650 5830 3693     y...Z#...lP.0X.6
   1717c:	79ac 365d 41f6 361e c6b6 3709 5e07 3794     .y]6.A.6...7.^.7
   1718c:	98f9 37c8 72e2 37c9 0216 37a5 eb78 3783     ...7.r.7...7x..7
   1719c:	e875 378f b518 37ba 78e7 37c0 3abc 3784     u..7...7.x.7.:.7
   171ac:	f0ee 36dc 85e1 362d ec13 36a9 b97e 3716     ...6..-6...6~..7
   171bc:	322e 36f1 ee38 b56e dce0 b6cc 77c5 b556     .2.68.n......wV.
   171cc:	3f0b 3731 bdcd 378d 59a8 3755 f757 3637     .?17...7.YU7W.76
   171dc:	a535 b61b 94b5 369a e7be 379d 165a 37e9     5......6...7Z..7
   171ec:	4498 37ca 35ca 3748 2ec8 3609 17d2 3659     .D.7.5H7...6..Y6
   171fc:	73f5 376c b9ac 37bb bec2 379e 17cd 3726     .sl7...7...7..&7
   1720c:	fc22 36e7 4db4 372e 5478 3748 4a50 36f3     "..6.M.7xTH7PJ.6
   1721c:	073a b4a3 8a7b b68b 2ea0 b35d 975a 3717     :...{.....].Z..7
   1722c:	ccf8 375e 3616 36a0 b8b5 b76a f305 b804     ..^7.6.6..j.....
   1723c:	23ae b81e 03f5 b801 aa3b b7aa 2fbf b799     .#......;..../..
   1724c:	170e b7e4 9f7a b822 93e9 b834 6264 b81d     ....z."...4.db..
   1725c:	9613 b7e4 170a b7a2 8b97 b796 080a b7bc     ................
   1726c:	d421 b7e9 c0a8 b7f2 9f9e b7d1 1309 b7b2     !...............
   1727c:	8c16 b7b0 ada8 b7a7 5229 b75c 66ec b68f     ........)R\..f..
   1728c:	6e74 b582 ecca b6a4 64aa b745 602b b784     tn.......dE.+`..
   1729c:	4c93 b763 1185 b703 c1c1 b6c8 75b1 b743     .Lc..........uC.
   172ac:	db11 b7aa c7da b7d0 79f8 b7bc c709 b794     .........y......
   172bc:	0980 b796 32cc b7be 59c9 b7c0 8f52 b75d     .....2...Y..R.].
   172cc:	9fd8 b456 7fd5 36d7 4112 36bd 96c2 364d     ..V....6.A.6..M6
   172dc:	7e31 363b e9e9 36aa 308f 3702 d1dd 36f3     1~;6...6.0.7...6
   172ec:	5d88 3633 fc7e b58e baf9 35bf 51e1 370a     .]36~......5.Q.7
   172fc:	1413 3751 16de 372d 08ab 36ae cbeb 36a1     ..Q7..-7...6...6
   1730c:	eb01 374e 0d96 37a9 82ba 37a3 15c2 3768     ..N7...7...7..h7
   1731c:	19f2 376f d8b8 37c6 8d7a 380c 455b 380e     ..o7...7z..8[E.8
   1732c:	098f 37ca cc86 374e 1cbb 370b bdaa 3779     ...7..N7...7..y7
   1733c:	735e 37e1 7644 3816 9df7 3817 2685 37e5     ^s.7Dv.8...8.&.7
   1734c:	28b4 3771 b36b 36c9 3a20 371a 8376 37b6     .(q7k..6 :.7v..7

0001735c <am_hal_cachectrl_defaults>:
   1735c:	0308 0000                                   ....

00017360 <g_AM_HAL_GPIO_DISABLE>:
   17360:	0003 0000                                   ....

00017364 <g_AM_HAL_GPIO_OUTPUT>:
   17364:	0403 0000                                   ....

00017368 <g_AM_HAL_GPIO_TRISTATE>:
   17368:	0c03 0000                                   ....

0001736c <g_ui8Bit76Capabilities>:
   1736c:	0101 0280 0180 8001 0101 8080 8080 8080     ................
   1737c:	8080 8080 8008 8080 0180 0180 8080 8080     ................
   1738c:	8080 8080 0402 0180 0401 0101 8080 8080     ................
   1739c:	0101 0000                                   ....

000173a0 <g_ui8Inpen>:
   173a0:	2323 6227 03a1 1087 5303 e100 8151 5541     ##'b.....S..Q.AU
   173b0:	c405 4080 b101 4140 3114 31a0 f100 1180     ...@..@A.1.1....
   173c0:	2191 11c1 11e5 3045 0037 3130 7100 4000     .!....E07.01.q.@
   173d0:	3130 0000                                   01..

000173d4 <g_ui8NCEtable>:
   173d4:	4232 1352 1202 6022 4333 2153 4030 2050     2BR..."`3CS!0@P 
   173e4:	4131 1151 ffff ffff ffff ffff 4131 6051     1AQ.........1AQ`
   173f4:	4030 0050 4333 2353 4232 6052 1000 3020     0@P.3CS#2BR`.. 0
   17404:	4030 6150 4131 0151 1202 4222 1303 6023     0@Pa1AQ..."B..#`
   17414:	1000 5020 1101 4121 1202 3222 1303 6033     .. P..!A.."2..3`
   17424:	4131 2151 4232 2252 4333 0353 1000 4020     1AQ!2BR"3CS... @
   17434:	1101 5121 4232 0252 4333 1353 4030 1050     ..!Q2BR.3CS.0@P.
   17444:	4131 6051 4232 1252 4333 0353 1000 4020     1AQ`2BR.3CS... @
   17454:	1101 6121 1202 5222 1303 3323 1000 3020     ..!a.."R..#3.. 0
   17464:	4131 6151 4232 0252 1303 5333 ffff ffff     1AQa2BR...3S....
   17474:	ffff ffff 1101 6121 1000 5020 1101 6121     ......!a.. P..!a
   17484:	1202 5222 4333 1353 4030 6150 1101 3121     .."R3CS.0@Pa..!1
   17494:	1202 3222 1303 4323                         .."2..#C

0001749c <g_ui8nCEpins>:
   1749c:	0707 0207 0802 0008 0202 0102 0101 0101     ................
   174ac:	0101 0101 0101 0101 0101 0101 0101 0101     ................
   174bc:	0101 0101 0101 0801 0008 0101 0101 0101     ................
   174cc:	0101 0000                                   ....

000174d0 <g_am_hal_mcuctrl_flash_size>:
   174d0:	4000 0000 8000 0000 0000 0001 0000 0002     .@..............
   174e0:	0000 0004 0000 0008 0000 0010 0000 0020     .............. .
   174f0:	0000 0018 0000 0000 0000 0000 0000 0000     ................
	...

00017510 <g_am_hal_mcuctrl_sram_size>:
   17510:	4000 0000 8000 0000 0000 0001 0000 0002     .@..............
   17520:	0000 0004 0000 0008 0000 0010 0000 0006     ................
   17530:	0000 000c 0000 0000 0000 0000 0000 0000     ................
	...

00017550 <am_hal_pwrctrl_memory_control>:
	...
   17568:	0001 0000 0001 0000 0001 0000 1fff 0000     ................
   17578:	1fff 0000 0001 0000 0003 0000 0003 0000     ................
   17588:	0003 0000 1fff 0000 1fff 0000 0003 0000     ................
   17598:	0007 0000 0007 0000 0007 0000 1fff 0000     ................
   175a8:	1fff 0000 0007 0000 000f 0000 000f 0000     ................
   175b8:	000f 0000 1fff 0000 1fff 0000 000f 0000     ................
   175c8:	001f 0000 001f 0000 001f 0000 1fff 0000     ................
   175d8:	1fff 0000 001f 0000 003f 0000 003f 0000     ........?...?...
   175e8:	003f 0000 1fff 0000 1fff 0000 003f 0000     ?...........?...
   175f8:	007f 0000 007f 0000 007f 0000 1fff 0000     ................
   17608:	1fff 0000 007f 0000 00ff 0000 00ff 0000     ................
   17618:	00ff 0000 1fff 0000 1fff 0000 00ff 0000     ................
   17628:	01ff 0000 01ff 0000 01ff 0000 1fff 0000     ................
   17638:	1fff 0000 01ff 0000 03ff 0000 03ff 0000     ................
   17648:	03ff 0000 1fff 0000 1fff 0000 03ff 0000     ................
   17658:	07ff 0000 07ff 0000 07ff 0000 1fff 0000     ................
   17668:	1fff 0000 07ff 0000 0fff 0000 0fff 0000     ................
   17678:	0fff 0000 1fff 0000 1fff 0000 0fff 0000     ................
   17688:	1fff 0000 1fff 0000 1fff 0000 1fff 0000     ................
   17698:	1fff 0000 1fff 0000 2000 0000 2000 0000     ......... ... ..
   176a8:	2000 0000 6000 0000 6000 0000 2000 0000     . ...`...`... ..
   176b8:	6000 0000 6000 0000 6000 0000 6000 0000     .`...`...`...`..
   176c8:	6000 0000 6000 0000 0000 c000 0000 0000     .`...`..........
   176d8:	0000 c000 0000 c000 0000 0000 0000 8000     ................
   176e8:	7fff c000 7fff 0000 7fff c000 7fff c000     ................
   176f8:	7fff 0000 7fff 8000                         ........

00017700 <am_hal_pwrctrl_peripheral_control>:
	...
   1770c:	0001 0000 0004 0000 0004 0000 0002 0000     ................
   1771c:	0008 0000 0008 0000 0004 0000 0008 0000     ................
   1772c:	0008 0000 0008 0000 0008 0000 0008 0000     ................
   1773c:	0010 0000 0010 0000 0010 0000 0020 0000     ............ ...
   1774c:	0010 0000 0010 0000 0040 0000 0010 0000     ........@.......
   1775c:	0010 0000 0080 0000 0004 0000 0004 0000     ................
   1776c:	0100 0000 0004 0000 0004 0000 0200 0000     ................
   1777c:	0020 0000 0020 0000 0400 0000 0004 0000      ... ...........
   1778c:	0004 0000 0800 0000 0040 0000 0040 0000     ........@...@...
   1779c:	1000 0000 0080 0000 0080 0000 2000 0000     ............. ..
   177ac:	0100 0000 0100 0000                         ........
